var Formats = require('./formats').formats;
var Payloads = require('./formats').payloads;

module.exports = {
	LB0000: {
		desc: 'Route for load balancer checking.  Just needs to reply to show the load balancer the instance is alive',
		route: {
			method: 'GET',
			path:	'/alive',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: function(request, reply) {
					reply();
				}
			}
		}
	},

	DEV0000: {
		desc: 'Used as a convenience during development.  Is inaccessible once behind a load balancer. Dev requires a home view',
		route: {
			method: 'GET',
			path:	'/',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: function(request, reply) {
					reply.view('home');
				}
			}
		}
	},

	DEV0001: {
		desc: 'Needed for development to map local resource to their public path.  Inaccessible one behind a load balancer.',
		route: {
			method: 'GET',
			path:	'/{public*}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: {
					directory: {
						path: "public",
						listing: false,
						index: false
					}
				}
			}
		}
	},

	TR1000: {
		desc: 'Store a collection of STLD transactions',
		route: {
			method: 'POST',
			path: '/trans/{guid}/stld',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					payload: Payloads.stld,
				}
			}
		}
	},

	TR1001: {
		desc: 'Store a DC Invoice',
		route: {
			method: 'POST',
			path: '/trans/{guid}/invoice',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					// payload: {
					// 	invoiceHeader: Joi.object().keys({
					// 		transactionType:			Joi.string().alphanum(),
					// 		transactionQualifier:		Joi.string().alphanum(),
					// 		versionNumber:				Joi.string().alphanum(),
					// 		invoiceIdentifier:			Joi.string().alphanum(),
					// 		nationalNumber:				Joi.number().integer(),
					// 		distributionCenterNumber:	Joi.number().integer(),
					// 		invoiceDate:				Formats.date_YYMMDD,
					// 		deliveryDate:				Formats.date_YYMMDD,
					// 		referenceInvoice:			Joi.string().alphanum(),
					// 		termsNetDueDate:			Formats.date_YYMMDD,
					// 		termsNetDays:				Joi.number().integer(),
					// 		orderType:					Joi.string().alphanum(),
					// 		routeNumber:				Joi.string().alphanum()
					// 	}),
					// 	itemDetail: Joi.array().items({
					// 		wrinID:					Joi.number(),
					// 		quantityOrdered:		Joi.number(),
					// 		invoiceQuantity:		Joi.number(),
					// 		mcdGLAccountNumber:		Joi.number(),
					// 		casePrice:				Joi.number(),
					// 		packSize:				Joi.number(),
					// 		innerPackSize:			Joi.number(),
					// 		innerPackCount:			Joi.number(),
					// 		innerPackDescription:	Joi.string(),
					// 		itemDescription:		Joi.string(),
					// 		stateTaxAmount:			Joi.number(),
					// 		taxAmount1:				Joi.number(),
					// 		taxAmount2:				Joi.number(),
					// 		taxAmount3:				Joi.number(),
					// 	}).optional(),
					// 	allowanceCharge: Joi.array().items({
					// 		wrinID:					Joi.number(),
					// 		allowanceCharge:		Joi.number(),
					// 		allowanceDescription:	Joi.string(),
					// 		mcdGLAccountNumber:		Joi.number(),
					// 	}).optional(),
					// 	allowanceChargeDetail: Joi.array().items({
					// 		wrinID:					Joi.number(),
					// 		quantityOrdered:		Joi.number(),
					// 		invoiceQuantity:		Joi.number(),
					// 		mcdGLAccountNumber:		Joi.number(),
					// 		casePrice:				Joi.number(),
					// 		packSize:				Joi.number(),
					// 		innerPackSize:			Joi.number(),
					// 		innerPackCount:			Joi.number(),
					// 		innerPackDescription:	Joi.string(),
					// 		itemDescription:		Joi.string(),
					// 		stateTaxAmount:			Joi.number(),
					// 		taxAmount1:				Joi.number(),
					// 		taxAmount2:				Joi.number(),
					// 		taxAmount3:				Joi.number(),
					// 	}).optional(),
					// 	invoiceTrailer: Joi.object().keys({
					// 		invoiceTotalAmount:		Joi.number().greater(0),
					// 		totalSalesTax:			Joi.number(),
					// 		totalTax1:				Joi.number(),							
					// 		totalTax2:				Joi.number(),							
					// 		totalTax3:				Joi.number(),							
					// 		totalInvoiceQuantity:	Joi.number90.greater(0)
					// 	})
					// }
				},
			}
		}
	},

	TR1002: {
		desc: 'Store SMART wrins',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart610',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1003: {
		desc: 'Store SMART item_definitions',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart620',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1004: {
		desc: 'Store SMART item_cross_reference',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart630',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1005: {
		desc: 'Store SMART uom',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart640',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1006: {
		desc: 'Store SMART locations',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart650',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1007: {
		desc: 'Store SMART location_ownership',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart651',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1008: {
		desc: 'Store SMART master_recipes',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart660',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1009: {
		desc: 'Store SMART meal_definitions',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart661',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1010: {
		desc: 'Store SMART menu_item_recipe_assignments',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart670',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1011: {
		desc: 'Store SMART store_level_BOMS',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart680',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1012: {
		desc: 'Store HR Employee records',
		route: {
			method: 'POST',
			path: '/trans/{guid}/employeeMaster',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.guid
					}
				}
			}
		}
	},

	TR1013: {
		desc: 'Store eLabor Schedule and Projection records',
		route: {
			method: 'POST',
			path: '/trans/{guid}/schedules',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.guid
					}
				}
			}
		}
	},

	TR1014: {
		desc: 'Store eLabor VLH Guide records',
		route: {
			method: 'POST',
			path: '/trans/{guid}/vlhguide',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.guid
					}
				}
			}
		}
	},

	TR1015: {
		desc: 'Set up staging area for SMART data',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smartstart',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1016: {
		desc: 'Commit Staging area SMART data to SMART production database',
		route: {
			method: 'GET',
			path: '/trans/{guid}/smartcommit',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1017: {
		desc: 'Get the current expected SMART seq number',
		route: {
			method: 'GET',
			path: '/trans/{guid}/getExpectedBatchNum',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1018: {
		desc: 'Set the next expected SMART seq number',
		route: {
			method: 'POST',
			path: '/trans/{guid}/setExpectedBatchNum',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1019: {
		desc: 'Verify that the SMART preload was successfull',
		route: {
			method: 'GET',
			path: '/trans/{guid}/smartVerify',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1020: {
		desc: 'Push the most recent SMART updates to the operational DB',
		route: {
			method: 'GET',
			path: '/trans/{guid}/smartPush',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	TR1021: {
		desc: 'Store SMART item_secondaries',
		route: {
			method: 'POST',
			path: '/trans/{guid}/smart621',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.string
					}
				}
			}
		}
	},

	CA1000: {
		desc: 'Get a list of recent drawer counts',
		route: {
			method: 'GET',
			path:	'/cash/{guid}/drawer/count',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.guid
					}
				}
			}
		}
	},

	CA1001: {
		desc: 'Get a specific drawer count',
		route: {
			method: 'GET',
			path:	'/cash/{guid}/drawer/count/{drawer_change_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: 				Formats.guid,
						drawer_change_id:	Formats.integer
					}
				}
			}
		}
	},

	CA1002: {
		desc: 'Store a drawer count',
		route: {
			method: 'POST',
			path: '/cash/{guid}/drawer/count',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid: Formats.guid
					}
				}
			}
		}
	},

	CA1010: {
		desc: 'Get a list of register drawer banks',
		route: {
			method: 'GET',
			path: '/cash/{guid}/drawer/banks',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
				}
			}
		}
	},

	CA1012:	{
		desc: 'Store a new drawer banks value',
		route: {
			method: 'POST',
			path: '/cash/{guid}/drawer/banks',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
				}
			}
		}
	},

	CA1013: {
		desc: 'Update an existing drawer bank value',
		route: {
			method: 'PUT',
			path: '/cash/{guid}/drawer/banks/{id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
						id:		Formats.integer
					},
				}
			}
		}
	},

	CA1014: {
		desc: 'Get a list of envelopes on a given store_busn_dt',
		route: {
			method: 'GET',
			path: '/cash/{guid}/envelopes',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					query: {
						store_busn_dt:	Formats.date_standard.required(),
					}
				}
			}
		}
	},

	CA1015: {
		desc: 'Store an envelope for a given store_busn_dt',
		route: {
			method: 'POST',
			path: '/cash/{guid}/envelope',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					payload: Payloads.envelope,
				}
			}
		}
	},

	CA1016: {
		desc: 'Get a list of safe counts on a given store_busn_dt',
		route: {
			method: 'GET',
			path: '/cash/{guid}/safe_counts',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					query: {
						store_busn_dt:	Formats.date_standard.required(),
					}
				}
			}
		}
	},

	CA1017: {
		desc: 'Store a safe_count for a given store_busn_dt',
		route: {
			method: 'POST',
			path: '/cash/{guid}/safe_count',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					payload: Payloads.safe_count,
				}
			}
		}
	},

	CA1018: {
		desc: 'Get a list of skims on a given store_busn_dt',
		route: {
			method: 'GET',
			path: '/cash/{guid}/skims',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					query: {
						store_busn_dt:	Formats.date_standard.required(),
					}
				}
			}
		}
	},

	CA1019: {
		desc: 'Get a specific skims',
		route: {
			method: 'GET',
			path: '/cash/{guid}/skims/{id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
						id:		Formats.integer,
					},
				}
			}
		}
	},

	CA1020: {
		desc: 'Store a skims',
		route: {
			method: 'POST',
			path: '/cash/{guid}/skims',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					payload: Payloads.skims,
				}
			}
		}
	},

	CA1021: {
		desc: 'Get a list of deposits on a given store_busn_dt',
		route: {
			method: 'GET',
			path: '/cash/{guid}/deposits',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					query: {
						store_busn_dt:	Formats.date_standard.required(),
					}
				}
			}
		}
	},

	CA1022: {
		desc: 'Get a specific deposit',
		route: {
			method: 'GET',
			path: '/cash/{guid}/deposits/{id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
						id:		Formats.integer,
					},
				}
			}
		}
	},

	CA1023: {
		desc: 'Store a deposit',
		route: {
			method: 'POST',
			path: '/cash/{guid}/deposits',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					payload: Payloads.deposits,
				}
			}
		}
	},

	CA1024: {
		desc: 'Get earliest store_busn_dt with validatable deposits',
		route: {
			method: 'GET',
			path: '/cash/{guid}/deposits/validate/earliest',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
				}
			}
		}
	},

	CA1025: {
		desc: 'Validate a Deposit',
		route: {
			method: 'PUT',
			path: '/cash/{guid}/deposits/validate/{id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
						id:		Formats.integer,
					},
					payload: Payloads.validate_deposit,
				}
			}
		}
	},

	CA1026: {
		desc: 'Get a list of skims/dcds that are components of a depoist',
		route: {
			method: 'GET',
			path: '/cash/{guid}/deposits/contributors/{id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
						id:		Formats.integer,
					}
				}
			}
		}
	},

	AU1000: {
		desc: 'Get a physical inventory detail audit',
		route: {
			method: 'GET',
			path: '/audit/{guid}/physinv/detail',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					query: {
						store_inv_header_id:	Formats.integer.required(),
						store_rawitem_id:		Formats.integer.required()
					}
				}
			}
		}
	},

	AU1001: {
		desc: 'Get an audit trailer for a physical inventory header',
		route: {
			method: 'GET',
			path: '/audit/{guid}/physinv/header',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid
					},
					query: {
						store_inv_header_id:	Formats.integer.required()
					}
				}
			}
		}
	},

	AU9998: {
		desc: 'Get an audit URI for a generic table_name/table_id',
		route: {
			method: 'GET',
			path: '/audit/{guid}/generic/uri/{table_name}/{column_name}/{column_value*}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:			Formats.guid,
						table_name:		Formats.string.required(),
						column_name: 	Formats.string.required(),
						column_value: 	Formats.string.required()
					},
				}
			}
		}
	},

	AU9999: {
		desc: 'Get an audit for a generic table_name/table_id',
		route: {
			method: 'GET',
			path: '/audit/{guid}/generic/{table_name}/{table_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:		Formats.guid,
						table_name:	Formats.string.required(),
						table_id: 	Formats.integer.required()
					},
				}
			}
		}
	},

	CT1000: {
		desc: 'Get storewide controls',
		route: {
			method: 'GET',
			path: '/controls/{guid}/storewide',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
				}
			}
		}
	},

	CT1001: {
		desc: 'Store envelope settings for a store',
		route: {
			method: 'POST',
			path: '/controls/{guid}/envelopes',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					payload: Payloads.envelope_settings,
				}
			}
		}
	},

	CT1002: {
		desc: 'Store safe control settings for a store',
		route: {
			method: 'POST',
			path: '/controls/{guid}/safe_controls',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					payload: Payloads.safe_controls,
				}
			}
		}
	},

	CT1003: {
		desc: 'Get a list of register drawer banks',
		route: {
			method: 'GET',
			path: '/cash/{guid}/controls/banks',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
				}
			}
		}
	},

	CT1004:	{
		desc: 'Store a new drawer banks value',
		route: {
			method: 'POST',
			path: '/cash/{guid}/controls/banks',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
				}
			}
		}
	},

	CT1005: {
		desc: 'Update an existing drawer bank value',
		route: {
			method: 'PUT',
			path: '/cash/{guid}/controls/banks/{id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
						id:		Formats.integer
					},
				}
			}
		}
	},

	CT1006: {
		desc: 'Get last store open',
		route: {
			method: 'GET',
			path: '/controls/{guid}/last_store_open',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					}
				}
			}
		}
	},

	CT1007: {
		desc: 'Change last store open date',
		route: {
			method: 'POST',
			path: '/controls/{guid}/last_store_open',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					payload: 	Payloads.last_store_open
				}
			}
		}
	},

	CT1008: {
		desc: 'Get employee list',
		route: {
			method: 'GET',
			path: '/controls/{guid}/employees',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					query: {
						active:	Formats.boolean.optional()
					},
				}
			}
		}
	},

	CT1009: {
		desc: 'Get employee schedules',
		route: {
			method: 'GET',
			path: '/controls/{guid}/schedules',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					query: {
						store_busn_dt:	Formats.date_standard.optional()
					},
				}
			}
		}
	},

	CT1010: {
		desc: 'Store variance control settings for a store',
		route: {
			method: 'POST',
			path: '/controls/{guid}/variance_controls',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					payload: Payloads.variance_controls,
				}
			}
		}
	},

	CT1011: {
		desc: 'Store an array of drawer banks',
		route: {
			method: 'POST',
			path: '/controls/{guid}/drawer_banks',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
				}
			}
		}
	},

	CT1012: {
		desc: 'Get an array of drawer banks',
		route: {
			method: 'GET',
			path: '/controls/{guid}/drawer_banks',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
				}
			}
		}
	},

	CT1013: {
		desc: 'GET deposit_settings for a given store',
		route: {
			method: 'GET',
			path: '/controls/{guid}/deposit_settings',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
				}
			}
		}
	},

	CT1014: {
		desc: 'Store deposit_settings for a given store',
		route: {
			method: 'POST',
			path: '/controls/{guid}/deposit_settings',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					payload: Payloads.deposit_settings,
				}
			}
		}
	},

	CT1015: {
		desc: 'Get all valid day_part deposit settings',
		route: {
			method: 'GET',
			path: '/controls/{guid}/deposit_day_parts',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
				}
			}
		}
	},

	CT1016: {
		desc: 'Get all valid non-day-part based deposit codes',
		route: {
			method: 'GET',
			path: '/controls/{guid}/deposit_codes',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
				}
			}
		}
	},

	CT1017: {
		desc: 'Get list of managers and their scheduled state',
		route: {
			method: 'GET',
			path: '/controls/{guid}/managers',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					query: {
						store_busn_dt:	Formats.date_standard.required(),
						store_busn_tm:	Formats.time_HHMM.optional(),
					},
				}
			}
		}
	},


	IN1000: {
		desc: 'Get a countable list of inventory',
		route: {
			method: 'GET',
			path: '/inv/{guid}/count/new',
			handler: null,
			config: {
				app: {authorized_groups: ['group1','group2']},
				validate: {
					params: {
						guid:	Formats.guid,
					},
					query: {
						store_busn_dt:	Formats.date_standard.required(),
						store_busn_tm:	Formats.time_HHMM.required(),
						frequency_type:	Formats.string.optional()
					}
				}
			}
		}
	},

	IN1001: {
		desc: 'Check that an inventory does not exist at a given store_busn_dt/tm',
		route: {
			method: 'GET',
			path: '/inv/{guid}/count/check',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid,
					},
					query: {
						store_busn_dt:	Formats.date_standard.required(),
						store_busn_tm:	Formats.time_HHMM.required(),
					}
				}
			}
		}
	},

	IN1002: {
		desc: 'Get basic information about a given WRIN',
		route: {
			method: 'GET',
			path: '/inv/{guid}/wrin/{wrin_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:		Formats.guid,
						wrin_id:	Formats.integer
					}
				}
			}
		}
	},

	IN1003: {
		desc: 'Get a list of recent inventories',
		route: {
			method: 'GET',
			path: '/inv/{guid}/count',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:		Formats.guid
					}
				}
			}
		}
	},

	IN1004: {
		desc: 'Get a specific inventory count',
		route: {
			method: 'GET',
			path: '/inv/{guid}/count/{store_inv_header_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						store_inv_header_id:	Formats.integer
					}
				}
			}
		}
	},

	IN1005: {
		desc: 'Store an inventory count for the first time',
		route: {
			method: 'POST',
			path: '/inv/{guid}/count',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					payload: Payloads.physinv,
				}
			}
		}
	},

	IN1006: {
		desc: 'Update an existing inventory',
		route: {
			method: 'PUT',
			path: '/inv/{guid}/count/{store_inv_header_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						store_inv_header_id:	Formats.integer
					},
					payload: Payloads.physinv,
				}
			}
		}
	},

	IN1007: {
		desc: 'Update/Insert a store sequence',
		route: {
			method: 'POST',
			path: '/inv/{guid}/sequence',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid
					},
					payload: Payloads.sequence,
				}
			}
		}
	},

	IN1008: {
		desc: 'Get a store sequence',
		route: {
			method: 'GET',
			path: '/inv/{guid}/sequence',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid
					}
				}
			}
		}
	},

	IN1009: {
		desc: 'Upload an inventory from an Hand Held Inventory Recorder',
		route: {
			method: 'POST',
			path: '/inv/{guid}/hhir/upload',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid
					},
					payload: Payloads.hhir_counts,
				}
			}
		}
	},

	IN1010: {
		desc: 'Get a list of purchases',
		route: {
			method: 'GET',
			path: '/inv/{guid}/purchase',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid
					},
					query: {
						purchase_status:		Formats.purchase_status.optional(),
						purchase_start_date: 	Formats.purchase_start_date.optional(),
						purchase_end_date: 		Formats.purchase_end_date.optional(),
						purchase_vendor_id:		Formats.purchase_vendor_id.optional()
					}

				}
			}
		}
	},

	IN1011: {
		desc: 'Get a list of vendors for a store for a purchase',
		route: {
			method: 'GET',
			path: '/inv/{guid}/purchase/vendor',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid
					}
				}
			}
		}
	},

	IN1012: {
		desc: 'Get a list of products by vendor for a purchase',
		route: {
			method: 'GET',
			path: '/inv/{guid}/purchase/vendor/{vendor_id}/rawitem',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						vendor_id: 				Formats.integer
					}
				}
			}
		}
	},

	IN1013: {
		desc: 'Get a loaded or saved purchase',
		route: {
			method: 'GET',
			path: '/inv/{guid}/purchase/{purchase_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						purchase_id: 			Formats.integer
					}
				}
			}
		}
	},

	IN1014: {
		desc: 'Post a purchase',
		route: {
			method: 'GET',
			path: '/inv/{guid}/purchase/{purchase_id}/post',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						purchase_id: 			Formats.integer
					}
				}
			}
		}
	},

	IN1015: {
		desc: 'Get Store Ledger',
		route: {
			method: 'GET',
			path: '/inv/{guid}/purchase/store_ledger',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					query: {
						month_start_date: 		Formats.date_standard.required()
					}
				}
			}
		}
	},

	IN1016: {
		desc: 'Store an manual purchase for the first time',
		route: {
			method: 'POST',
			path: '/inv/{guid}/purchase',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					//payload: When she works, I will do this (DS)
				}
			}
		}
	},

	IN1017: {
		desc: 'Update an existing purchase',
		route: {
			method: 'PUT',
			path: '/inv/{guid}/purchase/{purchase_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						purchase_id: 			Formats.integer
					},
					//payload: When she works, I will do this (DS)
				}
			}
		}
	},

	IN1018: {
		desc: 'Delete an existing purchase',
		route: {
			method: 'DELETE',
			path: '/inv/{guid}/purchase/{purchase_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						purchase_id: 			Formats.integer
					}
				}
			}
		}
	},

	IN1019: {
		desc: 'Get Raw Waste history',
		route: {
			method: 'GET',
			path: '/inv/{guid}/rawwaste',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					query: {
						start_date: 	Formats.date_standard.required(),
						data_only: 	 	Formats.boolean.optional()
					}
				}
			}
		}
	},

	IN1020: {
		desc: 'Get Raw Waste Detail',
		route: {
			method: 'GET',
			path: '/inv/{guid}/rawwaste/details',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					query: {
						store_busn_dt: 		Formats.date_standard.required()
					}

				}
			}
		}
	},

	IN1021: {
		desc: 'Get Raw Waste Raw Items',
		route: {
			method: 'GET',
			path: '/inv/{guid}/rawwaste/rawitem',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					}
				}
			}
		}
	},

	IN1022: {
		desc: 'Store Raw Waste entry',
		route: {
			method: 'POST',
			path: '/inv/{guid}/rawwaste',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					//payload: When she works, I will do this (DS)
				}
			}
		}
	},

	IN1023: {
		desc: 'Get Raw Promo history',
		route: {
			method: 'GET',
			path: '/inv/{guid}/rawpromo',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					query: {
						start_date: 		Formats.date_standard.required(),
						data_only: 	 	Formats.boolean.optional()
					}
				}
			}
		}
	},

	IN1024: {
		desc: 'Get Raw Promo Detail',
		route: {
			method: 'GET',
			path: '/inv/{guid}/rawpromo/details',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					query: {
						store_busn_dt: 		Formats.date_standard.required()
					}

				}
			}
		}
	},

	IN1025: {
		desc: 'Get Raw Promo Raw Items',
		route: {
			method: 'GET',
			path: '/inv/{guid}/rawpromo/rawitem',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					}
				}
			}
		}
	},

	IN1026: {
		desc: 'Store Raw Promo entry',
		route: {
			method: 'POST',
			path: '/inv/{guid}/rawpromo',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:	Formats.guid
					},
					//payload: When she works, I will do this (DS)
				}
			}
		}
	},
	IN1027: {
		desc: 'Get tansfer history',
		route: {
			method: 'GET',
			path: '/inv/{guid}/transfers',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					query: {
						start_date: 		Formats.date_standard.required(),
						end_date:   	 	Formats.date_standard.required()
					}
				}
			}
		}
	},

	IN1028: {
		desc: 'Get Raw information Raw Info',
		route: {
			method: 'GET',
			path: '/inv/{guid}/raw_info/rawitem',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					}
				}
			}
		}
	},

	IN1029: {
		desc: 'Get Raw information Raw Items',
		route: {
			method: 'GET',
			path: '/inv/{guid}/raw_detail/rawitem',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					}
				}
			}
		}
	},

	IN1030: {
		desc: 'Get Transfer Detail',
		route: {
			method: 'GET',
			path: '/inv/{guid}/transfers/{trans_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						trans_id: 				Formats.integer
					}
				}
			}
		}
	},

	IN1031: {
		desc: 'Get Raw Item Info',
		route: {
			method: 'GET',
			path: '/inv/{guid}/raw_info/{store_rawitem_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						store_rawitem_id: 		Formats.integer
					}
				}
			}
		}
	},

	IN1032: {
		desc: 'PUT Raw Item Info',
		route: {
			method: 'PUT',
			path: '/inv/{guid}/raw_info/{store_rawitem_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						store_rawitem_id: 		Formats.integer
					},
					//  DISABLE DURING SPRINT 6 to not break QA
					//	payload: Payloads.raw_info,
				}
			}
		}
	},

	IN1033: {
		desc: 'Get Raw information Transfers',
		route: {
			method: 'GET',
			path: '/inv/{guid}/transfers/rawitem',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
				}
			}
		}
	},

	IN1034: {
		desc: 'Get Raw Item for transfers',
		route: {
			method: 'GET',
			path: '/inv/{guid}/transfers/rawitem/{store_rawitem_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						store_rawitem_id: 		Formats.integer
					}
				}
			}
		}
	},

	IN1035: {
		desc: 'Get Raw Item for raw detail',
		route: {
			method: 'GET',
			path: '/inv/{guid}/raw_detail/{store_rawitem_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						store_rawitem_id: 		Formats.integer
					},
					query: {
						start_date: 		Formats.date_standard.required(),
						end_date:   	 	Formats.date_standard.required()
					}
				}
			}
		}
	},

	IN1036: {
		desc: 'POST a new transfer',
		route: {
			method: 'POST',
			path: '/inv/{guid}/transfers',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
					// TODO: payload: Payloads.transfer,
				}
			}
		}
	},

	IN1037: {
		desc: 'Get a list of manual vendors for a store',
		route: {
			method: 'GET',
			path: '/inv/{guid}/manual_vendors',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
				}
			}
		}
	},

	IN1038: {
		desc: 'Get a list rawitems for a manual vendor',
		route: {
			method: 'GET',
			path: '/inv/{guid}/manual_vendors/{vendor_id}/rawitem',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						vendor_id:  			Formats.integer
					},
				}
			}
		}
	},

	IN1039: {
		desc: 'Get detail for a rawitems for a manual vendor',
		route: {
			method: 'GET',
			path: '/inv/{guid}/manual_vendors/rawitem/{store_rawitem_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						store_rawitem_id:  			Formats.integer
					},
				}
			}
		}
	},

	IN1040: {
		desc: 'Add a new manual vendor',
		route: {
			method: 'POST',
			path: '/inv/{guid}/manual_vendors',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
					},
				}
			}
		}
	},

	IN1041: {
		desc: 'Edit a new manual vendor',
		route: {
			method: 'PUT',
			path: '/inv/{guid}/manual_vendors/{vendor_id}',
			config: {
				app: {authorized_groups: ['group1','group2']},
				handler: null,
				validate: {
					params: {
						guid:					Formats.guid,
						vendor_id:  			Formats.integer

					},
				}
			}
		}
	},


}
