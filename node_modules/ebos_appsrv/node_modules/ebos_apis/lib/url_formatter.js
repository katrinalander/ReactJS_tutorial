
var Url    = require('url')
  , Path   = require('path')
  , Assert = require('assert')
  , _      = require('lodash')
  , Api    = require('./apis')
  ;


var
    parsePath =
      function parsePath (api, param_options) {
        return Api[api].route.path.split('/')
                .map(function (segment, i, arr) {
                  if (isUrlParam(segment)) {
                    Assert(hasValidParamOptions(extractParam(segment), param_options), 'Invalid param options.');
                    return fulfillUrlParam(extractParam(segment), param_options);
                  }
                  return segment;
                })
                .filter(function (segment) {
                  return segment === 0 || segment;
                }).join('/')
      }


  , isUrlParam =
      function isUrlParam (segment) {
        return /^[{].*[}]$/.test(segment);
      }


  , extractParam =
      function extractParam (segment) {
        return segment.match(/^{(.*?)}$/)[1];
      }


  , extractParamKey =
      function (param) {
        return hasSuffix(param) ? removeSuffix(param) : param;
      }


  , hasValidParamOptions =
      function hasValidValues (param, param_values) {
        return validateParamOptions(extractParamKey(param), param_values);
      }


  , validateParamOptions =
      function (param, param_values) {
        var match = false;
        Object.keys(param_values)
          .forEach(function (key) {
            if (param === key)
              match = true;
          });
        return match;
      }


  , hasSuffix =
      function hasSuffix (param) {
        return /^.*?(\?)$/.test(param) || /^.*?(\*)\d*$/.test(param);
      }


  , removeSuffix =
      function removeSuffix (param) {
        return (param.match(/^(.*?)[\?]$/) || param.match(/^(.*?)[\*]\d*$/))[1];
      }


  , extractSuffix =
      function extractSuffix (param) {
        return (param.match(/^.*?(\?)$/) || param.match(/^.*?(\*)\d*$/))[1];
      }


  , fulfillUrlParam =
      function fulfillUrlParam (param, param_values) {
        if (hasSuffix(param)) {

          if (isOptional(param))
            return fulfillValue(param, param_values,
                    function (fulfillment) {
                      var value = fulfillment.value;

                      Assert(_.isString(value) || _.isNumber(value) || _.isNull(value), 'Value for `optional segment` suffix must be either a string, integer, or null.')
                      return value;
                    });

          if (isAllowedMultipleSegments(param))
            if (segmentsAreLimited(param))
              return fulfillValue(param, param_values,
                      function (fulfillment) {
                        var value = fulfillment.value
                          , limit = parseInt(extractSegmentLimit(fulfillment.param)[1])
                          ;

                        Assert(_.isArray(value), 'Value for `multiple segment` suffix must be an array.');
                        Assert(value.length === limit, 'Value length must match `limited segment` suffix segment limit.');
                        value.forEach(function (segment) {
                          Assert(segment !== null || undefined || void 0, 'Array values for `multiple segment` suffix must be a string or integer.')
                        });
                        return value.join('/');
                      });
            else
              return fulfillValue(param, param_values,
                      function (fulfillment) {
                        var value = fulfillment.value;

                        Assert(_.isArray(value), 'Value for `multiple segment` suffix must be an array.')
                        value.forEach(function (segment) {
                          Assert(segment !== null || undefined || void 0, 'Array values for `multiple segment` suffix must be a string or integer.')
                        });
                        return value.join('/');
                      });
        }

        return fulfillValue(param, param_values,
                function (fulfillment) {
                  var value = fulfillment.value;
                  Assert(_.isString(value) || _.isNumber(value), 'Value must be a string or integer.')

                  return fulfillment.value;
                });
      }


  , isOptional =
      function isOptional (param) {
        return extractSuffix(param) === '?'
      }


  , isAllowedMultipleSegments =
      function isAllowedMultipleSegments(param) {
        return extractSuffix(param) === '*'
      }


  , segmentsAreLimited =
      function segmentsAreLimited (param) {
        return /^.*?\*(\d+)$/.test(param);
      }


  , extractSegmentLimit =
      function extractSegmentLimit (param) {
        return param.match(/^.*?\*(\d+)$/);
      }


  , fulfillValue =
      function fulfillValue (param, param_options, fn) {
        return fn(extractParamValue(param, param_options));
      }


  , extractParamValue =
      function extractParamValue (param, param_options) {
        var key   = extractParamKey(param)
          , value = null
          ;

        Object.keys(param_options)
          .forEach(function (option) {
            if (key === option)
              value = param_options[option];
          });

        return {
            value : value
          , param : param
        };
      }
  ;




module.exports =
  function format_url (api, options) {
    Assert(_.isString(api), 'Api parameter must be a string.');
    Assert(_.isPlainObject(options), 'Options param must be an object.');

    Assert(!!Api[api], api + ' is not a valid ebos api.')

    return Url.format({
        protocol : process.env.IN_STORE ? 'http' : 'http'
      , host     : options.host
      , pathname : options.params ? parsePath(api, options.params) : null
      , query    : options.queries ? options.queryies : null
    });
  };
