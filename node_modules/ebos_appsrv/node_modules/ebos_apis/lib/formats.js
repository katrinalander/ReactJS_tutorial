var Joi = require('joi');

var formats = {

	// Basic Types
	integer:	Joi.number().integer(),
	number:		Joi.number(),
	decimal2:	Joi.number().precision(2),
	decimal4:	Joi.number().precision(4),
	string:		Joi.string(),
	boolean: 	Joi.boolean(),
	integer100: Joi.string().regex(/^0*([0-9]{1,2}|100)$/),

	guid:		Joi.string().max(5).regex(/\d/),
	full_wrin:	Joi.string().length(9).regex(/(\d{5})-(\d{3})/),
	nsn:		Joi.number().max(99999),
	purchase_status: 	Joi.string().valid(['Pending','Posted']),
	purchase_start_date: 	Joi.string().regex(/\d\d\d\d-\d\d-\d\d/).when('purchase_status', { is: ['Pending',null], then: Joi.optional(), otherwise: Joi.required() } ),
	purchase_end_date: 	Joi.string().regex(/\d\d\d\d-\d\d-\d\d/).when('purchase_status', { is: ['Pending',null], then: Joi.optional(), otherwise: Joi.required() } ),
	purchase_vendor_id: 	Joi.string().regex(/\d/).when('purchase_status', { is: ['Pending',null], then: Joi.optional(), otherwise: Joi.required() } ),

	eID:			Joi.string(),
	envelope_id:	Joi.string(),

	date_standard:	Joi.string().regex(/\d\d\d\d-\d\d-\d\d/),
	date_time:		Joi.string().regex(/\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d/),
	timestamp:		Joi.string().regex(/\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d\.\d{3}Z/),
	time_HHMM:		Joi.string().min(5).max(5).regex(/\d\d:\d\d/),

	date_YYYYMMDD: 		Joi.string().regex(/\d{8}/),
	date_YYMMDD: 		Joi.string().regex(/\d{6}/),
	time_HHMMSS: 		Joi.string().regex(/\d{6}/),

};

var STLDEvent =	Joi.object().keys({
	'@RegId':				formats.integer.required(),
	'@Type':				formats.string.required(),
	'@Time':				formats.integer.required(),
}).unknown().required();

var STLDNode = {
	'@id': formats.string.required(),
	'@nodeStatus': formats.string.required(),
	// Base STLD Event
	Event: Joi.alternatives().try(STLDEvent, Joi.array().items(STLDEvent))
};

var payloads = {
	physinv: {
		nsn:			formats.nsn.required(),
		basis_list:		formats.string.required(),
		status:			formats.string.required(),
		store_id:		formats.number.required(),
		store_busn_dt:	formats.date_standard.required(),
		store_busn_tm:	formats.time_HHMM.required(),
		username:		formats.string.required(),
		instantiated_by: formats.string.required(),
		counts: 		Joi.array().items({
			store_rawitem_id:	formats.number.required(),
			full_wrin:			formats.full_wrin.optional(),
			case_count:			formats.number.max(99999).allow(null).required(),
			inner_pack_count:	formats.number.max(99999).allow(null).required(),
			loose_count:		formats.number.max(99999).allow(null).required(),
			units_count:		formats.number.max(999999).allow(null).required()
		}).required()
	},
	stld: {
		TLD: Joi.object().keys({
			'@businessDate': formats.date_YYYYMMDD,
			'@checkPoint': formats.integer.required(),
			'@end': Joi.boolean(),
			'@logVersion': formats.string.required(),
			'@productionStatus': formats.string.required(),
			'@storeId': formats.nsn.required(),
			'@swVersion': formats.string.required(),
			'Node':	Joi.alternatives().try( Joi.object().keys(STLDNode), Joi.array().items(STLDNode) )
		}).required(),
	},
	sequence: Joi.array().items(Joi.string().length(8).regex(/\d{8}/)),
	hhir_counts: {
		store_busn_dt:  formats.date_standard.required(),
		store_busn_tm:  formats.time_HHMM.required(),
		basis_list:     formats.string.required(),
		counts: Joi.object().pattern(   /(\d{5})-(\d{3})/, formats.number.required()).min(1)
	},
	envelope_settings: {
		enabled:		Joi.boolean().required(),
		id_required:	Joi.boolean().required(),
		eID:			formats.eID.required(),
	},
	safe_controls: {
		safe_amt: 			formats.number.required(),
		petty_cash_amt: 	formats.number.required(),
		gift_certs_active: 	Joi.boolean().required(),
		other_active: 		Joi.boolean().required(),
		other_name: 		formats.string.required(),
		till_qty: 			formats.integer.required(),
		coin_mag_active: 	formats.boolean.required(),
		coin_mag_qty: 		formats.integer.required(),
		coin_mag_amt: 		formats.decimal2.required(),
		eID: 				formats.eID.required(),
	},
	variance_controls: {
		promo_amt: 			formats.integer100.required(),
		discount_amt: 		formats.integer100.required(),
		coupon_amt: 		formats.integer100.required(),
		eID: 				formats.eID.required(),
	},
	envelope: {
		store_busn_dt: 		formats.date_standard.required(),
		create_date_time: 	formats.timestamp.required(),
		status: 			Joi.string().valid(['Inprogress','Posted']).required(),
		preparer: 			formats.eID.required(),
		counted_cash_amt: 	formats.decimal2.required(),
		deposit_code: 		formats.string.required(),
		envelope_id: 		formats.envelope_id.required(),
		eID: 				formats.eID.required(),
	},
	safe_count: {
		store_busn_dt: 		formats.date_standard.required(),
		create_date_time: 	formats.timestamp.required(),
		status: 			Joi.string().valid(['Inprogress','Posted']).required(),
		preparer: 			formats.eID.required(),
		counted_cash_amt: 	formats.decimal2.required(),
		petty_cash_amt:		formats.decimal2.required(),
		gift_cert_amt:		formats.decimal2.required(),
		other_amt:			formats.decimal2.required(),
		eID: 				formats.eID.required(),
	},
	skims: {
		id:					formats.integer.optional(),
		local_id:			formats.string.optional(),
		store_busn_dt:		formats.date_standard.required(),
		reg_id: 			formats.integer.required(),
		pos_entry_time: 	Joi.date().iso().required(),
		created_timestamp: 	Joi.date().iso().required(),
		status: 			formats.string.valid(['Uncounted','Inprogress','InProgress','Counted','Closed','Voided']).required(),
		status_code: 		formats.integer.optional(),
		manager: 			formats.integer.allow(null).required(),
		manager_name: 		formats.string.optional(),
		source: 			formats.string.valid(['POS','Manual']).required(),
		deposit_code: 		formats.string.allow(null).required(),
		envelope_id: 		formats.envelope_id.allow(null).required(),
		counted_cash: 		formats.decimal2.required(),
		changed:		Joi.any().optional(),
		eID: 				formats.eID.allow(null).optional(),
		eID_name: 			formats.string.allow(null).optional(),
		updated_timestamp: 	Joi.date().iso().optional(),
	},
	deposits: {
		id:								formats.integer.optional(),
		local_id:						formats.string.optional(),
		store_busn_dt:					formats.date_standard.required(),
		created_timestamp: 				Joi.date().iso().optional(),
		status: 						formats.string.valid(['Inprogress','Complete','Finalized','Validated','Invalid']).required(),
		status_code: 					formats.integer.optional(),
		depositor: 						formats.eID.allow(null).optional(),
		depositor_name: 				formats.string.allow(null,'').optional(),
		preparer: 						formats.eID.allow(null).optional(),
		preparer_name: 					formats.string.allow(null,'').optional(),
		bag_num: 						formats.string.allow(null).required(),
		deposit_code: 					formats.string.allow(null).required(),
		deposit_cash: 					formats.decimal2.required(),
		verifier:						formats.eID.allow(null).optional(),
		verified_deposit_cash:			formats.decimal2.allow(null).optional(),
		verified_bank_date:				formats.date_standard.allow(null).optional(),
		verified_timestamp:				Joi.date().iso().allow(null).optional(),
		verifier_name: 					formats.string.allow(null,'').optional(),
		petty_cash: 					formats.decimal2.required(),
		petty_cash_desc: 				formats.string.allow(null,'').required(),
		foreign_currency: 		Joi.array().items({
			id:								formats.integer.optional(),
			foreign_currency_cd: 			formats.string.length(3).required(),
			foreign_currency_amt_native:	formats.decimal2.required(),
			foreign_currency_amt_usd:		formats.decimal2.required(),
			foreign_currency_conv_rate:		formats.decimal4.required(),
			updated_timestamp:				Joi.date().iso().optional(),
		}).optional(),
		crime_loss: 		Joi.object().keys({
			id:							formats.integer.optional(),
			loss_timestamp: 			Joi.date().iso().required(),
			loss_discovery_timestamp: 	Joi.date().iso().required(),
			loss_amount: 				formats.decimal2.required(),
			loss_description:			formats.string.allow(null,'').optional(),
			manager: 					formats.integer.allow(null).optional(),
			manager_name: 				formats.string.allow(null,'').optional(),
			loss_police_agency:			formats.string.required(),
			loss_police_report_id:		formats.string.allow(null,'').optional(),
			loss_injuries:				formats.boolean.required(),
			loss_injury_desc:			formats.string.allow(null,'').optional(),
			loss_physical_damage:		formats.boolean.required(),
			loss_damage_desc:			formats.string.allow(null,'').optional(),
			insurance_claim_id:			formats.string.allow(null,'').optional(),
			updated_timestamp:			Joi.date().iso().optional(),
		}).optional(),
		eID: 							formats.eID.allow(null).optional(),
		eID_name: 						formats.string.allow(null).optional(),
		updated_timestamp:				Joi.date().iso().optional(),
	},
	validate_deposit: {
		verifier:						formats.eID.allow(null).required(),
		verified_deposit_cash:			formats.decimal2.required(),
		verified_bank_date:				formats.date_standard.required(),
		verified_reason:				formats.string.optional(),
		verified_timestamp:				Joi.date().iso().required(),
	},
	last_store_open: {
		last_store_open: formats.date_standard.required(),
	},
	deposit_settings: {
		use_day_part_codes:	formats.boolean.required(),
		allow_multiple:		formats.boolean.required(),
		deposit_codes:		Joi.array().required(),
		eID:				formats.eID.required(),
	},
	raw_info: {
		frequency_cd:		formats.string.valid(['D','W','M']).required(),
	}
};


module.exports.formats = formats;
module.exports.payloads = payloads;
