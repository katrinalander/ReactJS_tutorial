var Filters = require('../../../public/js/filters');
var	Globalize = require('../../../public/js/ebos_globalize');
var	Encode = require('htmlentities');

// Parse Functions

function classParse(field, static_classes) {
	var input = "";
	if (typeof field.classNames !== "undefined" || typeof static_classes !== "undefined") {
		input += " class='";
		if (typeof field.classNames !== "undefined") {
			input += field.classNames;
		}
		if (typeof static_classes !== "undefined") {
			input += ' ' + static_classes;
		}
		input += "'";
	}
	return input;
}

function formGroupParse(field) {
	var input = "";
	if (typeof field.label !== "undefined") {
		input += "<div class='form-group'><label";
		if (typeof field.labelAttr !== "undefined") {
			for (var key in field.labelAttr) {
				input += " " + key + "='" + field.labelAttr[key] + "'"
			}
		}
		input += ">";
		if (typeof field.filters !== "undefined" && typeof field.filters.label !== "undefined") {
			input += field.filters.label(field.label);
		} else {
			input += field.label;
		}
		input += "</label>"
	}
 	return input;
}

function formGroupEnd(field) {
	var input = "";
	if (typeof field.label !== "undefined") {
		input += "</div>";
	}
	return input;
}

function fieldAttrParse(field, read_only) {
	var input = "";
	if (typeof field.attr !== "undefined") {
		for (var key in field.attr) {
			if (!((key === "data-toggle" || key === "onclick" || key === "onClick") && read_only)) {
				if (typeof field.filters !== "undefined" && typeof field.filters[key] !== "undefined") {
					input += ' ' + key + '="' + field.filters[key](field.attr[key]) + '"';
				} else {
					input += ' ' + key + '="' + field.attr[key] + '"';
				}
			}
		}
	}
	return input;
}

function optionsParse(field, options, read_only) {
	var input = "";
	if (typeof options !== "undefined") {
		for (var key in options) {
			if (!((key === "data-toggle" || key === "onclick" || key === "onClick") && read_only)) {
				if (typeof field.filters !== "undefined" && typeof field.filters[key] !== "undefined") {
					input += ' ' + key + '="' + field.filters[key](options[key]) + '"';
				} else {
					input += ' ' + key + '="' + options[key] + '"';
				}
			}
		}
	}
	return input;
}

function valueParse(field, value) {
	var input = "";
	if (typeof value !== "undefined" && value !== null) {
		if (field.type === "selection") {
			for (var i = 0; i < value.length; i++) {
				input += "<option";
				for (var key in value[i]) {
					if (key !== "selected" && key !== "label" ) {
						if (typeof field.filters !== "undefined" && typeof field.filters[key] !== "undefined") {
							input += ' ' + key + '="' + Encode.encode(field.filters[key](value[i][key])) + '"';
						} else {
							input += ' ' + key + '="' + Encode.encode(value[i][key]) + '"';
						}
					}
				}
				if (value[i].selected) {
					input += " selected";
				}
				if (value[i].disabled) {
					input += " disabled";
				}
				if (typeof value[i].label !== "undefined") {
					if (typeof field.filters !== "undefined" && typeof field.filters.label !== "undefined") {
						input += ">" + field.filters.label(value[i].label) + "</option>";
					} else {
						input += ">" + value[i].label + "</option>";
					}
				} else {
					input += "></option>";
				}
			}
		} else if (field.type === "radio") {
			if (field.attr.value.toString() === value.toString()) {
				input += "checked";
			}
		} else {
			if (typeof field.filters !== "undefined" && typeof field.filters.value !== "undefined") {
				if (field.type === "anchor") {
					input += field.filters.value(value);
				} else {
					input += " value='" + Encode.encode(field.filters.value(value)) + "'";
				}
			} else {
				if (field.type === "anchor") {
					input += value;
				} else {
					input += " value='" + Encode.encode(value) + "'";
				}
			}

		}
	}
	return input;
}

function checkLabelParse(field) {
	var input = "<div class='checkbox'><label";
	if (typeof field.labelAttr !== "undefined") {
		for (var key in field.labelAttr) {
			input += " " + key + "='" + field.labelAttr[key] + "'"
		}
	}
	input += "><input type='checkbox' " + classParse(field);
	return input;
}

function radioLabelParse(field) {
	var input = "<div class='radio'><label";
	if (typeof field.labelAttr !== "undefined") {
		for (var key in field.labelAttr) {
			input += " " + key + "='" + field.labelAttr[key] + "'"
		}
	}
	input += "><input type='radio' " + classParse(field);
	return input;
}

function textLabelParse(field) {
	var input = "";
	if (typeof field.label !== "undefined") {
		input += "<label>";
		if (typeof field.filters !== "undefined" && typeof field.filters.label !== "undefined") {
			input += field.filters.label(field.label);
		} else {
			input += field.label;
		}
		input += "</label>";
	}
	return input;
}

function eventsParse(field) {
	var input = "";
	if (typeof field.events !== "undefined" && typeof field.events.blur !== "undefined") {
		input += " data-blur='" + field.events.blur + "'";
	}
	return input;
}

function labelEnd(field) {
	var input = "";
	if (typeof field.label !== "undefined") {
		if (typeof field.filters !== "undefined" && typeof field.filters.label !== "undefined") {
			input += field.filters.label(field.label);
		} else {
			input += field.label;
		}
	}
	input += "</label></div>";
	return input;
}

// Begin each type of input.  One full_acces and one read_only

var fla_function = {};
fla_function.textbox = {};
fla_function.textbox.full_access = function(field, value, options) {
	var input = "";
	input += formGroupParse(field);
	input += "<input type='text'";
	input += classParse(field, "ebos-input form-control");
	input += valueParse(field, value);
	input += fieldAttrParse(field);
	input += optionsParse(field,options);
	input += eventsParse(field);
	input += ">";
	input += formGroupEnd(field);
	return input;
};

fla_function.textbox.read_only = function (field, value, options) {
	var input = "";
	input += formGroupParse(field);
	input += "<input type='text'";
	input += classParse(field, "ebos-input form-control");
	input += valueParse(field, value);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += " disabled>";
	input += formGroupEnd(field);
	return input;
};

fla_function.textarea = {};
fla_function.textarea.full_access = function(field, value, options) {
	var input = "";
	input += formGroupParse(field);
	input += "<textarea ";
	input += classParse(field, "ebos-input form-control");
	input += fieldAttrParse(field);
	input += optionsParse(field,options);
	input += eventsParse(field);
	input += ">";
	if (typeof field.filters !== "undefined" && typeof field.filters.value !== "undefined") {
	input += Encode.encode(field.filters.value(value));
	} else {
	input += Encode.encode(value);
	}
	input += "</textarea>";
	input += formGroupEnd(field);
	return input;
};

fla_function.textarea.read_only = function(field, value, options) {
	var input = "";
	input += formGroupParse(field);
	input += "<textarea ";
	input += classParse(field, "ebos-input form-control");
	input += fieldAttrParse(field);
	input += optionsParse(field,options);
	input += eventsParse(field);
	input += " disabled>";
	if (typeof field.filters !== "undefined" && typeof field.filters.value !== "undefined") {
	input += Encode.encode(field.filters.value(value));
	} else {
	input += Encode.encode(value);
	}
	input += "</textarea>";
	input += formGroupEnd(field);
	return input;
};


fla_function.anchor = {};
fla_function.anchor.full_access = function(field, value, options) {
	var input = "<a";
	input += classParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += " >";
	input += valueParse(field, value);
	input +=  "</a>";
	return input;
};

fla_function.anchor.read_only = function(field, value, options) {
	var input = "<span";
	input += classParse(field);
	input += fieldAttrParse(field,true);
	input += optionsParse(field, options, true);
	input += " >";
	input += valueParse(field, value);
	input +=  "</span>";
	return input;
};

fla_function.text = {};
fla_function.text.full_access = function(field, value, options) {
	var input = "";
	input += textLabelParse(field);
	input += "<span";
	input += classParse(field);
	input += fieldAttrParse(field,true);
	input += optionsParse(field, options, true);
	input += " >";
	if (typeof value !== "undefined" && value !== null) {
		if (typeof field.filters !== "undefined" && typeof field.filters.value !== "undefined") {
			input += field.filters.value(value);
		} else {
			input += value;
		}
	}
	input +=  "</span>";
	return input;
};


fla_function.label_with_textfield = {};
fla_function.label_with_textfield.full_access = function(field, value, options) {
	var input = "";
	input += textLabelParse(field);
	input += ":&nbsp;&nbsp;<span";
	input += classParse(field);
	input += fieldAttrParse(field,true);
	input += optionsParse(field, options, true);
	input += " >";
	if (typeof value !== "undefined" && value !== null) {
		if (typeof field.filters !== "undefined" && typeof field.filters.value !== "undefined") {
			input += field.filters.value(value);
		} else {
			input += value;
		}
	}
	input +=  "</span>";
	return input;
};

fla_function.button = {};
fla_function.button.full_access = function(field, value, options) {
	var input = "<input type='button'";
	input += classParse(field);
	input += valueParse(field, value);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += ">";
	return input;
};

fla_function.button.read_only = function(field, value, options) {
	var input = "<input type='button'";
	input += classParse(field);
	input += valueParse(field, value);
	input += fieldAttrParse(field, true);
	input += optionsParse(field, options, true);
	input += " disabled>";
	return input;
};

fla_function.selection = {};
fla_function.selection.full_access = function(field, value, options) {
	var input = "";
	input += formGroupParse(field);
	input += "<select";
	input += classParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += ">";
	input += valueParse(field, value);
	input += "</select>";
	input += formGroupEnd(field);
	return input;
};

fla_function.selection.read_only = function(field, value, options) {
	var input = "";
	input += formGroupParse(field);
	input += "<select";
	input += classParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += " disabled>";
	input += valueParse(field, value);
	input += "</select>";
	input += formGroupEnd(field);
	return input;
};

fla_function.checkbox = {};
fla_function.checkbox.full_access = function(field, value, options) {
	var input =  "";
	input += checkLabelParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	if (value) { input += " checked" }
	input += ">";
	input += labelEnd(field);
	return input;
};

fla_function.checkbox.read_only = function(field, value, options) {
	var input =  "";
	input += checkLabelParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	if (value) { input += " checked" }
	input += " disabled>";
	input += labelEnd(field);
	return input;
};

fla_function.radio = {};
fla_function.radio.full_access = function(field, value, options) {
	var input =  "";
	input += radioLabelParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += valueParse(field, value);
	input += ">";
	input += labelEnd(field);
	return input;
};

fla_function.radio.read_only = function(field, value, options) {
	var input =  "";
	input += radioLabelParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += valueParse(field, value);
	input += " disabled>";
	input += labelEnd(field);
	return input;
};

fla_function.hidden = {};
fla_function.hidden.full_access = function(field, value, options) {
	var input = "<input type='hidden'";
	input += classParse(field);
	input += valueParse(field, value);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += ">";
	return input;
};

fla_function.glyph = {};
fla_function.glyph.full_access = function(field, value, options) {
	var input = "<button type'button'";
	input += classParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += "><i class='glyphicon " + value + "'/></button>";
	return input;

};
fla_function.glyph.read_only = function(field, value, options) {
	var input = "<button type'button'";
	input += classParse(field);
	input += fieldAttrParse(field, true);
	input += optionsParse(field, options, true);
	input += "><i class='glyphicon " + value + "'/></button>";
	return input;
};

fla_function.glyph_anchor = {};
fla_function.glyph_anchor.full_access = function(field, value, options) {
	var input = "<a href='#'";
	input += classParse(field);
	input += fieldAttrParse(field);
	input += optionsParse(field, options);
	input += "><i class='glyphicon " + value + "'/></a>";
	return input;
};
fla_function.glyph_anchor.read_only = function(field, value, options) {
	var input = "<a href='#'";
	input += classParse(field);
	input += fieldAttrParse(field, true);
	input += optionsParse(field, options, true);
	input += "><i class='glyphicon " + value + "'/></a>";
	return input;
};

module.exports = fla_function;
