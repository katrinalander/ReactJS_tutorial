var fieldValidation = {
    twoDecimals: { regex: /^\d*(\.[0-9]{0,2})?$/, message: Globalize.ebos_translate('fiveDotTwo') },
    fiveDotTwoI: { regex: /^[0-9]{0,5}(\.[0-9]{0,2})?$/, message: Globalize.ebos_translate('fiveDotTwo') },
    fiveDotFourI: { regex: /^[0-9]{0,5}(\.[0-9]{0,4})?$/, message: "Value must be numeric between 1 and 99999 with up to four decimals, example 12345.9999"},
    nickel: { regex: /^\d*(\.[0-9]{0,1}[0,5]{0,1})?$/, message: "not a nickel" },
    dime: { regex: /^\d*(\.[0-9]{0,1}0{0,1})?$/, message: "not a dime" },
    quarter: { regex: /^\d*(\.(0{0,1}0{0,1}|2{0,1}5{0,1}|5{0,1}0{0,1}|7{0,1}5{0,1}))?$/, blur_regex: /^\d*(\.(0{0,1}0{0,1}|2{0,1}5|5{0,1}0{0,1}|7{0,1}5))?$/, message: "not a quarter" },
    halfDollar: { regex: /^\d*(\.[0,5]{0,1}0{0,1})?$/, message: "not a Kennedy" },
    dollarBill: { regex: /^\d*$/, message: "not a dollar" },
    twoBill: { regex: /^\d*$/, blur_regex:/^\d*[0,2,4,6,8]$/, message: "not a two" },
    fiveBill: { regex: /^\d*$/, blur_regex:/^\d*[0,5]$/, message: "not a five" },
    tenBill: { regex: /^\d*$/, blur_regex:/^\d*0$/, message: "not a ten" },
    twentyBill: { regex: /^\d*$/, blur_regex:/^\d*[0,2,4,8]0$/, message: "not a twenty" },
    fiftyBill: { regex: /^\d*$/, blur_regex:/^\d*[0,5]0$/, message: "not a fifty" },
    hundredBill: { regex: /^\d*$/, blur_regex:/^\d*00$/, message: "not a hundred" },
    integer5: { regex: /^\d{0,5}$/, message: Globalize.ebos_translate('integer') },
    integer3: { regex: /^\d{0,3}$/, message: Globalize.ebos_translate('integer') },
    envelope_id_val: { regex: /^[0-9a-zA-Z]{1,2}$/, blur_regex:/^[0-9a-zA-Z]{2}$/, message: Globalize.ebos_translate('envelope_id_val') },
    integer100: { regex: /^0*([0-9]{0,2}|100)$/, message: "Value must be numeric between 0 and 100, with no decimals" },
    integer1to99999: { regex: /^[1-9][0-9]{0,4}$/, message: "Value must be numeric between 1 and 99999, with no decimals" },//sprint 06
    alphaNum: { regex: /^[0-9a-zA-Z]*$/, message: "Value must be alphanumeric"},
};


for (key in fieldValidation) {
    if (fieldValidation[key].blur_regex) {
        $(document).on('blur', "." + key, function(e) {
            key = e.handleObj.selector.substring(1, e.handleObj.selector.length);
            validate(this, e, fieldValidation[key].blur_regex, fieldValidation[key].message, 'blur');
        });        
    } else {
        $(document).on('blur', "." + key, function(e) {
            key = e.handleObj.selector.substring(1, e.handleObj.selector.length);
            validate(this, e, fieldValidation[key].regex, fieldValidation[key].message, 'blur');
        });                
    }
    $(document).on('keypress', "." + key, function(e) {
         key = e.handleObj.selector.substring(1, e.handleObj.selector.length);
         validate(this, e, fieldValidation[key].regex, fieldValidation[key].message, 'keypress');
    });
    $(document).on('paste', "." + key, function(e) {
        key = e.handleObj.selector.substring(1, e.handleObj.selector.length);
        validate(this, e, fieldValidation[key].regex, fieldValidation[key].message, 'paste');
    });
}

var validate = function(self, e, validation, message, type){

    var code = e.keyCode || e.which;

    if (code === 13) { return false; }
    var target = e.target;
    var char = String.fromCharCode(e.charCode);
    var inputVal = target.value;
    var value = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd);
    if ( (type === "keypress" && !value.match(validation)) 
         || (type === "blur" &&  target.value.length && !target.value.match(validation))
         || (type === "paste" && !value.match(validation)) ) {
        e.preventDefault();
        $(self).addClass('has-error');
        if (type === "keypress" || type === "paste") {
            setTimeout(function() { $(self).removeClass('has-error'); }, 300);    
        } else {
            $(self).focus();
            setTimeout(function() { $(self).focus(); }, 1);
        }
        toastr.clear();
        toastr.error(message, Globalize.ebos_translate('error'));
        return false;
    } else {
        if (type === "blur" && typeof $(self).attr('data-blur') !== "undefined") {
            window[$(self).attr('data-blur')](self);
        }
        $(self).removeClass('has-error');
        return false;
    }
};