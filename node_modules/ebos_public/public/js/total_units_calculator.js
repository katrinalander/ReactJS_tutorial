
	function calculateTotalUnits(self) {
						
        if(self)
        {
            var parent_row = self.parents('.dt_row')
            if(parent_row)
            {	
				var case_count_value = getCaseCountValue(parent_row);
				var case_qty_value = getCaseQtyValue(parent_row); 
				var inner_pack_count_value = getInnerPackCountValue(parent_row);
				var inner_pack_qty_value = getInnerPackQtyValue(parent_row);
                var loose_count_value = getLooseCountValue(parent_row);
                
                var total_unit_count_display = parent_row.find('.total_unit_count_display:first');
                var total_unit_count = parent_row.find('.total_unit_count:first');
                
                if(total_unit_count_display && total_unit_count)
                {
                   //get case total and inner pack total
                   var case_total = (case_count_value * case_qty_value);
                   var inner_pack_total = (inner_pack_count_value * inner_pack_qty_value); 
           			
           		   checkTotalsForExceededLimit (parent_row, loose_count_value, case_total, inner_pack_total);
                                    
                   //This calculation should be: 
                   //(Number of Outer Packs * Outer Pack Quantity)+(Number of Inner Packs*Inner Pack Quantity)+(Number of Units) = Total # of Units
                   var total_units = ((Math.floor(case_count_value * 100 ) * case_qty_value) + (Math.floor(inner_pack_count_value * 100) * inner_pack_qty_value) + Math.floor(loose_count_value * 100)) / 100;
                   
                   //set fields for total units 
                   if(total_units > 0 && total_units < 1000000)
                   {
                	   var unitTotalDisplayString = getUnitTotalDisplayString(parent_row, total_units);
                   	   total_unit_count_display.text(unitTotalDisplayString);
                   	   total_unit_count.val(total_units);
                   } else {
                   
                   	   //clear the total fields
                   	   total_unit_count_display.text('');
                   	   total_unit_count.val(null);
                   }
                }
            }
        }
    } 
        
    function getCaseCountValue(parent_row) {

        var case_count = parent_row.find('.case_count:first');
        var case_count_value = 0;

        if(case_count)
        {
           case_count_value = parseFloat(case_count.val());
           if (isNaN(case_count_value)) {
                case_count_value = 0;
            }
        }
       return case_count_value;
    }

    function getCaseQtyValue(parent_row) {

        var case_qty = parent_row.find('.case_qty:first');
        var case_qty_value = 0;
        if(case_qty)
        {
            case_qty_value = parseFloat(case_qty.val());
            if (isNaN(case_qty_value)) {
                case_qty_value = 0;
            }
        }
        return case_qty_value;
    }

    function getInnerPackCountValue(parent_row) {

        var inner_pack_count = parent_row.find('.inner_pack_count:first');
        var inner_pack_count_value = 0;
        if(inner_pack_count)
        {
           inner_pack_count_value = parseFloat(inner_pack_count.val());
           if (isNaN(inner_pack_count_value)) {
                inner_pack_count_value = 0;
            }
        }
        return inner_pack_count_value;
    }

    function getInnerPackQtyValue(parent_row) {

        var inner_pack_qty = parent_row.find('.inner_pack_qty:first');
        var inner_pack_qty_value = 0;
        if(inner_pack_qty)
        {
           inner_pack_qty_value = parseFloat(inner_pack_qty.val());
            if (isNaN(inner_pack_qty_value)) {
                inner_pack_qty_value = 0;
            }
        }
        return inner_pack_qty_value;
    }

    function getLooseCountValue(parent_row) {

        var loose_count = parent_row.find('.loose_count:first');

        var loose_count_value = 0;
        if(loose_count)
        {
           loose_count_value = parseFloat(loose_count.val());
            if (isNaN(loose_count_value)) {
                loose_count_value = 0;
            }
        }
        return loose_count_value;
    }
    
    function formatNumber (num) {
    	return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
	}
	
	function checkTotalsForExceededLimit (parent_row, loose_count_value, case_total, inner_pack_total) {
		
		var case_count = parent_row.find('.case_count:first');
        var inner_pack_count = parent_row.find('.inner_pack_count:first');
        var loose_count = parent_row.find('.loose_count:first');
        var total_unit_count_display = parent_row.find('.total_unit_count_display:first');
        var total_unit_count = parent_row.find('.total_unit_count:first');
                   
        var limit_exceeded = doesTotalExceedLimit (case_total, case_count);
   
        //exit function if limit is exceeded
        if(limit_exceeded && limit_exceeded == true)
        {
           //clear the total fields
           total_unit_count_display.text('');
           total_unit_count.val(null);           
           return; 
        }
     
        var combined_total = (case_total + inner_pack_total);
 
        limit_exceeded = doesTotalExceedLimit (combined_total, inner_pack_count);
  
        //exit function if limit is exceeded
        if(limit_exceeded && limit_exceeded == true)
        {
            //clear the total fields
            total_unit_count_display.text('');
            total_unit_count.val(null);
           
           return; 
        }
                    
        combined_total = (combined_total + loose_count_value);
 
        limit_exceeded = doesTotalExceedLimit  (combined_total, loose_count);
        
        //exit function if limit is exceeded
        if(limit_exceeded && limit_exceeded == true)
        {
            //clear the total fields
            total_unit_count_display.text('');
            total_unit_count.val(null);
        }
	}
	
	function doesTotalExceedLimit (total_units, element) {     
        if(element) {
            if(total_units > 999999.99)	{
                element.focus();
    			setTimeout(function(){element.focus()},1); 
                toastr.clear();
                toastr.error("Exceeds maximum number of units.  Double check inventory counts.", "Error");
                element.addClass('has-error');	
              	return true;
        	} else {
                element.removeClass('has-error');
                return false;
        	}
    	}
	};

	function getUnitTotalDisplayString (parent_row, total_units) {
    	
        var uom_description = parent_row.find('.uom_description:first');
        var result = '';
        if(uom_description)
        {
        	var formatted_number = formatNumber(total_units);
        	result = formatted_number + ' ' + uom_description.val();
        }
        return result;
	}
	
