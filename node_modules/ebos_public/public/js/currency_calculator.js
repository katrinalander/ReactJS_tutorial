(function (exports) {
    var widgetId = "";
    var useDrawerBanks = false;
    var clearFieldsBool = true;
    function clearFields(){
        if(clearFieldsBool) {
            var fields = [
                '#coin_roll_count_25',
                '#coin_roll_count_10',
                '#coin_roll_count_05',
                '#coin_roll_count_01',
                '#coin_count_100',
                '#coin_count_50',
                '#coin_count_25',
                '#coin_count_10',
                '#coin_count_05',
                '#coin_count_01',
                '#coin_value_100',
                '#coin_value_50',
                '#coin_value_25',
                '#coin_value_10',
                '#coin_value_05',
                '#coin_value_01',
                '#coin_total_100',
                '#coin_total_50',
                '#coin_total_25',
                '#coin_total_10',
                '#coin_total_05',
                '#coin_total_01',
                '#coin_total', // currentTotal //might be able to use for startingAmount
                '#cash_total_cc',
                '#cash_count_100',
                '#cash_count_50',
                '#cash_count_20',
                '#cash_count_10',
                '#cash_count_05',
                '#cash_count_02',
                '#cash_count_01',
                '#cash_value_100',
                '#cash_value_50',
                '#cash_value_20',
                '#cash_value_10',
                '#cash_value_05',
                '#cash_value_02',
                '#cash_value_01'
            ];

            $(fields.join()).val(''); // performance

            if(useDrawerBanks){
                $('#change_from_coin_total, #cash_leave_in_drawer').val('');
            }

            $('.calc-input').removeClass("has-success has-error preventNavigationAway");
        }
    }

    (function($, undefined){
        $.widget('ebos.currency_calculator', {
            version:'0.1.0',
            options:{
                showOn: "",
                appendTo: "",
                drawerBank: 0
            },

            _create: function(){
                // "this." refers to the widget
                this.element.addClass('ebos-calculator');
                var this_calculator = this;
                widgetId = '#' + this_calculator.element[0].id;

                if(typeof this.options.drawerBank !== 'undefined' && this.options.drawerBank > 0){
                    useDrawerBanks = true;
                } else {
                    useDrawerBanks = false;
                }

                this_calculator._renderMarkup(this_calculator);

                $('#' + this_calculator.options.showOn).click(function() {
                    $('#modalCurrencyCalculator').modal('show');
                    $("#cash_total_cc").val($(widgetId).val());
                });

                $(widgetId).change(function(){
                    clearFields();
                });

                $.extend({
                    trigger: function(triggerName) {
                        var selector;
                        if(!triggerName || triggerName === '*') {
                            // select all data-triggers
                            selector = '[data-trigger]';
                        } else {
                            // select specific data-trigger
                            selector = '[data-trigger~="' + triggerName + '"]';
                        }
                        return $(selector);
                    }
                });
                $.trigger('calculate').on('change', function() {
                    var $input = $( this );
                    var input_id = $input.attr('id');
                    switch (input_id) {
                        case 'coin_roll_count_25':
                            this_calculator._CalcCoinRowTotal("#coin_total_25", "#coin_value_25", "#coin_roll_count_25", 10);
                            break;
                        case 'coin_roll_count_10':
                            this_calculator._CalcCoinRowTotal("#coin_total_10", "#coin_value_10", "#coin_roll_count_10", 5);
                            break;
                        case 'coin_roll_count_05':
                            this_calculator._CalcCoinRowTotal("#coin_total_05", "#coin_value_05", "#coin_roll_count_05", 2);
                            break;
                        case 'coin_roll_count_01':
                            this_calculator._CalcCoinRowTotal("#coin_total_01", "#coin_value_01", "#coin_roll_count_01", 0.5);
                            break;
                        case 'coin_count_100':
                            this_calculator._ChangeCoinValueField('#coin_value_100','#coin_count_100', 100);
                            this_calculator._CalcCoinRowTotal("#coin_total_100", "#coin_value_100", "", 0);
                            break;
                        case 'coin_value_100':
                            this_calculator._ChangeCoinCountField('#coin_count_100', '#coin_value_100', 100);
                            this_calculator._CalcCoinRowTotal("#coin_total_100", "#coin_value_100", "", 0);
                            break;
                        case 'coin_count_50':
                            this_calculator._ChangeCoinValueField('#coin_value_50', '#coin_count_50', 50);
                            this_calculator._CalcCoinRowTotal("#coin_total_50", "#coin_value_50", "", 0);
                            break;
                        case 'coin_value_50':
                            this_calculator._ChangeCoinCountField('#coin_count_50', '#coin_value_50', 50);
                            this_calculator._CalcCoinRowTotal("#coin_total_50", "#coin_value_50", "", 0);
                            break;
                        case 'coin_count_25':
                            this_calculator._ChangeCoinValueField('#coin_value_25', '#coin_count_25', 25);
                            this_calculator._CalcCoinRowTotal("#coin_total_25", "#coin_value_25", "#coin_roll_count_25", 10);
                            break;
                        case 'coin_value_25':
                            this_calculator._ChangeCoinCountField('#coin_count_25', '#coin_value_25', 25);
                            this_calculator._CalcCoinRowTotal("#coin_total_25", "#coin_value_25", "#coin_roll_count_25", 10);
                            break;
                        case 'coin_count_10':
                            this_calculator._ChangeCoinValueField('#coin_value_10', '#coin_count_10', 10);
                            this_calculator._CalcCoinRowTotal("#coin_total_10", "#coin_value_10", "#coin_roll_count_10", 5);
                            break;
                        case 'coin_value_10':
                            this_calculator._ChangeCoinCountField('#coin_count_10', '#coin_value_10', 10);
                            this_calculator._CalcCoinRowTotal("#coin_total_10", "#coin_value_10", "#coin_roll_count_10", 5);
                            break;
                        case 'coin_count_05':
                            this_calculator._ChangeCoinValueField('#coin_value_05', '#coin_count_05', 5);
                            this_calculator._CalcCoinRowTotal("#coin_total_05", "#coin_value_05", "#coin_roll_count_05", 2);
                            break;
                        case 'coin_value_05':
                            this_calculator._ChangeCoinCountField('#coin_count_05', '#coin_value_05', 5);
                            this_calculator._CalcCoinRowTotal("#coin_total_05", "#coin_value_05", "#coin_roll_count_05", 2);
                            break;
                        case 'coin_count_01':
                            this_calculator._ChangeCoinValueField('#coin_value_01', '#coin_count_01', 1);
                            this_calculator._CalcCoinRowTotal("#coin_total_01", "#coin_value_01", "#coin_roll_count_01", 0.5);
                            break;
                        case 'coin_value_01':
                            this_calculator._ChangeCoinCountField('#coin_count_01', '#coin_value_01', 1);
                            this_calculator._CalcCoinRowTotal("#coin_total_01", "#coin_value_01", "#coin_roll_count_01", 0.5);
                            break;
                        case 'cash_count_100':
                            this_calculator._ChangeCashValueField('#cash_value_100', '#cash_count_100', 100);
                            break;
                        case 'cash_value_100':
                            this_calculator._ChangeCashCountField('#cash_count_100', '#cash_value_100', 100);
                            break;
                        case 'cash_count_50':
                            this_calculator._ChangeCashValueField('#cash_value_50', '#cash_count_50', 50);
                            break;
                        case 'cash_value_50':
                            this_calculator._ChangeCashCountField('#cash_count_50', '#cash_value_50', 50);
                            break;
                        case 'cash_count_20':
                            this_calculator._ChangeCashValueField('#cash_value_20', '#cash_count_20', 20);
                            break;
                        case 'cash_value_20':
                            this_calculator._ChangeCashCountField('#cash_count_20', '#cash_value_20', 20);
                            break;
                        case 'cash_count_10':
                            this_calculator._ChangeCashValueField('#cash_value_10', '#cash_count_10', 10);
                            break;
                        case 'cash_value_10':
                            this_calculator._ChangeCashCountField('#cash_count_10', '#cash_value_10', 10);
                            break;
                        case 'cash_count_05':
                            this_calculator._ChangeCashValueField('#cash_value_05', '#cash_count_05', 5);
                            break;
                        case 'cash_value_05':
                            this_calculator._ChangeCashCountField('#cash_count_05', '#cash_value_05', 5);
                            break;
                        case 'cash_count_02':
                            this_calculator._ChangeCashValueField('#cash_value_02', '#cash_count_02', 2);
                            break;
                        case 'cash_value_02':
                            this_calculator._ChangeCashCountField('#cash_count_02', '#cash_value_02', 2);
                            break;
                        case 'cash_count_01':
                            this_calculator._ChangeCashValueField('#cash_value_01', '#cash_count_01', 1);
                            break;
                        case 'cash_value_01':
                            this_calculator._ChangeCashCountField('#cash_count_01', '#cash_value_01', 1);
                            break;
                        default:
                            this_calculator._UpdateCoinTotal();
                            this_calculator._UpdateTotalCountedCash();
                            break;
                    }
                });

                $.trigger('btnCommitCC').on('click', function() {
                    $(widgetId).val($("#cash_total_cc").val());
                    clearFieldsBool = false;
                    $(widgetId).trigger('change');
                    clearFieldsBool = true;
                    $('#modalCurrencyCalculator').modal('hide');
                });
            },
            _ChangeCoinCountField: function(fieldToChange, sourceField, coinValue) {
                var ftc = $(fieldToChange);
                var sf = $(sourceField);
                var calc = (parseFloat(sf.val()) * 100) / coinValue;

                if(sf.val() === "" || isNaN(calc)) {
                    sf.val(0);
                    ftc.val(0);
                } else {
                    ftc.val(+(calc.toFixed(2))); // what is this plus sign here for?......
                }
                ftc.trigger('input');
            },
            _ChangeCoinValueField: function(fieldToChange, sourceField, coinValue) {
                var ftc = $(fieldToChange);
                var sf = $(sourceField);
                var calc = parseInt(sf.val(), 10)  * coinValue;

                if(sf.val() === "" || isNaN(calc)){
                    sf.val(0);
                    ftc.val(0);
                } else {
                    ftc.val((calc / 100).toFixed(2));
                }
                ftc.trigger('input');
            },
            _ChangeCashCountField: function(fieldToChange, sourceField, cashValue) {
                var ftc = $(fieldToChange);
                var sf = $(sourceField);
                var calc = parseInt(sf.val(), 10) / cashValue;

                if(sf.val() === "" || isNaN(calc)){
                    sf.val(0);
                    ftc.val(0);
                } else {
                    ftc.val(calc);
                }
                ftc.trigger('input');
                this._UpdateTotalCountedCash();
            },
            _ChangeCashValueField: function(fieldToChange, sourceField, cashValue) {
                var ftc = $(fieldToChange);
                var sf = $(sourceField);
                var calc = parseInt(sf.val(), 10);

                if(sf.val() === "" || isNaN(calc)){
                    sf.val(0);
                    ftc.val(0);
                } else {
                    ftc.val(calc * cashValue);
                }
                ftc.trigger('input');
                this._UpdateTotalCountedCash();
            },
            _CalcCoinRowTotal: function(coin_total_input, coin_value_input, coin_roll_input, coin_roll_val){
                var coin_row_total = 0;
                var coin_value = 0;

                if($(coin_total_input).val() === "" || isNaN(parseFloat($(coin_total_input).val()))){
                    $(coin_total_input).val(0);
                }

                if($(coin_value_input).val() === "" || isNaN(parseFloat($(coin_value_input).val()))){
                    coin_value = (0).toFixed(2);
                } else {
                    coin_value = $(coin_value_input).val();
                }
                if($(coin_roll_input).val() === "" || isNaN(parseFloat($(coin_roll_input).val()))){
                    $(coin_roll_input).val(0);
                }

                if(!isNaN(parseFloat(coin_roll_val)) && parseFloat(coin_roll_val) > 0) {
                    coin_row_total = ((parseInt($(coin_roll_input).val(), 10) * coin_roll_val) + (parseFloat(coin_value)));
                } else {
                    coin_row_total = coin_value;
                }
                $(coin_total_input).val(parseFloat(coin_row_total).toFixed(2));
                this._UpdateCoinTotal();
                this._UpdateTotalCountedCash();
            },
            _UpdateCoinTotal: function(){
                var coin_total = 0;
                var totals = [
                    parseFloat($('#coin_total_01').val()) ,
                    parseFloat($('#coin_total_05').val()) ,
                    parseFloat($('#coin_total_10').val()) ,
                    parseFloat($('#coin_total_25').val()) ,
                    parseFloat($('#coin_total_50').val()) ,
                    parseFloat($('#coin_total_100').val())
                ];

                for (var i=0; i<totals.length; i++) {
                    if (!isNaN(totals[i]) && totals[i] > 0) {
                        coin_total += totals[i];
                    }
                }

                $("#coin_total").val(coin_total.toFixed(2));

                //calculate remaining change
                if(useDrawerBanks){
                    if (isNaN(parseFloat($('#coin_total').val()))) {
                        $("#change_from_coin_total").val((0).toFixed(2));
                    } else {
                        var amt = parseFloat($('#coin_total').val()) - parseInt($('#coin_total').val(), 10);
                        amt = amt.toFixed(2);
                        $("#change_from_coin_total").val(amt);
                    }
                }


                //calculate cash to leave in drawer
                //use parse int instead of float for cash to leave in drawer - business rule to not leave change (ie leave $22, not $22.50)
                if(useDrawerBanks){
                    if (isNaN(parseInt($('#drawer_bank_cc').val(), 10))) {
                        $("#drawer_bank_cc").val(0);
                    }
                    var cash_leave_in_drawer = parseInt($('#drawer_bank_cc').val(), 10) - parseInt($('#coin_total').val(), 10);
                    cash_leave_in_drawer = parseInt(cash_leave_in_drawer, 10);
                    $("#cash_leave_in_drawer").val(cash_leave_in_drawer);
                }
            },
            _UpdateTotalCountedCash: function(){
                var cash_total = 0;
                var totals = [
                    parseFloat($('#cash_value_01').val()) ,
                    parseFloat($('#cash_value_05').val()) ,
                    parseFloat($('#cash_value_10').val()) ,
                    parseFloat($('#cash_value_25').val()) ,
                    parseFloat($('#cash_value_50').val()) ,
                    parseFloat($('#cash_value_100').val())
                ];

                for (var i=0; i<totals.length; i++) {
                    if (!isNaN(totals[i]) && totals[i] > 0) {
                        cash_total += totals[i];
                    }
                }

                if (useDrawerBanks){
                    if (!isNaN(parseFloat($("#change_from_coin_total").val())) && parseFloat($("#change_from_coin_total").val())>0) {
                        cash_total += parseFloat($("#change_from_coin_total").val());
                    }
                } else {
                    if (!isNaN(parseFloat($("#coin_total").val())) && parseFloat($("#coin_total").val())>0) {
                        cash_total += parseFloat($("#coin_total").val());
                    }
                }

                $("#cash_total_cc").val(cash_total.toFixed(2));
            },

            _renderMarkup: function(this_calculator) {
                //this.shell = $('#' + this.options.appendTo);
                var htmlMarkup =
                    '<div class="modal fade" id="modalCurrencyCalculator" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"  data-backdrop="static" data-keyboard="false">' +
                    '<div class="modal-dialog modal-lg"><div class="modal-content"><div class="modal-header">' +
                    '<button type="button" class="close" data-dismiss="modal" id="btnCloseCC">' +
                    '<span aria-hidden="true">&times;</span><span class="sr-only">' +
                    Globalize.ebos_translate("close") +
                    '</span></button><h5 class="modal-title" id="myModalLabel"><strong>' +
                    Globalize.ebos_translate("currency_calculator") +
                    '</strong></h5>' +
                    '</div><div class="modal-body"><div class="row "><div class="col-md-7">' +
                    '<table class="table table-condensed currencyCalc"><thead><tr><th><label>' +
                    Globalize.ebos_translate("coin") +
                    '</label></th><th><label>' +
                    Globalize.ebos_translate("roll") +
                    '</label></th><th></th><th><label>' +
                    Globalize.ebos_translate("count") +
                    '</label></th><th></th><th><label>' +
                    Globalize.ebos_translate("value") +
                    '</label></th><th></th><th><label>' +
                    Globalize.ebos_translate("total") +
                    '</label></th></tr></thead><tr><td>1.00</td><td></td><td></td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_count_100" data-trigger="calculate"/>' +
                    '</td><td>' +
                    Globalize.ebos_translate("or") +
                    '</td><td>' +
                    '<input type="text" class="form-control calc-input decValCC" id="coin_value_100" data-trigger="calculate"/>' +
                    '</td><td>=</td><td>' +
                    '<input type="text" disabled class="form-control calc-input coin-total" id="coin_total_100" />' +
                    '</td></tr><tr><td>.50</td><td></td><td></td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_count_50" data-trigger="calculate"/>' +
                    '</td><td>' +
                    Globalize.ebos_translate("or") +
                    '</td><td>' +
                    '<input type="text" class="form-control calc-input decValCC" id="coin_value_50" data-trigger="calculate"/>' +
                    '</td><td>=</td><td><input type="text" disabled class="form-control calc-input  coin-total" id="coin_total_50" />' +
                    '</td></tr><tr><td>.25</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_roll_count_25" data-trigger="calculate"/>' +
                    '</td><td>+</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_count_25" data-trigger="calculate"/>' +
                    '</td><td>' +
                    Globalize.ebos_translate("or") +
                    '</td><td>' +
                    '<input type="text" class="form-control calc-input decValCC" id="coin_value_25" data-trigger="calculate"/>' +
                    '</td><td>=</td><td><input type="text" disabled class="form-control calc-input coin-total" id="coin_total_25" />' +
                    '</td></tr><tr><td>.10</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_roll_count_10" data-trigger="calculate"/>' +
                    '</td><td>+</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_count_10" data-trigger="calculate"/>' +
                    '</td><td>' +
                    Globalize.ebos_translate("or") +
                    '</td><td>' +
                    '<input type="text" class="form-control calc-input decValCC" id="coin_value_10" data-trigger="calculate"/>' +
                    '</td><td>=</td><td><input type="text" disabled class="form-control calc-input coin-total" id="coin_total_10" />' +
                    '</td></tr><tr><td>.05</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_roll_count_05" data-trigger="calculate"/>' +
                    '</td><td>+</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_count_05" data-trigger="calculate"/>' +
                    '</td><td>' +
                    Globalize.ebos_translate("or") +
                    '</td><td>' +
                    '<input type="text" class="form-control calc-input decValCC" id="coin_value_05" data-trigger="calculate"/>' +
                    '</td><td>=</td><td><input type="text" disabled class="form-control calc-input coin-total" id="coin_total_05" />' +
                    '</td></tr><tr><td>.01</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_roll_count_01" data-trigger="calculate"/>' +
                    '</td><td>+</td><td>' +
                    '<input type="text" class="form-control calc-input numValCC" id="coin_count_01" data-trigger="calculate"/>' +
                    '</td><td>' +
                    Globalize.ebos_translate("or") +
                    '</td><td>' +
                    '<input type="text" class="form-control calc-input decValCC" id="coin_value_01" data-trigger="calculate"/>' +
                    '</td><td>=</td><td>' +
                    '<input type="text" disabled class="form-control calc-input coin-total" id="coin_total_01" />' +
                    '</td></tr><tr><td colspan="6" class="text-right">' +
                    Globalize.ebos_translate("coin_total") +
                    ':</td><td>=</td><td>' +
                    '<input type="text" disabled class="form-control calc-input" id="coin_total" />' +
                    '</td></tr>';

                if (useDrawerBanks) {
                    htmlMarkup += '<tr><td colspan="6" class="text-right">' +
                    Globalize.ebos_translate("drawer_bank") +
                    ':</td><td>-</td><td>' +
                    '<input type="text" disabled class="form-control calc-input" id="drawer_bank_cc"' +
                    ' value= "' + this_calculator.options.drawerBank + '" /></td></tr>' +
                    '<tr><td colspan="6" class="text-right">' +
                    Globalize.ebos_translate("cash_to_leave") +
                    ':</td><td>=</td><td>' +
                    '<input type="text" disabled class="form-control calc-input" id="cash_leave_in_drawer" />' +
                    '</td></tr>';
                }
                htmlMarkup += '</table></div><div class="col-md-offset-1 col-md-4 col-no-padding">' +
                '<table class="table table-condensed currencyCalc"><thead><tr><th>' +
                Globalize.ebos_translate("bill") +
                '</th><th></th><th>' +
                Globalize.ebos_translate("count") +
                '</th><th></th><th>' +
                Globalize.ebos_translate("total") +
                '</th></tr></thead><tr><td>100</td><td>X</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_count_100" data-trigger="calculate"/>' +
                '</td><td>=</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_value_100" data-trigger="calculate"/>' +
                '</td></tr><tr><td>50</td><td>X</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_count_50" data-trigger="calculate"/>' +
                '</td><td>=</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_value_50" data-trigger="calculate"/>' +
                '</td></tr><tr><td>20</td><td>X</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_count_20" data-trigger="calculate"/>' +
                '</td><td>=</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_value_20" data-trigger="calculate"/>' +
                '</td></tr><tr><td>10</td><td>X</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_count_10" data-trigger="calculate"/>' +
                '</td><td>=</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_value_10" data-trigger="calculate"/>' +
                '</td></tr><tr><td>5</td><td>X</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_count_05" data-trigger="calculate"/>' +
                '</td><td>=</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_value_05" data-trigger="calculate"/>' +
                '</td></tr><tr><td>2</td><td>X</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_count_02" data-trigger="calculate"/>' +
                '</td><td>=</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_value_02" data-trigger="calculate"/>' +
                '</td></tr><tr><td>1</td><td>X</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_count_01" data-trigger="calculate"/>' +
                '</td><td>=</td><td>' +
                '<input type="text" class="form-control calc-input numValCC" id="cash_value_01" data-trigger="calculate"/>' +
                '</td></tr>';
                if (useDrawerBanks) {
                    htmlMarkup += '<tr><td colspan="4" class="text-right">' +
                    Globalize.ebos_translate("change_from_coins") +
                    ':</td><td><input type="text" disabled class="form-control calc-input" id="change_from_coin_total" /></td></tr>';
                }
                htmlMarkup += '<tr><td colspan="4" class="text-right">' +
                Globalize.ebos_translate("total_counted_cash") +
                ':</td><td><input type="text" disabled class="form-control calc-input" id="cash_total_cc" />' +
                '</td></tr></table></div></div><div class="row"><div class="col-md-4 col-md-offset-8"><div class="pull-right">' +
                '<button type="button" class="btn btn-default btn-sm" data-dismiss="modal" id="btnCancelCC">' +
                Globalize.ebos_translate("cancel") +
                '</button>' +
                '<button type="button" class="btn btn-default btn-sm" data-trigger="btnCommitCC" id="btnCommitCC">' +
                Globalize.ebos_translate("commit") +
                '</button></div></div></div></div></div></div></div>';
                htmlMarkup = $(htmlMarkup);
                htmlMarkup.appendTo($(".input-group").parent());
            }
        });
    }(jQuery));


})(typeof exports === 'undefined' ? this.currency_calculator = {} : exports);
