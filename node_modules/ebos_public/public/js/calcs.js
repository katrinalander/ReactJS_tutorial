//
//	A collection of calculation routines that will be common between the front-end and back-end.
//
//
(function(exports) {

	//
	// calc01:	Sample calulation rule
	//
	// Purpose: To rule to test the test harness
	//
	// Author: AWK (2014-11-25)
	//
	//	Doesn't do anything useful.  It was written as an example to start creating other rules in a framework that can be
	//	unit tested.  This will go away
	//
	exports.calc01 = function(a,b,c) {
		return a+(b*2)-c;
	};

	/*****************************************************************************
	** Name:			ckForNullNaN
	** Purpose:			checks for null or NaN. If found, returns 0.
	** Author:			JEG 12/10/14
	*/
	exports.ckForNullNaN = function(parm) {
		if(parm == null || isNaN(parm)){
			parm = 0;
		}
		return parm - 0;
	};

	/*****************************************************************************
	** Name:			dec_places
	** Purpose:			sets number of decimal places
	** Author:			JEG 12/08/14
	*/
	exports.dec_places = function(num, dec) {
		num = Math.round(num * Math.pow(10,dec)) / Math.pow(10,dec);
		return num;
	};

	/*****************************************************************************
	** Name:			CalcTransactionCount
	** Purpose:			calculate day transaction count
	** Formerly:		New
	** Author:			JEG 12/18/14
	**
	** Parameters:
	**		day_eatin_sale_qty	- day eat in sale quantity
	**		day_tkout_sale_qty	- day take out sale quantity
	**
	** Returns:
	**		day transaction count
	*/

	exports.CalcTransactionCount =
			function(day_eatin_sale_qty, day_tkout_sale_qty) {

		var trans_count = 0;

		//check for null or NaN. If found, return 0
		day_eatin_sale_qty = exports.ckForNullNaN(day_eatin_sale_qty);
		day_tkout_sale_qty = exports.ckForNullNaN(day_tkout_sale_qty);

		//calculate transaction count, has two decimal places
		trans_count =
				exports.dec_places((day_eatin_sale_qty + day_tkout_sale_qty), 2);

		return trans_count;
	};

	/*****************************************************************************
	** Name:			invCalcPhysInvCases
	** Purpose:			calculate physical inventory cases quantity
	** Formerly:		cr001
	** Author:			JEG 12/01/14
	**
	** Parameters:
	**		raw_item_invty_qty	- raw item inventory quantity
	**		activ_uom_case_qty	- active unit of measure case quantity
	**
	** Returns:
	**		physical inventory cases quantity
	*/

	exports.invCalcPhysInvCases =
			function(raw_item_invty_qty, activ_uom_case_qty) {

		var phys_inv_cases = 0;

		//if raw_item_invty_qty is null, negative, or NaN, function returns null
		if(raw_item_invty_qty == null
			|| raw_item_invty_qty < 0
			|| isNaN(raw_item_invty_qty)){
				return null;
		}
		//if activ_uom_case_qty is null, zero, negative, or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//calculate physical inventory cases qty
		if(raw_item_invty_qty == 0 || activ_uom_case_qty == 0){
			phys_inv_cases = 0;
		}
		else {
			phys_inv_cases = Math.floor(raw_item_invty_qty / activ_uom_case_qty);
		}

		//phys_inv_cases has two decimal places
		phys_inv_cases = exports.dec_places(phys_inv_cases, 2);

		return phys_inv_cases;
	};

	/*****************************************************************************
	** Name:			invCalcPhysInvUnits
	** Purpose:			calculate physical inventory units quantity
	** Formerly:		cr002
	** Author:			JEG 12/01/14
	**
	** Parameters:
	**		raw_item_invty_qty	- raw item inventory quantity
	**		activ_uom_case_qty	- active unit of measure case quantity
	**
	** Returns:
	**		physical inventory units quantity
	*/

	exports.invCalcPhysInvUnits =
			function(raw_item_invty_qty, activ_uom_case_qty) {

		var phys_inv_units = 0;
		var cases = 0;

		//if raw_item_invty_qty is null, negative, or NaN, function returns null
		if(raw_item_invty_qty == null
			|| raw_item_invty_qty < 0
			|| isNaN(raw_item_invty_qty)){
				return null;
		}
		//if activ_uom_case_qty is null, zero, negative, or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//calculate physical inventory units qty
		if(raw_item_invty_qty == 0 || activ_uom_case_qty == 0){
			phys_inv_units = 0;
		}
		else {
			cases =
					exports.invCalcPhysInvCases(raw_item_invty_qty, activ_uom_case_qty);
			phys_inv_units = raw_item_invty_qty - (cases * activ_uom_case_qty);
		}

		//phys_inv_units has two decimal places
		phys_inv_units = exports.dec_places(phys_inv_units, 2);

		return phys_inv_units;
	};

	/*****************************************************************************
	** Name:			invCalcTotalUnits
	** Purpose:			calculate the total units of a raw item
	** Formerly:		cr003 & cr003d
	** Author:			JEG 11/25/14
	**
	** Parameters:
	**		cases				- number of cases
	**		activ_uom_case_qty	- UOM per case
	**		sleeves				- number of sleeves
	**		sleeve_unit_qty		- UOM per sleeve
	**		units				- number of units
	**
	** Returns:
	**		total units of a raw item
	*/

	exports.invCalcTotalUnits = function(cases,
										 activ_uom_case_qty,
										 sleeves,
										 sleeve_unit_qty,
										 units) {

		var total_units = 0;

		//check for null or NaN. If found, return 0
		cases = exports.ckForNullNaN(cases);
		activ_uom_case_qty = exports.ckForNullNaN(activ_uom_case_qty);
		sleeves = exports.ckForNullNaN(sleeves);
		sleeve_unit_qty = exports.ckForNullNaN(sleeve_unit_qty);
		units = exports.ckForNullNaN(units);

		//calculate total units. activ_uom_case_qty, sleeve_unit_qty, and units
		//all have two decimal places
		total_units = (cases * activ_uom_case_qty)
								+ (sleeves * sleeve_unit_qty)
								+ units;

		//total_units has two decimal places
		total_units = exports.dec_places(total_units, 2);

		return total_units;
	};

	/*****************************************************************************
	** Name:			invCalcPurchUnitsCost
	** Purpose:			calculate the total dollar amount of units purchased
	** Formerly:		cr004
	** Author:			JEG 12/01/14
	** Revised:			JEG 01/21/15
	**					Modified to return purchase units cost
	**					with four decimal places
	**
	** Parameters:
	**		raw_item_purch_qty	- total units purchased
	**		raw_item_unit_amt	- unit price
	**
	** Returns:
	**		total dollar amount of units purchased
	*/

	exports.invCalcPurchUnitsCost =
			function(raw_item_purch_qty, raw_item_unit_amt) {

		var purch_units_cost = 0;

		//check for null or NaN. If found, return 0
		raw_item_purch_qty = exports.ckForNullNaN(raw_item_purch_qty);
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);

		//calculate total units
		purch_units_cost = raw_item_purch_qty * raw_item_unit_amt;

		//set purch_units_cost to four decimal places
		purch_units_cost = exports.dec_places(purch_units_cost, 4);

		return purch_units_cost;
	};

	/*****************************************************************************
	** Name:			invCalcCasePrice
	** Purpose:			calculate the case price
	** Formerly:		cr005
	** Author:			JEG 12/01/14
	** Revised:			JEG 01/21/15
	**					Modified to return case price with four decimal places
	**
	** Parameters:
	**		activ_uom_case_qty	- UOM per case
	**		raw_item_unit_amt	- unit price
	**
	** Returns:
	**		case price
	*/

	exports.invCalcCasePrice = function(activ_uom_case_qty, raw_item_unit_amt) {

		var case_price = 0;

		//if activ_uom_case_qty is null, zero, negative, or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}
		//if raw_item_unit_amt is null, negative, or NaN, function returns null
		if(raw_item_unit_amt == null
			|| raw_item_unit_amt < 0
			|| isNaN(raw_item_unit_amt)){
				return null;
		}

		//calculate case price
		case_price = activ_uom_case_qty * raw_item_unit_amt;

		//case_price has two decimal places
		case_price = exports.dec_places(case_price, 4);

		return case_price;
	};

	/*****************************************************************************
	** Name:			invCalcUnitPrice
	** Purpose:			calculate the unit price
	** Formerly:		cr006
	** Author:			JEG 12/01/14
	**
	** Parameters:
	**		case_price			- case price
	**		activ_uom_case_qty	- UOM per case
	**
	** Returns:
	**		unit price
	*/

	exports.invCalcUnitPrice = function(case_price, activ_uom_case_qty) {

		var unit_price = 0;

		//if case_price is null, negative, or NaN, function returns null
		if(case_price == null || case_price < 0 || isNaN(case_price)){
			return null;
		}
		//if activ_uom_case_qty is null, zero, negative, or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//calculate unit price, has four decimal places
		unit_price = exports.dec_places((case_price / activ_uom_case_qty), 4);

		return unit_price;
	};

	/*****************************************************************************
	** Name:			invCalcActualUsage
	** Purpose:			calculate the actual usage
	** Formerly:		cr007
	** Author:			JEG 12/01/14
	**
	** Parameters:
	**		starting_inventory	- starting physical inventory
	**		raw_item_purch_qty	- raw item purchased quantity
	**		transf_in_qty		- transfer in quantity
	**		transf_out_qty		- transfer out quantity
	**		raw_waste_qty		- raw waste quantity
	**		raw_promo_qty		- raw promo quantity
	**		ending_inventory	- ending physical inventory
	**
	** Returns:
	**		actual usage
	*/

	exports.invCalcActualUsage = function(starting_inventory,
																			raw_item_purch_qty,
																			transf_in_qty,
																			transf_out_qty,
																			raw_waste_qty,
																			raw_promo_qty,
																			ending_inventory) {

		var actual_usage = 0;

		//if starting_inventory is null, negative, or NaN, function returns null
		if(starting_inventory == null
			|| starting_inventory < 0
			|| isNaN(starting_inventory)){
				return null;
		}
		//if ending_inventory is null, negative, or NaN, function returns null
		if(ending_inventory == null
			|| ending_inventory < 0
			|| isNaN(ending_inventory)){
				return null;
		}

		// if purchases, transfer in/out or raw waste/promo is null, set it to 0
		raw_item_purch_qty = exports.ckForNullNaN(raw_item_purch_qty);
		transf_in_qty = exports.ckForNullNaN(transf_in_qty);
		transf_out_qty = exports.ckForNullNaN(transf_out_qty);
		raw_waste_qty = exports.ckForNullNaN(raw_waste_qty);
		raw_promo_qty = exports.ckForNullNaN(raw_promo_qty);

		// if purchases, raw waste and raw promo is negative, function returns null
		if(raw_item_purch_qty < 0 || transf_in_qty < 0 || transf_out_qty < 0){
			return null;
		}

		//calculate the actual usage
		actual_usage = starting_inventory
								 + raw_item_purch_qty
								 + transf_in_qty
								 - transf_out_qty
								 - raw_waste_qty
								 - raw_promo_qty
								 - ending_inventory;

		//actual_usage has two decimal places
		actual_usage = exports.dec_places(actual_usage, 2);

		return actual_usage;
	};

	/*****************************************************************************
	** Name:				invCalcRawWasteCost
	** Purpose:			calculate the raw waste cost
	** Formerly:		cr008
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		raw_waste_qty			- raw waste quantity
	**		raw_item_unit_amt - raw item unit cost
	**
	** Returns:
	**		raw waste cost
	*/

	exports.invCalcRawWasteCost = function(raw_waste_qty, raw_item_unit_amt) {

		var raw_waste_cost = 0;

		//check for null or NaN. If found, return 0
		raw_waste_qty = exports.ckForNullNaN(raw_waste_qty);
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);

		//calculate raw waste cost, has two decimal places
		raw_waste_cost =
				exports.dec_places((raw_waste_qty * raw_item_unit_amt), 2);

		return raw_waste_cost;
	};

	/*****************************************************************************
	** Name:				invCalcRawPromoCost
	** Purpose:			calculate the raw promo cost
	** Formerly:		cr009
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		raw_promo_qty			- raw promo quantity
	**		raw_item_unit_amt - raw item unit cost
	**
	** Returns:
	**		raw promo cost
	*/

	exports.invCalcRawPromoCost = function(raw_promo_qty, raw_item_unit_amt) {

		var raw_promo_cost = 0;

		//check for null or NaN. If found, return 0
		raw_promo_qty = exports.ckForNullNaN(raw_promo_qty);
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);

		//calculate raw promo cost, has two decimal places
		raw_promo_cost =
				exports.dec_places((raw_promo_qty * raw_item_unit_amt), 2);

		return raw_promo_cost;
	};

	/*****************************************************************************
	** Name:				invCalcEodPosUnitsSold
	** Purpose:			calculate the end of day POS units sold
	** Formerly:		cr010
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		eod_serve_qty - end of day serve quantity
	**		eod_promo_qty - end of day promo quantity
	**
	** Returns:
	**		end of day POS units sold
	*/

	exports.invCalcEodPosUnitsSold = function(eod_serve_qty, eod_promo_qty) {

		var eod_pos_units_sold = 0;

		//check for null or NaN. If found, return 0
		eod_serve_qty = exports.ckForNullNaN(eod_serve_qty);
		eod_promo_qty = exports.ckForNullNaN(eod_promo_qty);

		//calculate raw promo cost, has two decimal places
		eod_pos_units_sold = exports.dec_places((eod_serve_qty - eod_promo_qty), 2);

		return eod_pos_units_sold;
	};

	/*****************************************************************************
	** Name:				invCalcIngredientCost
	** Purpose:			calculate the cost of an ingredient in a menu recipe
	** Formerly:		cr012
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		raw_item_unit_amt - price of one unit of raw item
	**		uom_servg_qty			- servings per unit of measure factor
	**		servg_factor_qty	- number of servings of raw ingredient
	**												used in menu recipe
	**
	** Returns:
	**		ingredient cost
	*/

	exports.invCalcIngredientCost =
			function(raw_item_unit_amt, uom_servg_qty, servg_factor_qty) {

		var ingredient_cost = 0;
		var raw_item_cost_per_serv = 0;

		//check for null or NaN. If found, return 0
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);
		uom_servg_qty = exports.ckForNullNaN(uom_servg_qty);
		servg_factor_qty = exports.ckForNullNaN(servg_factor_qty);

		//calculate cost of one serving of raw item
		raw_item_cost_per_serv =
				exports.invCalcRawItemCostPerServ(raw_item_unit_amt, uom_servg_qty);

		// if invCalcRawItemCostPerServ returns null, set it to 0
		raw_item_cost_per_serv = exports.ckForNullNaN(raw_item_cost_per_serv);

		//calculate ingredient cost, has four decimal places
		ingredient_cost =
				exports.dec_places((raw_item_cost_per_serv * servg_factor_qty), 4);

		return ingredient_cost;
	};

	/*****************************************************************************
	** Name:				invCalcCompletedWasteCost
	** Purpose:			calculate the inventory expense on raw items which are defined
	**							as 'count as waste' in a menu item's recipe and and of class
	**							food, condiment or paper, which accrues from the discarding of
	**							completed menu items
	** Formerly:		cr013
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		compl_waste_cost_food_cond - inventory expense of raw item of class
	**																 food	or condiment,	which accrues from the
	**																 discarding of completed menu items
	**		compl_waste_cost_paper		 - inventory expense of raw item of class
	**																 paper which accrues from the discarding
	**																 of completed menu items
	**
	** Returns:
	**		completed waste cost
	*/

	exports.invCalcCompletedWasteCost =
			function(compl_waste_cost_food_cond, compl_waste_cost_paper) {

		var completed_waste_cost = 0;

		//check for null or NaN. If found, return 0
		compl_waste_cost_food_cond =
				exports.ckForNullNaN(compl_waste_cost_food_cond);
		compl_waste_cost_paper = exports.ckForNullNaN(compl_waste_cost_paper);

		//calculate completed waste cost
		completed_waste_cost = compl_waste_cost_food_cond + compl_waste_cost_paper;

		//completed_waste_cost has two decimal places
		completed_waste_cost = exports.dec_places(completed_waste_cost, 2);

		return completed_waste_cost;
	};

	/*****************************************************************************
	** Name:				invCalcLsmPromoCost
	** Purpose:			calculate the cost of raw items used in LSM PROMO
	**							(LSM = Local or In-store Promo)
	** Formerly:		cr014
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		lsm_promo_cost_food_cond - cost of raw items of class food or
	**															 condiments used in LSM PROMO
	**		lsm_promo_cost_paper		 - cost of raw items of class paper used
	**															 in LSM PROMO
	**
	** Returns:
	**		LSM promo cost
	*/

	exports.invCalcLsmPromoCost =
			function(lsm_promo_cost_food_cond, lsm_promo_cost_paper) {

		var lsm_promo_cost = 0;

		//check for null or NaN. If found, return 0
		lsm_promo_cost_food_cond =
				exports.ckForNullNaN(lsm_promo_cost_food_cond);
		lsm_promo_cost_paper = exports.ckForNullNaN(lsm_promo_cost_paper);

		//calculate LSM promo cost
		lsm_promo_cost = lsm_promo_cost_food_cond + lsm_promo_cost_paper;

		//lsm_promo_cost has two decimal places
		lsm_promo_cost = exports.dec_places(lsm_promo_cost, 2);

		return lsm_promo_cost;
	};

	/*****************************************************************************
	** Name:				invCalcCoopPromoCost
	** Purpose:			calculate the cost of raw items used in COOP PROMO
	**							(COOP = National or Regional Promo)
	** Formerly:		cr015
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		coop_promo_cost_food_cond - cost of raw items of class food or
	**																condiments used in COOP PROMO
	**		coop_promo_cost_paper			- cost of raw items of class paper
	**																used in COOP PROMO
	**
	** Returns:
	**		COOP promo cost
	*/

	exports.invCalcCoopPromoCost =
			function(coop_promo_cost_food_cond, coop_promo_cost_paper) {

		var coop_promo_cost = 0;

		//check for null or NaN. If found, return 0
		coop_promo_cost_food_cond =
				exports.ckForNullNaN(coop_promo_cost_food_cond);
		coop_promo_cost_paper = exports.ckForNullNaN(coop_promo_cost_paper);

		//calculate COOP promo cost, has two decimal places
		coop_promo_cost =
				exports.dec_places((coop_promo_cost_food_cond +
														coop_promo_cost_paper), 2);

		return coop_promo_cost;
	};

	/*****************************************************************************
	** Name:				invCalcPhysInvUnitsCost
	** Purpose:			calculate physical inventory units cost
	** Formerly:		cr016
	** Author:			JEG 12/02/14
	** Revised:			JEG 01/21/15
	**					Modified to return physical inventory units cost
	**					with four decimal places
	**
	** Parameters:
	**		raw_item_invty_qty - raw item inventory quantity
	**		raw_item_unit_amt  - raw item unit amount
	**
	** Returns:
	**		physical inventory units cost
	*/

	exports.invCalcPhysInvUnitsCost =
			function(raw_item_invty_qty, raw_item_unit_amt) {

		var phys_inv_units_cost = 0;

		//if raw_item_invty_qty is null, negative, or NaN, function returns null
		if(raw_item_invty_qty == null
			|| raw_item_invty_qty < 0
			|| isNaN(raw_item_invty_qty)){
				return null;
		}
		//if raw_item_unit_amt is null, negative, or NaN, function returns null
		if(raw_item_unit_amt == null
			|| raw_item_unit_amt < 0
			|| isNaN(raw_item_unit_amt)){
				return null;
		}

		//calculate physical inventory units cost, has two decimal places
		phys_inv_units_cost =
				exports.dec_places((raw_item_invty_qty * raw_item_unit_amt), 4);

		return phys_inv_units_cost;
	};

	/*****************************************************************************
	** Name:			invCalcTransInUnitsCost
	** Purpose:			calculate the total dollar amount of units transferred in
	** Formerly:		cr017
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		transf_in_qty			- total units transferred in
	**		raw_item_unit_amt - raw item unit amount
	**
	** Returns:
	**		transfer in units cost
	*/

	exports.invCalcTransInUnitsCost = function(transf_in_qty, raw_item_unit_amt) {

		var trans_in_units_cost = 0;

		//check for null or NaN. If found, return 0
		transf_in_qty = exports.ckForNullNaN(transf_in_qty);
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);

		//calculate transfer in units cost, has two decimal places
		trans_in_units_cost =
				exports.dec_places((transf_in_qty * raw_item_unit_amt), 2);

		return trans_in_units_cost;
	};

	/*****************************************************************************
	** Name:			invCalcTransOutUnitsCost
	** Purpose:			calculate the total dollar amount of units transferred out
	** Formerly:		cr018
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		transf_out_qty		- total units transferred out
	**		raw_item_unit_amt - raw item unit amount
	**
	** Returns:
	**		transfer out units cost
	*/

	exports.invCalcTransOutUnitsCost =
			function(transf_out_qty, raw_item_unit_amt) {

		var trans_out_units_cost = 0;

		//check for null or NaN. If found, return 0
		transf_out_qty = exports.ckForNullNaN(transf_out_qty);
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);

		//calculate transfer out units cost, has two decimal places
		trans_out_units_cost =
				exports.dec_places((transf_out_qty * raw_item_unit_amt), 2);

		return trans_out_units_cost;
	};

	/*****************************************************************************
	** Name:			invCalcPurchCasesQty
	** Purpose:			calculate the number of cases purchased
	** Formerly:		cr019 & cr020 & cr021
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		raw_item_purch_qty - raw item purchase quantity
	**		activ_uom_case_qty - UOM per case
	**
	** Returns:
	**		number of cases purchased
	*/

	exports.invCalcPurchCasesQty =
			function(raw_item_purch_qty, activ_uom_case_qty) {

		var purchases_cases_qty = 0;

		//if activ_uom_case_qty is null, zero, or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty == 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//check for null or NaN. If found, return 0
		raw_item_purch_qty = exports.ckForNullNaN(raw_item_purch_qty);

		//calculate number of cases purchased
		purchases_cases_qty = Math.floor(raw_item_purch_qty / activ_uom_case_qty);

		return purchases_cases_qty;
	};

	/*****************************************************************************
	** Name:				invCalcPurchUnitsQty
	** Purpose:			calculate the number of units purchased
	**							Given the units purchased, we can calculate the number of
	**							cases	purchased. The number of units that is left, that
	**							is too little	to constitute a case, is the return value
	**							of this function.
	** Formerly:		cr022
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		raw_item_purch_qty - raw item purchase quantity
	**		activ_uom_case_qty - UOM per case
	**
	** Returns:
	**		number of units purchased
	*/

	exports.invCalcPurchUnitsQty =
			function(raw_item_purch_qty, activ_uom_case_qty) {

		var purchases_units_qty = 0;
		var purchases_cases_qty = 0;

		//check for null or NaN. If found, return 0
		raw_item_purch_qty = exports.ckForNullNaN(raw_item_purch_qty);
		activ_uom_case_qty = exports.ckForNullNaN(activ_uom_case_qty);

		//calculate number of cases purchased
		purchases_cases_qty =
				exports.invCalcPurchCasesQty(raw_item_purch_qty, activ_uom_case_qty);

		//if purchases_cases_qty is null, set it to 0
		purchases_cases_qty = exports.ckForNullNaN(purchases_cases_qty);

		//calculate number of units purchased
		purchases_units_qty =
				raw_item_purch_qty - (purchases_cases_qty * activ_uom_case_qty);

		//purchases_units_qty has two decimal places
		purchases_units_qty = exports.dec_places(purchases_units_qty, 2);

		return purchases_units_qty;
	};

	/*****************************************************************************
	** Name:				invCalcTransInUnitsQty
	** Purpose:			calculate the number of units transferred in
	**							Given the units transferred in, we can calculate the number of
	**							cases transferred in. The number of units that is left, that
	**							is too little to constitute a case, is the return value of
	**							this function.
	** Formerly:		cr023
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		transf_in_qty			 - total units transferred in
	**		activ_uom_case_qty - UOM per case
	**
	** Returns:
	**		number of units transferred in
	*/

	exports.invCalcTransInUnitsQty = function(transf_in_qty, activ_uom_case_qty) {

		var trans_in_units_qty = 0;
		var trans_in_cases_qty = 0;

		//check for null or NaN. If found, return 0
		transf_in_qty = exports.ckForNullNaN(transf_in_qty);
		activ_uom_case_qty = exports.ckForNullNaN(activ_uom_case_qty);

		//calculate number of cases transferred in
		trans_in_cases_qty =
				exports.invCalcPurchCasesQty(transf_in_qty, activ_uom_case_qty);

		//if trans_in_cases_qty is null, set it to 0
		trans_in_cases_qty = exports.ckForNullNaN(trans_in_cases_qty);

		//calculate number of units transferred in
		trans_in_units_qty =
				transf_in_qty - (trans_in_cases_qty * activ_uom_case_qty);

		//trans_in_units_qty has two decimal places
		trans_in_units_qty = exports.dec_places(trans_in_units_qty, 2);

		return trans_in_units_qty;
	};

	/*****************************************************************************
	** Name:				invCalcTransOutUnitsQty
	** Purpose:			calculate the number of units transferred out
	**							Given the units transferred out, we can calculate the number
	**							of cases transferred out. The number of units that is left,
	**							that is too little to constitute a case, is the return value
	**							of this function.
	** Formerly:		cr024
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		transf_out_qty		 - total units transferred out
	**		activ_uom_case_qty - UOM per case
	**
	** Returns:
	**		number of units transferred out
	*/

	exports.invCalcTransOutUnitsQty =
			function(transf_out_qty, activ_uom_case_qty) {

		var trans_out_units_qty = 0;
		var trans_out_cases_qty = 0;

		//check for null or NaN. If found, return 0
		transf_out_qty = exports.ckForNullNaN(transf_out_qty);
		activ_uom_case_qty = exports.ckForNullNaN(activ_uom_case_qty);

		//calculate number of cases transferred in
		trans_out_cases_qty =
				exports.invCalcPurchCasesQty(transf_out_qty, activ_uom_case_qty);

		//if trans_out_cases_qty is null, set it to 0
		trans_out_cases_qty = exports.ckForNullNaN(trans_out_cases_qty);

		//calculate number of units transferred out
		trans_out_units_qty =
				transf_out_qty - (trans_out_cases_qty * activ_uom_case_qty);

		//trans_out_units_qty has two decimal places
		trans_out_units_qty = exports.dec_places(trans_out_units_qty, 2);

		return trans_out_units_qty;
	};

	/*****************************************************************************
	** Name:				invCalcComplWasteFoodCost
	** Purpose:			calculate the completed waste cost of food/condiment
	**							calculates the inventory expense on raw items which are
	**							defined as 'count as waste' in a menu item's recipe and of
	**							class food or condiment, which accrues from the discarding
	**							of completed menu items.
	** Formerly:		cr030
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		compl_waste_qty								 - number of menu items wasted
	**		menu_item_food_cond_waste_cost - accumulation of ingredient cost of
	**																		 raw items in the menu item recipe
	**																		 which are defined 'count as waste'
	**																		 and class food or condiment.
	**
	** Returns:
	**		completed waste cost of food/condiment
	*/

	exports.invCalcComplWasteFoodCost =
			function(compl_waste_qty,	menu_item_food_cond_waste_cost) {

		var compl_waste_cost_food_cond = 0;

		//check for null or NaN. If found, return 0
		compl_waste_qty = exports.ckForNullNaN(compl_waste_qty);
		menu_item_food_cond_waste_cost =
				exports.ckForNullNaN(menu_item_food_cond_waste_cost);

		//calculate completed waste cost, has two decimal places
		compl_waste_cost_food_cond =
				exports.dec_places((compl_waste_qty *
														menu_item_food_cond_waste_cost), 2);

		return compl_waste_cost_food_cond;
	};

	/*****************************************************************************
	** Name:				invCalcComplWastePaperCost
	** Purpose:			calculate the completed waste cost of paper-
	**							calculates the inventory expense on raw items which are
	**							defined as 'count as waste' in a menu item's recipe and of
	**							class paper, which accrues from the discarding
	**							of completed menu items.
	** Formerly:		cr031
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		compl_waste_qty						 - number of menu items wasted
	**		menu_item_paper_waste_cost - accumulation of ingredient cost of raw
	**																 items in the menu item recipe which are
	**																 defined 'count as waste' and class paper.
	**
	** Returns:
	**		completed waste cost of paper
	*/

	exports.invCalcComplWastePaperCost =
			function(compl_waste_qty,	menu_item_paper_waste_cost) {

		var compl_waste_cost_paper = 0;

		//check for null or NaN. If found, return 0
		compl_waste_qty = exports.ckForNullNaN(compl_waste_qty);
		menu_item_paper_waste_cost =
				exports.ckForNullNaN(menu_item_paper_waste_cost);

		//calculate completed waste cost, has two decimal places
		compl_waste_cost_paper =
				exports.dec_places((compl_waste_qty * menu_item_paper_waste_cost), 2);

		return compl_waste_cost_paper;
	};

	/*****************************************************************************
	** Name:				invCalcLsmPromoFoodCost
	** Purpose:			calculate the LSM promo food/condiment cost -
	**							calculate the cost of raw items of class food or condiment
	**							used in menu units for LSM Promo.
	** Formerly:		cr032
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		lsm_promo_qty						 - number of menu units used in LSM Promo
	**		menu_item_food_cond_cost - accumulation of ingredient cost of raw
	**															 items in the menu item recipe which are
	**															 of class food or condiment
	**
	** Returns:
	**		LSM promo food/condiment cost
	*/

	exports.invCalcLsmPromoFoodCost =
			function(lsm_promo_qty,	menu_item_food_cond_cost) {

		var lsm_promo_cost_food_cond = 0;

		//check for null or NaN. If found, return 0
		lsm_promo_qty = exports.ckForNullNaN(lsm_promo_qty);
		menu_item_food_cond_cost = exports.ckForNullNaN(menu_item_food_cond_cost);

		//calculate LSM promo food/condiment cost, has two decimal places
		lsm_promo_cost_food_cond =
				exports.dec_places((lsm_promo_qty * menu_item_food_cond_cost), 2);

		return lsm_promo_cost_food_cond;
	};

	/*****************************************************************************
	** Name:				invCalcLsmPromoPaperCost
	** Purpose:			calculate the LSM promo paper cost -
	**							calculate the cost of raw items of class paper used in
	**							menu units for LSM Promo.
	** Formerly:		cr033
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		lsm_promo_qty				 - number of menu units used in LSM Promo
	**		menu_item_paper_cost - accumulation of ingredient cost of raw items
	**													 in the menu item recipe which are of class paper
	**
	** Returns:
	**		LSM promo paper cost
	*/

	exports.invCalcLsmPromoPaperCost =
			function(lsm_promo_qty, menu_item_paper_cost) {

		var lsm_promo_cost_paper = 0;

		//check for null or NaN. If found, return 0
		lsm_promo_qty = exports.ckForNullNaN(lsm_promo_qty);
		menu_item_paper_cost = exports.ckForNullNaN(menu_item_paper_cost);

		//calculate LSM promo paper cost, has two decimal places
		lsm_promo_cost_paper =
				exports.dec_places((lsm_promo_qty * menu_item_paper_cost), 2);

		return lsm_promo_cost_paper;
	};

	/*****************************************************************************
	** Name:				invCalcCoopPromoFoodCost
	** Purpose:			calculate the COOP promo food/condiment cost -
	**							calculate the cost of raw items of class food or condiment
	**							used in menu units for COOP Promo.
	** Formerly:		cr034
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		coop_promo_qty					 - number of menu units used in COOP Promo
	**		menu_item_food_cond_cost - accumulation of ingredient cost of raw
	**															 items in the menu item recipe which are
	**															 of class food or condiment
	**
	** Returns:
	**		COOP promo food/condiment cost
	*/

	exports.invCalcCoopPromoFoodCost =
			function(coop_promo_qty,	menu_item_food_cond_cost) {

		var coop_promo_cost_food_cond = 0;

		//check for null or NaN. If found, return 0
		coop_promo_qty = exports.ckForNullNaN(coop_promo_qty);
		menu_item_food_cond_cost = exports.ckForNullNaN(menu_item_food_cond_cost);

		//calculate COOP promo food/condiment cost, has two decimal places
		coop_promo_cost_food_cond =
				exports.dec_places((coop_promo_qty * menu_item_food_cond_cost), 2);

		return coop_promo_cost_food_cond;
	};

	/*****************************************************************************
	** Name:				invCalcCoopPromoPaperCost
	** Purpose:			calculate the COOP promo paper cost -
	**							calculate the cost of raw items of class paper used in
	**							menu units for COOP Promo.
	** Formerly:		cr035
	** Author:			JEG 12/03/14
	**
	** Parameters:
	**		coop_promo_qty			 - number of menu units used in COOP Promo
	**		menu_item_paper_cost - accumulation of ingredient cost of raw items
	**													 in the menu item recipe which are of class paper
	**
	** Returns:
	**		COOP promo paper cost
	*/

	exports.invCalcCoopPromoPaperCost =
	function(coop_promo_qty, menu_item_paper_cost) {

		var coop_promo_cost_paper = 0;

		//check for null or NaN. If found, return 0
		coop_promo_qty = exports.ckForNullNaN(coop_promo_qty);
		menu_item_paper_cost = exports.ckForNullNaN(menu_item_paper_cost);

		//calculate COOP promo paper cost, has two decimal places
		coop_promo_cost_paper =
				exports.dec_places((coop_promo_qty * menu_item_paper_cost), 2);

		return coop_promo_cost_paper;
	};

	/*****************************************************************************
	** Name:			cshCalcDrawerCoinTotal
	** Purpose:		calculate the drawer coin total
	** Formerly:	cr036
	** Author:		JEG 12/03/14
	**
	** Parameters:
	**		roll_coin_tot		- roll coin total
	**		amount_qrtrs		- amount of quarters
	**		amount_dimes		- amount of dimes
	**		amount_nickels	- amount of nickels
	**		amount_pennies	- amount of pennies
	**
	** Returns:
	**		drawer coin total
	*/

	exports.cshCalcDrawerCoinTotal = function(roll_coin_tot,
																						amount_qrtrs,
																						amount_dimes,
																						amount_nickels,
																						amount_pennies) {

		var drawer_coin_total = 0;

		//if any parameter is null, negative, or NaN, function returns null
		if(roll_coin_tot == null || roll_coin_tot < 0 || isNaN(roll_coin_tot)){
			return null;
		}
		if(!amount_qrtrs == null || amount_qrtrs < 0 || isNaN(amount_qrtrs)){
			return null;
		}
		if(amount_dimes == null || amount_dimes < 0 || isNaN(amount_dimes)){
			return null;
		}
		if(amount_nickels == null || amount_nickels < 0 || isNaN(amount_nickels)){
			return null;
		}
		if(amount_pennies == null || amount_pennies < 0 || isNaN(amount_pennies)){
			return null;
		}

		//calculate drawer coin total
		drawer_coin_total = roll_coin_tot
											+ amount_qrtrs
											+ amount_dimes
											+ amount_nickels
											+ amount_pennies;

		//drawer_coin_total has two decimal places
		drawer_coin_total = exports.dec_places(drawer_coin_total, 2);

		return drawer_coin_total;
	};

	/*****************************************************************************
	** Name:			cshCalcCurrLeaveInDrawer
	** Purpose:		calculate the currency to leave in the drawer
	** Formerly:	cr037
	** Author:		JEG 12/03/14
	**
	** Parameters:
	**		reg_drawr_bank_amt - register drawer bank amount
	**		drawer_coin_total	 - drawer coin total
	**		drawer_coin_change - drawer coin change
	**
	** Returns:
	**		currency to leave in the drawer
	*/

	exports.cshCalcCurrLeaveInDrawer =
			function(reg_drawr_bank_amt, drawer_coin_total,	drawer_coin_change) {

		var curr_leave_in_drawer = 0;

		//if any parameter is null, negative, or NaN, function returns null
		if(reg_drawr_bank_amt == null
			|| reg_drawr_bank_amt < 0
			|| isNaN(reg_drawr_bank_amt)){
				return null;
		}
		if(drawer_coin_total == null
			|| drawer_coin_total < 0
			|| isNaN(drawer_coin_total)){
				return null;
		}
		if(drawer_coin_change == null
			|| drawer_coin_change < 0
			|| isNaN(drawer_coin_change)){
				return null;
		}

		//if drawer coin total is zero and drawer coin change is not zero, return
		//drawer bank amount since the change for zero total is also zero
		if(drawer_coin_total == 0 && drawer_coin_change != 0){
			return reg_drawr_bank_amt;
		}

		//calculate currency to leave in the drawer
		curr_leave_in_drawer =
				reg_drawr_bank_amt - (drawer_coin_total - drawer_coin_change);

		//curr_leave_in_drawer has two decimal places
		curr_leave_in_drawer = exports.dec_places(curr_leave_in_drawer, 2);

		return curr_leave_in_drawer;
	};

	/*****************************************************************************
	** Name:			cshCalcDrawerCoinChange
	** Purpose:		calculate the drawer coin change
	** Formerly:	cr038
	** Author:		JEG 12/03/14
	**
	** Parameters:
	**		drawer_coin_tot - drawer coin total
	**
	** Returns:
	**		drawer coin change
	*/

	exports.cshCalcDrawerCoinChange = function(drawer_coin_tot) {

		var drawer_coin_change = 0;

		//if drawer_coin_tot is null, negative, or NaN, function returns null
		if(drawer_coin_tot == null
			|| drawer_coin_tot < 0
			|| isNaN(drawer_coin_tot)){
				return null;
		}

		//calculate drawer coin change, has two decimal places
		drawer_coin_change = (Math.floor(drawer_coin_tot * 100) % 100) / 100;

		return drawer_coin_change;
	};

	/*****************************************************************************
	** Name:			cshCalcDrawerCount
	** Purpose:		calculate the drawer count
	** Formerly:	cr039
	** Author:		JEG 12/03/14
	**
	** Parameters:
	**		drawer_coin_change - drawer coin change
	**		amount_fifties		 - amount in fifty dollar bills
	**		amount_twenties		 - amount in twenty dollar bills
	**		amount_tens				 - amount in ten dollar bills
	**		amount_fives			 - amount in five dollar bills
	**		amount_ones				 - amount in one dollar bills
	**		trvl_cheques			 - amount in travellers checks
	**		conv_foreign_curr	 - converted foreign currency
	**
	** Returns:
	**		drawer count
	*/

	exports.cshCalcDrawerCount = function(drawer_coin_change,
																				amount_fifties,
																				amount_twenties,
																				amount_tens,
																				amount_fives,
																				amount_ones,
																				trvl_cheques,
																				conv_foreign_curr) {

		var drawer_count = 0;

		//check for null or NaN. If found, return 0
		drawer_coin_change = exports.ckForNullNaN(drawer_coin_change);
		amount_fifties = exports.ckForNullNaN(amount_fifties);
		amount_twenties = exports.ckForNullNaN(amount_twenties);
		amount_tens = exports.ckForNullNaN(amount_tens);
		amount_fives = exports.ckForNullNaN(amount_fives);
		amount_ones = exports.ckForNullNaN(amount_ones);
		trvl_cheques = exports.ckForNullNaN(trvl_cheques);
		conv_foreign_curr = exports.ckForNullNaN(conv_foreign_curr);

		//calculate drawer count
		drawer_count = drawer_coin_change
								 + amount_fifties
								 + amount_twenties
								 + amount_tens
								 + amount_fives
								 + amount_ones
								 + trvl_cheques
								 + conv_foreign_curr

		//drawer_count has two decimal places
		drawer_count = exports.dec_places(drawer_count, 2);

		return drawer_count;
	};

	/*****************************************************************************
	** Name:			cshCalcForvDiffDrawer
	** Purpose:		calculate the forever difference drawer
	** Formerly:	cr040
	** Author:		JEG 12/04/14
	**
	** Parameters:
	**		co_rolovr_factor	 - cashout rollover factor
	**		new_forv_readg_amt - new forever reading amount
	**		pre_forv_readg_amt - previous forever reading amount
	**
	** Returns:
	**		forever difference drawer
	*/

	exports.cshCalcForvDiffDrawer =
	function(co_rolovr_factor, new_forv_readg_amt, pre_forv_readg_amt) {

		var forever_diff_drawer = 0;

		//check for null or NaN. If found, return 0
		co_rolovr_factor = exports.ckForNullNaN(co_rolovr_factor);
		new_forv_readg_amt = exports.ckForNullNaN(new_forv_readg_amt);
		pre_forv_readg_amt = exports.ckForNullNaN(pre_forv_readg_amt);

		forever_diff_drawer = co_rolovr_factor
												+ new_forv_readg_amt
												- pre_forv_readg_amt;

		forever_diff_drawer = exports.dec_places(forever_diff_drawer, 2);

		return forever_diff_drawer;
	};

	/*****************************************************************************
	** Name:			cshCalcExpectedCashDrawer
	** Purpose:		calculate the expected cash drawer
	** Formerly:	cr041
	** Author:		JEG 11/25/14
	**
	** Parameters:
	**		forv_dif_drawer			- forever drawer difference
	**		co_tot_ovring_amt		- cashout total overring amount
	**		co_refund_amt				- cashout refund amount
	**		co_adj_rdm_gct_amt	- cashout adjusted redeemed gift certificate amount
	**		gcard_rdm_amt				- gift card redeemed amount
	**		co_adj_ref_ovr_amt	- cashout adjusted refund overring amount
	**		adj_cr_sale_amt			- adjusted credit sale amount
	**		cashless_gross_amt	- cashless gross amount
	**		reg_skim_amt				- register skim amount
	**
	** Returns:
	**		expected cash drawer
	*/

	exports.cshCalcExpectedCashDrawer = function(forv_dif_drawer,
																							 co_tot_ovring_amt,
																							 co_refund_amt,
																							 co_adj_rdm_gct_amt,
																							 gcard_rdm_amt,
																							 co_adj_ref_ovr_amt,
																							 adj_cr_sale_amt,
																							 cashless_gross_amt,
																							 reg_skim_amt) {

		var expectedCashDrawer = 0;

		//check for nulls, negatives or NaN. If found, return 0
		forv_dif_drawer = exports.ckForNullNaN(forv_dif_drawer);
		co_tot_ovring_amt = exports.ckForNullNaN(co_tot_ovring_amt);
		co_refund_amt = exports.ckForNullNaN(co_refund_amt);
		co_adj_rdm_gct_amt = exports.ckForNullNaN(co_adj_rdm_gct_amt);
		gcard_rdm_amt = exports.ckForNullNaN(gcard_rdm_amt);
		co_adj_ref_ovr_amt = exports.ckForNullNaN(co_adj_ref_ovr_amt);
		adj_cr_sale_amt = exports.ckForNullNaN(adj_cr_sale_amt);
		cashless_gross_amt = exports.ckForNullNaN(cashless_gross_amt);
		reg_skim_amt = exports.ckForNullNaN(reg_skim_amt);

		//calculate the expected cash drawer
		expectedCashDrawer = forv_dif_drawer
											 - co_tot_ovring_amt
											 - co_refund_amt
											 - co_adj_rdm_gct_amt
											 - gcard_rdm_amt
											 - co_adj_ref_ovr_amt
											 - adj_cr_sale_amt
											 - cashless_gross_amt
											 - reg_skim_amt;

		expectedCashDrawer = exports.dec_places(expectedCashDrawer, 2);

		return expectedCashDrawer;
	};

	/*****************************************************************************
	** Name:			cshCalcCashOSAmt
	** Purpose:		calculate the cash over/short amount
	** Formerly:	cr043
	** Author:		JEG 12/04/14
	**
	** Parameters:
	**		co_reg_drawer_amt - cashout register drawer amount
	**		expected_cash			- expected cash amount
	**
	** Returns:
	**		cash over/short amount
	*/

	exports.cshCalcCashOSAmt = function(co_reg_drawer_amt, expected_cash) {

		var cash_over_short_amt = 0;

		//check for null or NaN. If found, return 0
		co_reg_drawer_amt = exports.ckForNullNaN(co_reg_drawer_amt);
		expected_cash = exports.ckForNullNaN(expected_cash);

		//calculate cash_over_short_amt, has two decimal places
		cash_over_short_amt =
				exports.dec_places((co_reg_drawer_amt - expected_cash), 2);

		return cash_over_short_amt;
	};

	/*****************************************************************************
	** Name:			cshCalcCoupOSQty
	** Purpose:		calculate the coupon over/short quantity
	** Formerly:	cr054
	** Author:		JEG 12/04/14
	**
	** Parameters:
	**		co_adj_coupon_qty	- cashout adjusted coupon quantity
	**		co_coupa_qty			- cashout coupon a quantity
	**		co_coupb_qty			- cashout coupon b quantity
	**		co_coupc_qty			- cashout coupon c quantity
	**		co_coupd_qty			- cashout coupon d quantity
	**		co_coupe_qty			- cashout coupon e quantity
	**		co_disc_sale_qty	- cashout discount sale quantity
	**
	** Returns:
	**		coupon over/short quantity
	*/

	exports.cshCalcCoupOSQty = function(co_adj_coupon_qty,
																			co_coupa_qty,
																			co_coupb_qty,
																			co_coupc_qty,
																			co_coupd_qty,
																			co_coupe_qty,
																			co_disc_sale_qty) {

		var coupon_over_short_qty = 0;

		//check for null or NaN. If found, return 0
		co_adj_coupon_qty = exports.ckForNullNaN(co_adj_coupon_qty);
		co_coupa_qty = exports.ckForNullNaN(co_coupa_qty);
		co_coupb_qty = exports.ckForNullNaN(co_coupb_qty);
		co_coupc_qty = exports.ckForNullNaN(co_coupc_qty);
		co_coupd_qty = exports.ckForNullNaN(co_coupd_qty);
		co_coupe_qty = exports.ckForNullNaN(co_coupe_qty);
		co_disc_sale_qty = exports.ckForNullNaN(co_disc_sale_qty);

		//calculate coupon_over_short_qty, has two decimal places
		coupon_over_short_qty = co_adj_coupon_qty
													- co_coupa_qty
													- co_coupb_qty
													- co_coupc_qty
													- co_coupd_qty
													- co_coupe_qty
													- co_disc_sale_qty;

		coupon_over_short_qty = exports.dec_places(coupon_over_short_qty, 2);

		return coupon_over_short_qty;
	};

	/*****************************************************************************
	** Name:			cshCalcGiftAOSQty
	** Purpose:		calculate the gift a over/short quantity
	** Formerly:	cr055
	** Author:		JEG 12/04/14
	**
	** Parameters:
	**		co_adj_rdm_gfa_qty	- manually counted gift a certificate quantity
	**		co_redm_gfta_qty		- pos recorded gift a certificate quantity
	**
	** Returns:
	**		gift a over/short quantity
	*/

	exports.cshCalcGiftAOSQty =
	function(co_adj_rdm_gfa_qty, co_redm_gfta_qty) {

		var gift_a_over_short_qty = 0;

		//check for null or NaN. If found, return 0
		co_adj_rdm_gfa_qty = exports.ckForNullNaN(co_adj_rdm_gfa_qty);
		co_redm_gfta_qty = exports.ckForNullNaN(co_redm_gfta_qty);

		//calculate gift_a_over_short_qty, has two decimal places
		gift_a_over_short_qty =
				exports.dec_places((co_adj_rdm_gfa_qty - co_redm_gfta_qty), 2);

		return gift_a_over_short_qty;
	};

	/*****************************************************************************
	** Name:			cshCalcGiftBOSQty
	** Purpose:		calculate the gift b over/short quantity
	** Formerly:	cr056
	** Author:		JEG 12/04/14
	**
	** Parameters:
	**		co_adj_rdm_gfb_qty	- manually counted gift b certificate quantity
	**		co_redm_gftb_qty		- pos recorded gift b certificate quantity
	**
	** Returns:
	**		gift b over/short quantity
	*/

	exports.cshCalcGiftBOSQty =
	function(co_adj_rdm_gfb_qty, co_redm_gftb_qty) {

		var gift_b_over_short_qty = 0;

		//check for null or NaN. If found, return 0
		co_adj_rdm_gfb_qty = exports.ckForNullNaN(co_adj_rdm_gfb_qty);
		co_redm_gftb_qty = exports.ckForNullNaN(co_redm_gftb_qty);

		//calculate gift_b_over_short_qty, has two decimal places
		gift_b_over_short_qty =
				exports.dec_places((co_adj_rdm_gfb_qty - co_redm_gftb_qty), 2);

		return gift_b_over_short_qty;
	};

	/*****************************************************************************
	** Name:			cshCalcPromoOSQty
	** Purpose:		calculate the promo over/short quantity
	** Formerly:	cr057
	** Author:		JEG 12/04/14
	**
	** Parameters:
	**		co_adj_promo_qty - manually counted quantity of promo orders
	**		co_promo_ord_qty - pos recorded quantity of promo orders
	**
	** Returns:
	**		promo over/short quantity
	*/

	exports.cshCalcPromoOSQty =
	function(co_adj_promo_qty, co_promo_ord_qty) {

		var promo_over_short_qty = 0;

		//check for null or NaN. If found, return 0
		co_adj_promo_qty = exports.ckForNullNaN(co_adj_promo_qty);
		co_promo_ord_qty = exports.ckForNullNaN(co_promo_ord_qty);

		//calculate promo_over_short_qty, has two decimal places
		promo_over_short_qty =
				exports.dec_places((co_adj_promo_qty - co_promo_ord_qty), 2);

		return promo_over_short_qty;
	};

	/*****************************************************************************
	** Name:			cshCalcGiftARdmdAmt
	** Purpose:		calculate the gift a redeemed amount
	** Formerly:	cr062
	** Author:		JEG 12/04/14
	**
	** Parameters:
	**		co_adj_rdm_gfa_qty	- cashout adjust redeemed gift a quantity
	**		gcert_amt						- gift certificate amount
	**
	** Returns:
	**		gift a redeemed amount
	*/

	exports.cshCalcGiftARdmdAmt = function(co_adj_rdm_gfa_qty, gcert_amt) {

		var gift_a_redeemed_amt = 0;

		//if co_adj_rdm_gfa_qty is null, negative, or NaN, function returns null
		if(co_adj_rdm_gfa_qty == null
			|| co_adj_rdm_gfa_qty < 0
			|| isNaN(co_adj_rdm_gfa_qty)){
				return null;
		}
		//if gcert_amt is null, zero, negative, or NaN, function returns null
		if(gcert_amt ==null || gcert_amt <= 0 || isNaN(gcert_amt)){
			return null;
		}

		//calculate gift a redeemed amount, has two decimal places
		gift_a_redeemed_amt =
				exports.dec_places((co_adj_rdm_gfa_qty * gcert_amt), 2);

		return gift_a_redeemed_amt;
	};

	/*****************************************************************************
	** Name:				invCalcBrkDayprtSoldQty
	** Purpose:			calculates the breakfast daypart sold quantity
	**							given: end of breakfast quantity served and end of
	**							breakfast promo quantity
	** Formerly:		cr063
	** Author:			JEG 12/04/14
	**
	** Parameters:
	**		eob_serve_qty - end of breakfast served quantity
	**		eob_promo_qty - end of breakfast promo quantity
	**
	** Returns:
	**		breakfast daypart sold quantity
	*/

	exports.invCalcBrkDayprtSoldQty = function(eob_serve_qty, eob_promo_qty) {

		var brkfst_sold_qty = 0;

		//check for null or NaN. If found, return 0
		eob_serve_qty = exports.ckForNullNaN(eob_serve_qty);
		eob_promo_qty = exports.ckForNullNaN(eob_promo_qty);

		//calculate breakfast daypart sold quantity, has two decimal places
		brkfst_sold_qty = exports.dec_places((eob_serve_qty - eob_promo_qty), 2);

		return brkfst_sold_qty;
	};

	/*****************************************************************************
	** Name:				invCalcRegDayprtSoldQty
	** Purpose:			calculates the regular daypart sold quantity
	**							given:  end of day quantity served, end of day promo
	**							quantity, end of breakfast quantity served, end of
	**							breakfast promo quantity
	** Formerly:		cr064
	** Author:			JEG 12/04/14
	**
	** Parameters:
	**		eod_serve_qty - end of day serve quantity
	**		eod_promo_qty - end of day promo quantity
	**		eob_serve_qty - end of breakfast served quantity
	**		eob_promo_qty - end of breakfast promo quantity
	**
	** Returns:
	**		regular daypart sold quantity
	*/

	exports.invCalcRegDayprtSoldQty =
	function(eod_serve_qty,	eod_promo_qty, eob_serve_qty,	eob_promo_qty) {

		var reg_sold_qty = 0;

		//check for null or NaN. If found, return 0
		eod_serve_qty = exports.ckForNullNaN(eod_serve_qty);
		eod_promo_qty = exports.ckForNullNaN(eod_promo_qty);
		eob_serve_qty = exports.ckForNullNaN(eob_serve_qty);
		eob_promo_qty = exports.ckForNullNaN(eob_promo_qty);

		//calculate regular daypart sold quantity, has two decimal places
		reg_sold_qty =
				(eod_serve_qty - eod_promo_qty) - (eob_serve_qty - eob_promo_qty);

		reg_sold_qty = exports.dec_places(reg_sold_qty, 2);

		return reg_sold_qty;
	};

	/*****************************************************************************
	** Name:				invCalcRegDayprtPromoQty
	** Purpose:			calculates the regular daypart promo quantity
	** Formerly:		cr065
	** Author:			JEG 12/04/14
	**
	** Parameters:
	**		eod_promo_qty - end of day promo quantity
	**		eob_promo_qty - end of breakfast promo quantity
	**
	** Returns:
	**		regular daypart promo quantity
	*/

	exports.invCalcRegDayprtPromoQty = function(eod_promo_qty, eob_promo_qty) {

		var reg_dayprt_promo_qty = 0;

		//if eod_promo_qty is null, negative, or NaN, function returns null
		if(eod_promo_qty == null || eod_promo_qty < 0 || isNaN(eod_promo_qty)){
			return null;
		}
		//if eob_promo_qty is null, negative, or NaN, function returns null
		if(eob_promo_qty == null || eob_promo_qty < 0 || isNaN(eob_promo_qty)){
			return null;
		}

		//calculate regular daypart promo quantity, has two decimal places
		reg_dayprt_promo_qty =
				exports.dec_places((eod_promo_qty - eob_promo_qty), 2);

		return reg_dayprt_promo_qty;
	};

	/*****************************************************************************
	** Name:				cshCalcProductNet
	** Purpose:			calculates the product net
	** Formerly:		cr066
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		adj_net_sales_amt		- adjusted net sales amount
	**		non_prod_sales_amt	- non-product sales amount
	**
	** Returns:
	**		product net
	*/

	exports.cshCalcProductNet = function(adj_net_sales_amt, non_prod_sales_amt) {

		var product_net = 0;

		//check for null or NaN. If found, return 0
		adj_net_sales_amt = exports.ckForNullNaN(adj_net_sales_amt);
		non_prod_sales_amt = exports.ckForNullNaN(non_prod_sales_amt);

		//calculate product net, has two decimal places
		if(adj_net_sales_amt >= non_prod_sales_amt){
			product_net =
					exports.dec_places((adj_net_sales_amt - non_prod_sales_amt), 2);
		}
		else{
			product_net = 0;
		}

		return product_net;
	};

	/*****************************************************************************
	** Name:				invCalcAvgHistUseFctr
	** Purpose:			calculates the average historical usage factor
	** Formerly:		cr069
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		usage_factors		 - usage factors
	**		count_of_fctrs	 - count of factors
	**
	** Returns:
	**		average historical usage factor
	*/

	exports.invCalcAvgHistUseFctr = function(usage_factors, count_of_fctrs) {

		var avg_his_usage_factor = 0;

		//if usage_factors is null, negative, or NaN, function returns null
		if(usage_factors == null || usage_factors < 0 || isNaN(usage_factors)){
			return null;
		}
		//if count_of_fctrs is null, zero, negative, or NaN, function returns null
		if(count_of_fctrs == null || count_of_fctrs <= 0 || isNaN(count_of_fctrs)){
			return null;
		}

		//calculate average historical usage factor, has four decimal places
		avg_his_usage_factor =
				exports.dec_places((usage_factors / count_of_fctrs), 4);

		return avg_his_usage_factor;
	};

	/*****************************************************************************
	** Name:				invCalcRawItemUseKFctr
	** Purpose:			calculates the raw item usage per 1000 factor
	** Formerly:		cr070
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		actual_usage			 - actual usage
	**		sales_in_thous		 - sales in thousands
	**
	** Returns:
	**		raw item usage per 1000 factor
	*/

	exports.invCalcRawItemUseKFctr = function(actual_usage, sales_in_thous) {

		var raw_item_usage_1000_factor = 0;

		//if actual_usage is null, negative, or NaN, function returns null
		if(actual_usage == null || actual_usage < 0 || isNaN(actual_usage)){
			return null;
		}
		//if sales_in_thous is null, zero, negative, or NaN, function returns null
		if(sales_in_thous == null
			|| sales_in_thous <= 0
			|| isNaN(sales_in_thous)){
				return null;
		}

		//calculate raw item usage per 1000 factor, has two decimal places
		raw_item_usage_1000_factor =
				exports.dec_places((actual_usage / sales_in_thous), 2);

		return raw_item_usage_1000_factor;
	};

//***need examples of actual numbers***
	/*****************************************************************************
	** Name:				invCalcDevHistUseFctr
	** Purpose:			calculates the deviation from historical usage factor
	** Formerly:		cr072
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		usage_sale_factor_amt				- usage sale factor amount
	**		avg_historical_usage_factor - avgerage historical usage factor
	**
	** Returns:
	**		deviation from historical usage factor
	*/

	exports.invCalcDevHistUseFctr =
			function(usage_sale_factor_amt,	avg_historical_usage_factor) {

		var dev_from_his_usage_factor = 0;

		//if usage_sale_factor_amt is null, negative, or NaN, function returns null
		if(usage_sale_factor_amt == null
			|| usage_sale_factor_amt < 0
			|| isNaN(usage_sale_factor_amt)){
				return null;
		}
		//if avg_historical_usage_factor is null, zero, negative, or NaN, function returns null
		if(avg_historical_usage_factor == null
			|| avg_historical_usage_factor <= 0
			|| isNaN(avg_historical_usage_factor)){
				return null;
		}

		//convert usage_sale_factor_amt to four decimal places
		usage_sale_factor_amt = exports.dec_places(usage_sale_factor_amt,4);

		//calculate deviation from historical usage factor
		dev_from_his_usage_factor =
				((usage_sale_factor_amt - avg_historical_usage_factor)
				/ avg_historical_usage_factor) * 100;

		//dev_from_his_usage_factor has two decimal places
		dev_from_his_usage_factor =
				exports.dec_places(dev_from_his_usage_factor, 2);

		return dev_from_his_usage_factor;
	};

	/*****************************************************************************
	** Name:				invCalcCalcdYield
	** Purpose:			calculates the calculated yield
	** Formerly:		cr073
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		total_calculated_servings - total calculated servings
	**		total_actual_usage				- total actual usage
	**
	** Returns:
	**		calculated yield
	*/

	exports.invCalcCalcdYield =
			function(total_calculated_servings,	total_actual_usage) {

		var calculated_yield = 0;

		//if total_calculated_servings is null, negative, or NaN, function returns null
		if(total_calculated_servings == null
			|| total_calculated_servings < 0
			|| isNaN(total_calculated_servings)){
				return null;
		}
		//if total_actual_usage is null, zero or NaN, function returns null
		if(total_actual_usage == null
			|| total_actual_usage == 0
			|| isNaN(total_actual_usage)){
				return null;
		}

		//calculate calculated yield, has two decimal places
		calculated_yield =
				exports.dec_places((total_calculated_servings / total_actual_usage), 2);

		return calculated_yield;
	};

	/*****************************************************************************
	** Name:				cshCalcGiftBRdmdAmt
	** Purpose:			calculates the gift b redeemed dollars
	** Formerly:		cr074
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		co_adj_rdm_gfb_qty	- cashout adjust redeemed gift b quantity
	**		gcert_amt						- gift certificate amount
	**
	** Returns:
	**		gift b redeemed dollars
	*/

	exports.cshCalcGiftBRdmdAmt = function(co_adj_rdm_gfb_qty, gcert_amt) {

		var gift_b_redeemed_amt = 0;

		//if co_adj_rdm_gfb_qty is null, negative, or NaN, function returns null
		if(co_adj_rdm_gfb_qty == null
			|| co_adj_rdm_gfb_qty < 0
			|| isNaN(co_adj_rdm_gfb_qty)){
				return null;
			}
		//if gcert_amt is null, zero, negative, or NaN, function returns null
		if(gcert_amt == null || gcert_amt <= 0 || isNaN(gcert_amt)){
			return null;
		}

		//calculate gift b redeemed amount, has two decimal places
		gift_b_redeemed_amt =
				exports.dec_places((co_adj_rdm_gfb_qty * gcert_amt), 2);

		return gift_b_redeemed_amt;
	};

	//***how is ptconcsh passed?***
	/*****************************************************************************
	** Name:				cshCalcCompProdNet
	** Purpose:			calculates the computed product net
	** Formerly:		cr078 & cr078a
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		extended_product_net	- extended product net
	**		empl_meal_amt					- employee meal amount
	**		day_mgr_meal_amt			- manager meal amount
	**		daily_coupa_amt				- daily coupon a amount
	**		daily_coupb_amt				- daily coupon b amount
	**		daily_coupc_amt				- daily coupon c amount
	**		daily_coupd_amt				- daily coupon d amount
	**		daily_coupe_amt				- daily coupon e amount
	**		discnt_sales_amt			- discount sales amount
	**		adj_ref_ovring_amt		- adjusted refund overring amount
	**
	** Returns:
	**		computed product net
	*/

	exports.cshCalcCompProdNet = function(extended_product_net,
																				empl_meal_amt,
																				day_mgr_meal_amt,
																				daily_coupa_amt,
																				daily_coupb_amt,
																				daily_coupc_amt,
																				daily_coupd_amt,
																				daily_coupe_amt,
																				discnt_sales_amt,
																				adj_ref_ovring_amt) {

		var computed_product_net = 0;

		//check for null or NaN. If found, return 0
		extended_product_net = exports.ckForNullNaN(extended_product_net);
		empl_meal_amt = exports.ckForNullNaN(empl_meal_amt);
		day_mgr_meal_amt = exports.ckForNullNaN(day_mgr_meal_amt);
		daily_coupa_amt = exports.ckForNullNaN(daily_coupa_amt);
		daily_coupb_amt = exports.ckForNullNaN(daily_coupb_amt);
		daily_coupc_amt = exports.ckForNullNaN(daily_coupc_amt);
		daily_coupd_amt = exports.ckForNullNaN(daily_coupd_amt);
		daily_coupe_amt = exports.ckForNullNaN(daily_coupe_amt);
		discnt_sales_amt = exports.ckForNullNaN(discnt_sales_amt);
		adj_ref_ovring_amt = exports.ckForNullNaN(adj_ref_ovring_amt);

		//calculate computed product net
		computed_product_net = extended_product_net
												 - empl_meal_amt
												 - day_mgr_meal_amt
												 - daily_coupa_amt
												 - daily_coupb_amt
												 - daily_coupc_amt
												 - daily_coupd_amt
												 - daily_coupe_amt
												 - discnt_sales_amt
												 - adj_ref_ovring_amt;

		//computed_product_net has two decimal places
		computed_product_net = exports.dec_places(computed_product_net, 2);

		return computed_product_net;
	};

	/*****************************************************************************
	** Name:				invCalcVarRawItmAmt
	** Purpose:			calculate variance - raw item dollars
	** Formerly:		cr079
	** Author:			JEG 12/05/14
	**
	** Parameters:
	**		variance_raw_item_units	- variance raw item units
	**		raw_item_unit_amt				- raw item unit amount
	**
	** Returns:
	**		variance - raw item amount
	*/

	exports.invCalcVarRawItmAmt =
			function(variance_raw_item_units, raw_item_unit_amt) {

		var var_raw_item_amt = 0;

		//if variance_raw_item_units is null or NaN, function returns null
		if(variance_raw_item_units == null || isNaN(variance_raw_item_units)){
			return null;
		}
		//if raw_item_unit_amt is null, zero, negative, or NaN, function returns null
		if(raw_item_unit_amt == null
			|| raw_item_unit_amt <= 0
			|| isNaN(raw_item_unit_amt)){
				return null;
			}

		//variance_raw_item_units has 2 decimal places
		//variance_raw_item_units = exports.dec_places(variance_raw_item_units,2);

		//raw_item_unit_amt has 4 decimal places
		//raw_item_unit_amt = exports.dec_places(raw_item_unit_amt,4);

		//calculate variance - raw item amount, has 6 decimals places
		var_raw_item_amt =
				exports.dec_places(variance_raw_item_units * raw_item_unit_amt, 6);

		return var_raw_item_amt;
	};

	/*****************************************************************************
	** Name:				invCalcRawUnitsUsed
	** Purpose:			calculate raw items used
	** Formerly:		cr081
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		raw_units_sold				- units of the raw item used in sold units
	**		raw_units_lsm					- units of the raw item used in promo for
	**														LSM units
	**		raw_units_coop				- units of the raw item used in promo for
	**														COOP units
	**		raw_units_compl_waste - units of the raw item used in WASTE units
	**
	** Returns:
	**		variance - raw units used
	*/

	exports.invCalcRawUnitsUsed = function(raw_units_sold,
																				 raw_units_lsm,
																				 raw_units_coop,
																				 raw_units_compl_waste) {

		var raw_units_used = 0;

		//check for null or NaN. If found, return 0
		raw_units_sold = exports.ckForNullNaN(raw_units_sold);
		raw_units_lsm = exports.ckForNullNaN(raw_units_lsm);
		raw_units_coop = exports.ckForNullNaN(raw_units_coop);
		raw_units_compl_waste = exports.ckForNullNaN(raw_units_compl_waste);

		//calculate raw units used, has two decimal places
		raw_units_used = raw_units_sold
									 + raw_units_lsm
									 + raw_units_coop
									 + raw_units_compl_waste;

		raw_units_used = exports.dec_places(raw_units_used, 2);

		return raw_units_used;
	};

	/*****************************************************************************
	** Name:				invCalcVarProdNet
	** Purpose:			calculate variance product net
	**							Calculates the dollar variance of: daily product sales
	**							based on price extensions of product menu item units sold
	**							versus product sales amount recorded by the POS/Cash Sheet
	**							figures
	** Formerly:		cr084
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		computed_product_net	- computed product net
	**		product_net						- actual product net
	**
	** Returns:
	**		variance product net
	*/

	exports.invCalcVarProdNet = function(computed_product_net, product_net) {

		var var_prod_net = 0;

		//check for null or NaN. If found, return 0
		computed_product_net = exports.ckForNullNaN(computed_product_net);
		product_net = exports.ckForNullNaN(product_net);

		//calculate variance product net, has two decimal places
		var_prod_net = exports.dec_places((computed_product_net - product_net), 2);

		if(var_prod_net < 0) {
			var_prod_net = -var_prod_net;
		}

		return var_prod_net;
	};

	/*****************************************************************************
	** Name:				invCalcVarRawItemUnits
	** Purpose:			calculate variance raw item units
	** Formerly:		cr089
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		calculated_raw_item_usage	- calculated raw item usage
	**		actual_usage							- actual usage
	**
	** Returns:
	**		variance raw item units
	*/

	exports.invCalcVarRawItemUnits =
			function(calculated_raw_item_usage, actual_usage) {

		var var_raw_item_units = 0;

		//if calculated_raw_item_usage is null, negative, or NaN, function returns null
		if(calculated_raw_item_usage == null
			|| calculated_raw_item_usage < 0
			|| isNaN(calculated_raw_item_usage)){
				return null;
		}
		//if actual_usage is null or NaN, function returns null
		if(actual_usage == null || isNaN(actual_usage)){
				return null;
		}

		//calculate variance raw item units, has two decimal places
		var_raw_item_units =
				exports.dec_places((calculated_raw_item_usage - actual_usage), 2);

		return var_raw_item_units;
	};

	/*****************************************************************************
	** Name:				invCalcCompAllNet
	** Purpose:			calculate computed all net
	**							Calculates the difference of compute product net and
	**							computed non product net to obtain computed all net
	** Formerly:		cr091
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		computed_prod_net			- computed product net
	**		computed_non_prod_net	- computed non product net
	**
	** Returns:
	**		computed all net
	*/

	exports.invCalcCompAllNet =
			function(computed_prod_net, computed_non_prod_net) {

		var comp_all_net = 0;

		//check for null or NaN. If found, return 0
		computed_prod_net = exports.ckForNullNaN(computed_prod_net);
		computed_non_prod_net = exports.ckForNullNaN(computed_non_prod_net);

		//calculate computed all net, has two decimal places
		comp_all_net =
				exports.dec_places((computed_prod_net + computed_non_prod_net), 2);

		return comp_all_net;
	};

	/*****************************************************************************
	** Name:				cshCalcAvgCrewWage
	** Purpose:			calculates average crew wage
	** Formerly:		cr102
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		crew_payrl_amt	- crew payroll amount
	**		reg_crew_hr_qty	- regular crew hour quantity
	**		ot_crew_hr_qty	- overtime crew hour quantity
	**		dbl_crew_hr_qty	- doubletime crew hour quantity
	**
	** Returns:
	**		average crew wage
	*/

	exports.cshCalcAvgCrewWage = function(crew_payrl_amt,
																				reg_crew_hr_qty,
																				ot_crew_hr_qty,
																				dbl_crew_hr_qty) {

		var avg_crew_wage = 0;
		var sum_of_crew_time = 0;

		//if crew_payrl_amt is null, negative, zero, or NaN, function returns null
		if(crew_payrl_amt ==null || crew_payrl_amt <= 0 || isNaN(crew_payrl_amt)){
			return null;
		}
		//if reg_crew_hr_qty is null or NaN, function returns null
		if(reg_crew_hr_qty == null|| reg_crew_hr_qty < 0 || isNaN(reg_crew_hr_qty)){
			return null;
		}
		//if ot_crew_hr_qty is null or NaN, function returns null
		if(ot_crew_hr_qty == null || ot_crew_hr_qty < 0 || isNaN(ot_crew_hr_qty)){
			return null;
		}
		//if dbl_crew_hr_qty is null or NaN, function returns null
		if(dbl_crew_hr_qty == null|| dbl_crew_hr_qty < 0 || isNaN(dbl_crew_hr_qty)){
			return null;
		}

		//sum up crew hours. if negative, function returns null
		sum_of_crew_time = reg_crew_hr_qty + ot_crew_hr_qty + dbl_crew_hr_qty;
		if(sum_of_crew_time <= 0){
			return null;
		}

		//calculate average crew wage, has two decimal places
		avg_crew_wage = exports.dec_places((crew_payrl_amt / sum_of_crew_time), 2);

		return avg_crew_wage;
	};

	/*****************************************************************************
	** Name:				cshCalcSalesPerCrewHr
	** Purpose:			calculates sales per crew hour
	** Formerly:		cr103
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		product_net	- product net
	**		crew_hours	- crew hours
	**
	** Returns:
	**		sales per crew hour
	*/

	exports.cshCalcSalesPerCrewHr = function(product_net, crew_hours) {

		var sales_per_crew_hour = 0;

		//if product_net is null, negative, or NaN, function returns null
		if(product_net == null || product_net < 0 || isNaN(product_net)){
			return null;
		}
		//if crew_hours is null, zero, negative, or NaN, function returns null
		if(crew_hours == null || crew_hours <= 0 || isNaN(crew_hours)){
			return null;
		}

		//calculate sales per crew hour, has two decimal places
		sales_per_crew_hour = exports.dec_places((product_net / crew_hours), 2);

		return sales_per_crew_hour;
	};

	/*****************************************************************************
	** Name:				cshCalcStWideAvgCheck
	** Purpose:			calculates storewide average check
	** Formerly:		cr115
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		product_net					- product net
	**		day_cust_trans_qty	- day customer transaction quantity
	**
	** Returns:
	**		storewide average check
	*/

	exports.cshCalcStWideAvgCheck = function(product_net, day_cust_trans_qty) {

		var average_check = 0;

		//if product_net is null, negative, or NaN, function returns null
		if(product_net == null || product_net < 0 || isNaN(product_net)){
			return null;
		}
		//if day_cust_trans_qty is null, zero, negative, or NaN, function returns null
		if(day_cust_trans_qty == null
			|| day_cust_trans_qty <= 0
			|| isNaN(day_cust_trans_qty)){
				return null;
			}

		//calculate storewide average check, has two decimal places
		average_check = exports.dec_places((product_net / day_cust_trans_qty), 2);

		return average_check;
	};

	/*****************************************************************************
	** Name:				cshCalcAvgBrkfstCheck
	** Purpose:			calculates breakfast average check
	** Formerly:		cr120
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		brfst_net_sale_amt	- breakfast net sale amount
	**		brfst_net_sale_qty	- breakfast net sale quantity
	**
	** Returns:
	**		breakfast average check
	*/

	exports.cshCalcAvgBrkfstCheck =
	function(brfst_net_sale_amt, brfst_net_sale_qty) {

		var average_check = 0;

		//if brfst_net_sale_amt is null, negative, or NaN, function returns null
		if(!brfst_net_sale_amt
			|| brfst_net_sale_amt < 0
			|| isNaN(brfst_net_sale_amt)){
				return null;
			}
		//if brfst_net_sale_qty is null, zero, negative, or NaN, function returns null
		if(!brfst_net_sale_qty
			|| brfst_net_sale_qty <= 0
			|| isNaN(brfst_net_sale_qty)){
				return null;
			}

		//calculate breakfast average check, has two decimal places
		average_check =
				exports.dec_places((brfst_net_sale_amt / brfst_net_sale_qty), 2);

		return average_check;
	};

	/*****************************************************************************
	** Name:				cshCalcAvgDThruCheck
	** Purpose:			calculates drivethru average check
	** Formerly:		cr125
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		dt_net_sale_amt	- drivethru net sale amount
	**		dt_net_sale_qty	- drivethru net sale quantity
	**
	** Returns:
	**		drivethru average check
	*/

	exports.cshCalcAvgDThruCheck = function(dt_net_sale_amt, dt_net_sale_qty) {

		var average_check = 0;

		//if dt_net_sale_amt is null, negative, or NaN, function returns null
		if(dt_net_sale_amt == null|| dt_net_sale_amt < 0 || isNaN(dt_net_sale_amt)){
			return null;
		}
		//if dt_net_sale_qty is null, zero, negative, or NaN, function returns null
		if(dt_net_sale_qty == null
			|| dt_net_sale_qty <= 0
			|| isNaN(dt_net_sale_qty)){
				return null;
			}

		//calculate drivethru average check, has two decimal places
		average_check = exports.dec_places((dt_net_sale_amt / dt_net_sale_qty), 2);

		return average_check;
	};

	/*****************************************************************************
	** Name:				cshCalcStWideCashOS
	** Purpose:			calculates storewide cash over/short
	** Formerly:		cr126
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		counted_cash_stwide		- counted storewide cash
	**		expected_cash_stwide	- expected storewide cash
	**
	** Returns:
	**		storewide cash over/short
	*/

	exports.cshCalcStWideCashOS =
			function(counted_cash_stwide, expected_cash_stwide) {

		var cash_over_short = 0;

		//check for null or NaN. If found, return 0
		counted_cash_stwide = exports.ckForNullNaN(counted_cash_stwide);
		expected_cash_stwide = exports.ckForNullNaN(expected_cash_stwide);

		//calculate storewide cash over/short, has two decimal places
		cash_over_short =
				exports.dec_places((counted_cash_stwide - expected_cash_stwide), 2);

		return cash_over_short;
	};

	/*****************************************************************************
	** Name:				invCalcRawUnitsSold
	** Purpose:			calculate raw units sold
	**							calculates the units usage of a raw item given the number
	**							of servings used in sold units of a particular menu item
	**							in which the raw item is an ingredient
	** Formerly:		cr127
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		raw_servings_sold	- raw servings sold
	**		uom_servg_qty			- unit of measure serving quantity
	**
	** Returns:
	**		raw units sold
	*/

	exports.invCalcRawUnitsSold = function(raw_servings_sold, uom_servg_qty) {

		var raw_units_sold = 0;

		//if uom_servg_qty is null, zero, or NaN, function returns null
		if(uom_servg_qty == null || uom_servg_qty == 0 || isNaN(uom_servg_qty)){
				return null;
			}

		//check for null or NaN. If found, return 0
		raw_servings_sold = exports.ckForNullNaN(raw_servings_sold);

		//calculate raw units sold, has two decimal places
		raw_units_sold =
				exports.dec_places((raw_servings_sold / uom_servg_qty), 2);

		return raw_units_sold;
	};

	/*****************************************************************************
	** Name:				invCalcRawUnitsCoop
	** Purpose:			calculate raw units coop
	**							calculates the units usage of a raw item given the number
	**							of servings used in coop units of a particular menu item
	**							in which the raw item is an ingredient
	** Formerly:		cr128
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		raw_servings_coop	- raw servings coop
	**		uom_servg_qty			- unit of measure serving quantity
	**
	** Returns:
	**		raw units coop
	*/

	exports.invCalcRawUnitsCoop = function(raw_servings_coop, uom_servg_qty) {

		var raw_units_coop = 0;

		//if uom_servg_qty is null, zero, or NaN, function returns null
		if(uom_servg_qty == null || uom_servg_qty == 0 || isNaN(uom_servg_qty)){
			return null;
		}

		//check for null or NaN. If found, return 0
		raw_servings_coop = exports.ckForNullNaN(raw_servings_coop);

		//calculate raw units coop, has two decimal places
		raw_units_coop =
				exports.dec_places((raw_servings_coop / uom_servg_qty), 2);

		return raw_units_coop;
	};

	/*****************************************************************************
	** Name:				invCalcRawUnitsLsm
	** Purpose:			calculate raw units lsm
	**							calculates the units usage of a raw item given the number
	**							of servings used in lsm units of a particular menu item
	**							in which the raw item is an ingredient
	** Formerly:		cr129
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		raw_servings_lsm	- raw servings lsm
	**		uom_servg_qty			- unit of measure serving quantity
	**
	** Returns:
	**		raw units lsm
	*/

	exports.invCalcRawUnitsLsm = function(raw_servings_lsm, uom_servg_qty) {

		var raw_units_lsm = 0;

		//if uom_servg_qty is null, zero, or NaN, function returns null
		if(uom_servg_qty == null || uom_servg_qty == 0 || isNaN(uom_servg_qty)){
			return null;
		}

		//check for null or NaN. If found, return 0
		raw_servings_lsm = exports.ckForNullNaN(raw_servings_lsm);

		//calculate raw units lsm, has two decimal places
		raw_units_lsm = exports.dec_places((raw_servings_lsm / uom_servg_qty), 2);

		return raw_units_lsm;
	};

	/*****************************************************************************
	** Name:				invCalcRawUnitsCompWst
	** Purpose:			calculate raw units completed waste
	**							calculates the units usage of a raw item given the number
	**							of servings used in completed waste units of a particular
	**							menu item in which the raw item is an ingredient
	** Formerly:		cr130
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		raw_servings_compl_waste	- raw servings completed waste
	**		uom_servg_qty							- unit of measure serving quantity
	**
	** Returns:
	**		raw units completed waste
	*/

	exports.invCalcRawUnitsCompWst =
			function(raw_servings_compl_waste, uom_servg_qty) {

		var raw_units_comp_wst = 0;

		//if uom_servg_qty is null, zero, or NaN, function returns null
		if(uom_servg_qty == null	|| uom_servg_qty == 0 || isNaN(uom_servg_qty)){
			return null;
		}

		//check for null or NaN. If found, return 0
		raw_servings_compl_waste = exports.ckForNullNaN(raw_servings_compl_waste);

		//calculate raw units completed waste, has two decimal places
		raw_units_comp_wst =
				exports.dec_places((raw_servings_compl_waste / uom_servg_qty), 2);

		return raw_units_comp_wst;
	};

	/*****************************************************************************
	** Name:				cshCalcStWideForvDiff
	** Purpose:			calculates storewide forever difference
	** Formerly:		cr132
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		rolovr_factor_amt		- rollover factor amount
	**		tot_curr_forv_amt		- total current forever amount
	**		tot_pre_forv_amt		- total previous forever amount
	**		reg_insrt_forv_amt	- register insert forever amount
	**		remv_prev_forv_amt	- removal previous forever amount
	**		remv_diff_forv_amt	- removal difference forever amount
	**
	** Returns:
	**		storewide forever difference
	*/

	exports.cshCalcStWideForvDiff = function(rolovr_factor_amt,
																					 tot_curr_forv_amt,
																					 tot_pre_forv_amt,
																					 reg_insrt_forv_amt,
																					 remv_prev_forv_amt,
																					 remv_diff_forv_amt) {

		var storewide_forever_diff = 0;

		//check for nulls, negatives or NaN. If found, return 0
		rolovr_factor_amt = exports.ckForNullNaN(rolovr_factor_amt);
		tot_curr_forv_amt = exports.ckForNullNaN(tot_curr_forv_amt);
		tot_pre_forv_amt = exports.ckForNullNaN(tot_pre_forv_amt);
		reg_insrt_forv_amt = exports.ckForNullNaN(reg_insrt_forv_amt);
		remv_prev_forv_amt = exports.ckForNullNaN(remv_prev_forv_amt);
		remv_diff_forv_amt = exports.ckForNullNaN(remv_diff_forv_amt);

		//calculate storewide forever difference
		storewide_forever_diff = rolovr_factor_amt
													 + tot_curr_forv_amt
													 - tot_pre_forv_amt
													 - reg_insrt_forv_amt
													 + remv_prev_forv_amt
													 + remv_diff_forv_amt;

		//storewide_forever_diff has two decimal places
		storewide_forever_diff = exports.dec_places(storewide_forever_diff, 2);

		return storewide_forever_diff;
	};

	/*****************************************************************************
	** Name:				cshCalcStWideAllNetSales
	** Purpose:			calculates storewide all net sales
	** Formerly:		cr133
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		forv_diff_storewide	- forever difference storewide
	**		day_pos_ovring_amt	- day pos overring amount
	**		day_pos_refund_amt	- day pos refund amount
	**		cashless_ref_amt		- cashless refund amount
	**		tot_oth_recp_amt		- total other receipt amount
	**		tot_sold_gcert_amt	- total sold gift certificate amount
	**		gcard_sold_amt			- gift card sold amount
	**		adj_ref_ovring_amt	- adjusted refund overring amount
	**		day_eat_in_tax_amt	- day eat in tax amount
	**		day_takeout_tax_amt	- day take out tax amount
	**		day_garden_tax_amt	- day garden tax amount
	**
	** Returns:
	**		storewide all net sales
	*/

	exports.cshCalcStWideAllNetSales = function(forv_diff_storewide,
																							day_pos_ovring_amt,
																							day_pos_refund_amt,
																							cashless_ref_amt,
																							tot_oth_recp_amt,
																							tot_sold_gcert_amt,
																							gcard_sold_amt,
																							adj_ref_ovring_amt,
																							day_eat_in_tax_amt,
																							day_takeout_tax_amt,
																							day_garden_tax_amt) {

		var storewide_all_net_sales = 0;

		//check for nulls, negatives or NaN. If found, return 0
		forv_diff_storewide = exports.ckForNullNaN(forv_diff_storewide);
		day_pos_ovring_amt = exports.ckForNullNaN(day_pos_ovring_amt);
		day_pos_refund_amt = exports.ckForNullNaN(day_pos_refund_amt);
		cashless_ref_amt = exports.ckForNullNaN(cashless_ref_amt);
		tot_oth_recp_amt = exports.ckForNullNaN(tot_oth_recp_amt);
		tot_sold_gcert_amt = exports.ckForNullNaN(tot_sold_gcert_amt);
		gcard_sold_amt = exports.ckForNullNaN(gcard_sold_amt);
		adj_ref_ovring_amt = exports.ckForNullNaN(adj_ref_ovring_amt);
		day_eat_in_tax_amt = exports.ckForNullNaN(day_eat_in_tax_amt);
		day_takeout_tax_amt = exports.ckForNullNaN(day_takeout_tax_amt);
		day_garden_tax_amt = exports.ckForNullNaN(day_garden_tax_amt);

		//calculate storewide all net sales
		storewide_all_net_sales = forv_diff_storewide
														- day_pos_ovring_amt
														- day_pos_refund_amt
														- cashless_ref_amt
														- tot_oth_recp_amt
														- tot_sold_gcert_amt
														- gcard_sold_amt
														- adj_ref_ovring_amt
														- day_eat_in_tax_amt
														- day_takeout_tax_amt
														- day_garden_tax_amt;

		//storewide_all_net_sales has two decimal places
		storewide_all_net_sales = exports.dec_places(storewide_all_net_sales, 2);

		return storewide_all_net_sales;
	};

	/*****************************************************************************
	** Name:				cshCalcGrossSales
	** Purpose:			calculates gross sales
	** Formerly:		cr134
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		forv_diff_stwide		- forever difference storewide
	**		day_pos_ovring_amt	- day pos overring amount
	**		day_pos_refund_amt	- day pos refund amount
	**		cashless_ref_amt		- cashless refund amount
	**		tot_oth_recp_amt		- total other receipts amount
	**		tot_sold_gcert_amt	- total sold gift certificate amount
	**		gcard_sold_amt			- giftcard sold amount
	**		adj_ref_ovring_amt	- adjusted refund overring amount
	**
	** Returns:
	**		storewide gross sales
	*/

	exports.cshCalcGrossSales = function(forv_diff_stwide,
																			 day_pos_ovring_amt,
																			 day_pos_refund_amt,
																			 cashless_ref_amt,
																			 tot_oth_recp_amt,
																			 tot_sold_gcert_amt,
																			 gcard_sold_amt,
																			 adj_ref_ovring_amt) {

		var storewide_gross_sales = 0;

		//check for null or NaN. If found, return 0
		forv_diff_stwide = exports.ckForNullNaN(forv_diff_stwide);
		day_pos_ovring_amt = exports.ckForNullNaN(day_pos_ovring_amt);
		day_pos_refund_amt = exports.ckForNullNaN(day_pos_refund_amt);
		cashless_ref_amt = exports.ckForNullNaN(cashless_ref_amt);
		tot_oth_recp_amt = exports.ckForNullNaN(tot_oth_recp_amt);
		tot_sold_gcert_amt = exports.ckForNullNaN(tot_sold_gcert_amt);
		gcard_sold_amt = exports.ckForNullNaN(gcard_sold_amt);
		adj_ref_ovring_amt = exports.ckForNullNaN(adj_ref_ovring_amt);

		//calculate storewide gross sales
		storewide_gross_sales = forv_diff_stwide
													- day_pos_ovring_amt
													- day_pos_refund_amt
													- cashless_ref_amt
													- tot_oth_recp_amt
													- tot_sold_gcert_amt
													- gcard_sold_amt
													- adj_ref_ovring_amt;

		//storewide_gross_sales has two decimal places
		storewide_gross_sales = exports.dec_places(storewide_gross_sales, 2);

		return storewide_gross_sales;
	};

	// Formerly:		cr138 - CALCULATE MINIMUM TAX RANGE - NOT USED
	// Formerly:		cr139 - CALCULATE MAXIMUM TAX RANGE - NOT USED

	/*****************************************************************************
	** Name:				cshCalcPromoOSAmt
	** Purpose:			calculates promo over/short amount
	** Formerly:		cr140
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		day_adj_promo_qty	- manually counted quantity of promo orders
	**		day_pos_promo_qty	- pos recorded quantity of promo orders
	**
	** Returns:
	**		promo over/short amount
	*/

	exports.cshCalcPromoOSAmt = function(day_adj_promo_qty, day_pos_promo_qty) {

		var promo_over_short = 0;

		//check for null or NaN. If found, return 0
		day_adj_promo_qty = exports.ckForNullNaN(day_adj_promo_qty);
		day_pos_promo_qty = exports.ckForNullNaN(day_pos_promo_qty);

		//calculate promo over/short, has two decimal places
		promo_over_short =
				exports.dec_places((day_adj_promo_qty - day_pos_promo_qty), 2);

		return promo_over_short;
	};

	/*****************************************************************************
	** Name:				cshCalcMenuItemDolSold
	** Purpose:			calculates sales dollars for a menu item
	** Formerly:		cr143
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		menu_item_units			- number of units sold of a menu item
	**		menu_item_eff_price	- effective price of the menu item
	**
	** Returns:
	**		sales dollars for a menu item
	*/

	exports.cshCalcMenuItemDolSold =
	function(menu_item_units, menu_item_eff_price) {

		var menu_item_sales_doll = 0;

		//check for null or NaN. If found, return 0
		menu_item_units = exports.ckForNullNaN(menu_item_units);
		menu_item_eff_price = exports.ckForNullNaN(menu_item_eff_price);

		//calculate promo over/short, has two decimal places
		menu_item_sales_doll =
				exports.dec_places((menu_item_units * menu_item_eff_price), 2);

		return menu_item_sales_doll;
	};

	/*****************************************************************************
	** Name:				cshCalcSalesInThous
	** Purpose:			calculates sales in thousands
	** Formerly:		cr144
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		sales_dollars	- sales dollars
	**
	** Returns:
	**		sales in thousands
	*/

	exports.cshCalcSalesInThous =	function(sales_dollars) {

		var sales_in_thousands = 0;

		//if sales_dollars is null, negative, or NaN, function returns null
		if(sales_dollars == null	|| sales_dollars < 0 || isNaN(sales_dollars)){
			return null;
		}

		//calculate sales in thousands
		sales_in_thousands = sales_dollars / 1000;

		return sales_in_thousands;
	};

	/*****************************************************************************
	** Name:				invCalcReordUnitsOrd
	** Purpose:			calculate reorder units ordered
	** Formerly:		cr146
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		cases								- cases
	**		activ_uom_case_qty	- active unit of measure case quantity
	**
	** Returns:
	**		reorder units ordered
	*/

	exports.invCalcReordUnitsOrd = function(cases, activ_uom_case_qty) {

		var reord_units_ord = 0;

		//if cases is null, negative, or NaN, function returns null
		if(cases == null	|| cases < 0 || isNaN(cases)){
			return null;
		}
		//if activ_uom_case_qty is null, zero, negative or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//calculate reorder units ordered, has two decimal places
		reord_units_ord = exports.dec_places((cases * activ_uom_case_qty), 2);

		return reord_units_ord;
	};

	/*****************************************************************************
	** Name:				invCalcReordCasesOrd
	** Purpose:			calculate reorder cases ordered
	** Formerly:		cr147
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		raw_item_order_qty	- raw item order quantity
	**		activ_uom_case_qty	- active unit of measure case quantity
	**
	** Returns:
	**		reorder cases ordered
	*/

	exports.invCalcReordCasesOrd =
			function(raw_item_order_qty, activ_uom_case_qty) {

		var reord_cases_ord = 0;

		//if raw_item_order_qty is null, negative, or NaN, function returns null
		if(raw_item_order_qty == null
			|| raw_item_order_qty < 0
			|| isNaN(raw_item_order_qty)){
				return null;
		}
		//if activ_uom_case_qty is null, zero, negative or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//calculate reorder cases ordered, round up to nearest full case
		reord_cases_ord = Math.ceil(raw_item_order_qty / activ_uom_case_qty);

		return reord_cases_ord;
	};

	/*****************************************************************************
	** Name:				invCalcVarNonProdNet
	** Purpose:			calculate variance non-product net
	**							Calculates the dollar variance of: daily non-product sales
	**							based on price extensions of non-product menu item units sold
	**							versus non-product sales amount recorded by the POS,
	**							adjusted by accounting
	** Formerly:		cr151
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		computed_non_product_net	- computed non-product net
	**		non_prod_sales_amt				- non-product sales amount
	**
	** Returns:
	**		variance non-product net
	*/

	exports.invCalcVarNonProdNet =
			function(computed_non_product_net, non_prod_sales_amt) {

		var var_non_prod_net = 0;

		//check for null or NaN. If found, return 0
		computed_non_product_net =
				exports.ckForNullNaN(computed_non_product_net);
		non_prod_sales_amt = exports.ckForNullNaN(non_prod_sales_amt);

		//calculate variance product net, has two decimal places
		var_non_prod_net =
				exports.dec_places((computed_non_product_net - non_prod_sales_amt), 2);

		if(var_non_prod_net < 0) {
			var_non_prod_net = -var_non_prod_net;
		}

		return var_non_prod_net;
	};

	/*****************************************************************************
	** Name:				cshCalcVarAllNet
	** Purpose:			calculates variance all net
	**							variance of daily sales based on price extensions of menu
	**							items sold versus daily sales based on pos/cash sheet figures
	**
	** Formerly:		cr152
	** Author:			JEG 12/09/14
	**
	** Parameters:
	**		computed_all_net	- computed all net
	**		adj_net_sales_amt	- actual all net
	**
	** Returns:
	**		variance all net
	*/

	exports.cshCalcVarAllNet = function(computed_all_net, adj_net_sales_amt) {

		var variance_all_net = 0;

		//check for null or NaN. If found, return 0
		computed_all_net = exports.ckForNullNaN(computed_all_net);
		adj_net_sales_amt = exports.ckForNullNaN(adj_net_sales_amt);

		//calculate variance all net, has two decimal places
		variance_all_net =
				exports.dec_places((computed_all_net - adj_net_sales_amt), 2);

		//if variance_all_net is negative, convert to positive
		if(variance_all_net < 0){
			variance_all_net = -variance_all_net;
		}

		return variance_all_net;
	};

	/*****************************************************************************
	** Name:				invCalcBldToCases
	** Purpose:			calculate build to cases
	** Formerly:		cr155
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		build_to_units			- build to units
	**		activ_uom_case_qty	- active unit of measure case quantity
	**
	** Returns:
	**		build to cases
	*/

	exports.invCalcBldToCases =	function(build_to_units, activ_uom_case_qty) {

		var build_to_cases = 0;

		//if build_to_units is null, negative, or NaN, function returns null
		if(build_to_units == null || build_to_units < 0 || isNaN(build_to_units)){
				return null;
		}
		//if activ_uom_case_qty is null, zero, negative or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//calculate build to cases
		build_to_cases =
				Math.ceil(build_to_units / activ_uom_case_qty);

		return build_to_cases;
	};

	/*****************************************************************************
	** Name:				invCalcBufDollars
	** Purpose:			calculate buffer dollars
	** Formerly:		cr156
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		actual_projected_sales	- actual projected sales
	**		buffer_pct							- buffer percent
	**															assumes 15% is passed as 0.15
	**
	** Returns:
	**		buffer dollars
	*/

	exports.invCalcBufDollars =	function(actual_projected_sales, buffer_pct) {

		var buffer_dollars = 0;

		//if actual_projected_sales is null, negative, or NaN, function returns null
		if(actual_projected_sales == null
			|| actual_projected_sales < 0
			|| isNaN(actual_projected_sales)){
				return null;
		}
		//if buffer_pct is null, negative or NaN, function returns null
		if(buffer_pct == null || buffer_pct < 0 || isNaN(buffer_pct)){
			return null;
		}

		//calculate buffer dollars, has two decimal places
		buffer_dollars =
				exports.dec_places((actual_projected_sales * buffer_pct), 2);

		return buffer_dollars;
	};

	/*****************************************************************************
	** Name:				invCalcReordUnits
	** Purpose:			calculate reorder units
	** Formerly:		cr158
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		build_to_units	- build to units
	**		units_on_hand		- units on hand
	**
	** Returns:
	**		reorder units
	*/

	exports.invCalcReordUnits =	function(build_to_units, units_on_hand) {

		var reorder_units = 0;

		//if build_to_units is null, negative, or NaN, function returns null
		if(build_to_units == null || build_to_units < 0 || isNaN(build_to_units)){
				return null;
			}
		//if units_on_hand is null, negative or NaN, function returns null
		if(units_on_hand == null || units_on_hand < 0 || isNaN(units_on_hand)){
			return null;
		}

		//calculate reorder units, round up any fractional amount
		reorder_units = Math.ceil(build_to_units - units_on_hand);

		return reorder_units;
	};

	/*****************************************************************************
	** Name:				invCalcCasesToOrd
	** Purpose:			calculate cases to order
	** Formerly:		cr159
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		reorder_units				- reorder units
	**		activ_uom_case_qty	- active unit of measure case quantity
	**
	** Returns:
	**		cases to order
	*/

	exports.invCalcCasesToOrd =	function(reorder_units, activ_uom_case_qty) {

		var cases_to_order = 0;

		//if reorder_units is null, negative, or NaN, function returns null
		if(reorder_units == null || reorder_units < 0 || isNaN(reorder_units)){
			return null;
		}
		//if activ_uom_case_qty is null, zero, negative or NaN, function returns null
		if(activ_uom_case_qty == null
			|| activ_uom_case_qty <= 0
			|| isNaN(activ_uom_case_qty)){
				return null;
		}

		//calculate cases to order, round up any fractional amount
		cases_to_order = Math.ceil(reorder_units / activ_uom_case_qty);

		return cases_to_order;
	};

	/*****************************************************************************
	** Name:				invCalcRawItemCostPerServ
	** Purpose:			calculate the cost of one serving of raw item
	** Formerly:		cr163
	** Author:			JEG 12/02/14
	**
	** Parameters:
	**		raw_item_unit_amt - price of one unit of raw item
	**		uom_servg_qty			- servings per unit of measure factor
	**
	** Returns:
	**		cost of one serving of raw item
	*/

	exports.invCalcRawItemCostPerServ =
			function(raw_item_unit_amt, uom_servg_qty) {

		var raw_item_cost_per_serv = 0;

		//if uom_servg_qty is null, negative, or NaN, function returns null
		if(uom_servg_qty == null || uom_servg_qty == 0 || isNaN(uom_servg_qty)){
			return null;
		}

		//check for null or NaN. If found, return 0
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);

		//calculate cost of one serving of raw item, has two decimal places
		raw_item_cost_per_serv =
				exports.dec_places((raw_item_unit_amt / uom_servg_qty), 2);

		return raw_item_cost_per_serv;
	};

	/*****************************************************************************
	** Name:				invCalcRawSrvgsUsed
	** Purpose:			calculate raw servings used
	**							number of servings of a raw item used in sold, promo'd for
	**							lsm, promo'd for coop, and/or wasted units of a particular
	**							menu item in which the raw item is an ingredient
	** Formerly:		cr164
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		raw_servings_sold					- number of servings of the raw item
	**																used in sold units
	**		raw_servings_lsm					- number of servings of the raw item
	**																used in promo'd for lsm units
	**		raw_servings_coop					- number of servings of the raw item
	**																used in promo'd for coop units
	**		raw_servings_compl_waste	- number of servings of the raw item
	**																used in waste units
	**
	** Returns:
	**		raw servings used
	*/

	exports.invCalcRawSrvgsUsed = function(raw_servings_sold,
																				 raw_servings_lsm,
																				 raw_servings_coop,
																				 raw_servings_compl_waste) {

		var raw_srvngs_used = 0;

		//check for null or NaN. If found, return 0
		raw_servings_sold = exports.ckForNullNaN(raw_servings_sold);
		raw_servings_lsm = exports.ckForNullNaN(raw_servings_lsm);
		raw_servings_coop = exports.ckForNullNaN(raw_servings_coop);
		raw_servings_compl_waste = exports.ckForNullNaN(raw_servings_compl_waste);

		//calculate raw servings used, has two decimal places
		raw_srvngs_used = raw_servings_sold
										+ raw_servings_lsm
										+ raw_servings_coop
										+ raw_servings_compl_waste;

		raw_srvngs_used = exports.dec_places(raw_srvngs_used, 2);

		return raw_srvngs_used;
	};

	/*****************************************************************************
	** Name:				invCalcRawSrvgsSold
	** Purpose:			calculate raw servings sold
	**							the number of servings of a raw item used in sold units
	**							of a particular menu item in which the raw item is an
	**							ingredient. Calculation is based on the units sold
	**							quantity of the menu item and the number of servings of
	**							the raw item which are specified in the menu item's recipe
	** Formerly:		cr165
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		menu_units_sold		- number of menu units sold
	**		servg_factor_qty	- number of servings of raw ingredient
	**												used in menu recipe
	**
	** Returns:
	**		raw servings sold
	*/

	exports.invCalcRawSrvgsSold = function(menu_units_sold, servg_factor_qty) {

		var raw_srvngs_sold = 0;

		//check for null or NaN. If found, return 0
		menu_units_sold = exports.ckForNullNaN(menu_units_sold);
		servg_factor_qty = exports.ckForNullNaN(servg_factor_qty);

		//calculate raw servings sold, has two decimal places
		raw_srvngs_sold =
				exports.dec_places((menu_units_sold * servg_factor_qty), 2);

		return raw_srvngs_sold;
	};

	/*****************************************************************************
	** Name:				invCalcRawSrvgsCoop
	** Purpose:			calculate raw servings coop
	**							the number of servings of a raw item used in promo'd for
	**							coop units of a particular menu item in which the raw item
	**							is an ingredient. Calculation is based on the units promo'd
	**							for coop quantity of the menu item and the number of
	**							servings of the raw item which are specified in the menu
	**							item's recipe
	** Formerly:		cr166
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		menu_units_coop		- number of menu units promo'd for coop
	**		servg_factor_qty	- number of servings of raw ingredient
	**												used in menu recipe
	**
	** Returns:
	**		raw servings coop
	*/

	exports.invCalcRawSrvgsCoop = function(menu_units_coop, servg_factor_qty) {

		var raw_srvngs_coop = 0;

		//check for null or NaN. If found, return 0
		menu_units_coop = exports.ckForNullNaN(menu_units_coop);
		servg_factor_qty = exports.ckForNullNaN(servg_factor_qty);

		//calculate raw servings coop, has two decimal places
		raw_srvngs_coop =
				exports.dec_places((menu_units_coop * servg_factor_qty), 2);

		return raw_srvngs_coop;
	};

	/*****************************************************************************
	** Name:				invCalcRawSrvgsLsm
	** Purpose:			calculate raw servings lsm
	**							the number of servings of a raw item used in promo'd for
	**							lsm units of a particular menu item in which the raw item
	**							is an ingredient. Calculation is based on the units promo'd
	**							for lsm quantity of the menu item and the number of
	**							servings of the raw item which are specified in the menu
	**							item's recipe
	** Formerly:		cr167
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		menu_units_lsm		- number of menu units promo'd for lsm
	**		servg_factor_qty	- number of servings of raw ingredient
	**												used in menu recipe
	**
	** Returns:
	**		raw servings lsm
	*/

	exports.invCalcRawSrvgsLsm = function(menu_units_lsm, servg_factor_qty) {

		var raw_srvngs_lsm = 0;

		//check for null or NaN. If found, return 0
		menu_units_lsm = exports.ckForNullNaN(menu_units_lsm);
		servg_factor_qty = exports.ckForNullNaN(servg_factor_qty);

		//calculate raw servings lsm, has two decimal places
		raw_srvngs_lsm = exports.dec_places((menu_units_lsm * servg_factor_qty), 2);

		return raw_srvngs_lsm;
	};

	/*****************************************************************************
	** Name:				invCalcRawSrvgsCompWst
	** Purpose:			calculate raw servings completed waste
	**							the number of servings of a raw item used in waste units
	**							of a particular menu item in which the raw item is an
	**							ingredient. Calculation is based on the units wasted
	**							quantity of the menu item and the number of servings of
	**							the raw item which are specified in the menu item's recipe
	** Formerly:		cr168
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		menu_units_waste	- number of menu units wasted
	**		complt_waste_cd		- completed waste code, Y or N count as waste
	**		servg_factor_qty	- number of servings of raw ingredient
	**												used in menu recipe
	**
	** Returns:
	**		raw servings completed waste
	*/

	exports.invCalcRawSrvgsCompWst =
			function(menu_units_waste,complt_waste_cd, servg_factor_qty) {

		var raw_srvngs_comp_waste = 0;

		//check for null or NaN. If found, return 0
		menu_units_waste = exports.ckForNullNaN(menu_units_waste);
		servg_factor_qty = exports.ckForNullNaN(servg_factor_qty);

		//calculate raw servings completed waste, has two decimal places
		if(complt_waste_cd == 'Y'){
			raw_srvngs_comp_waste =
					exports.dec_places((menu_units_waste * servg_factor_qty), 2);
		}
		else {
			raw_srvngs_comp_waste = 0;
		}

		return raw_srvngs_comp_waste;
	};

	/*****************************************************************************
	** Name:				invCalcComputedUsage
	** Purpose:			calculate computed usage
	** Formerly:		cr169
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		usag_sale_fact_amt	- usage sales factor amount
	**		sales_in_thousands	- sales in thousands
	**
	** Returns:
	**		computed usage
	*/

	exports.invCalcComputedUsage =
			function(usag_sale_fact_amt, sales_in_thousands) {

		var computed_usage = 0;

		//if usag_sale_fact_amt is null, negative, or NaN, function returns null
		if(usag_sale_fact_amt == null
			|| usag_sale_fact_amt < 0
			|| isNaN(usag_sale_fact_amt)){
				return null;
		}
		//if sales_in_thousands is null, negative, or NaN, function returns null
		if(sales_in_thousands == null
			|| sales_in_thousands < 0
			|| isNaN(sales_in_thousands)){
				return null;
		}

		//calculate computed usage, has two decimal places
		computed_usage =
				exports.dec_places((usag_sale_fact_amt * sales_in_thousands), 2);

		return computed_usage;
	};

	/*****************************************************************************
	** Name:				invCalcTheoEndInvPmix
	** Purpose:			calculate theoretical ending inventory/pmix
	**							the theoretical ending inventory for a raw item using a
	**							computed theoretical usage based on pmix
	** Formerly:		cr170
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		start_inventory						- starting inventory
	**		raw_item_purch_qty				- raw item purchase quantity
	**		transf_in_qty							- transfer in quantity
	**		transf_out_qty						- transfer out quantity
	**		raw_waste_qty							- raw waste quantity
	**		raw_promo_qty							- raw promo quantity
	**		calculated_raw_item_usage	- calculated raw item usage
	**
	** Returns:
	**		theoretical ending inventory/pmix
	*/

	exports.invCalcTheoEndInvPmix = function(start_inventory,
																					 raw_item_purch_qty,
																					 transf_in_qty,
																					 transf_out_qty,
																					 raw_waste_qty,
																					 raw_promo_qty,
																					 calculated_raw_item_usage) {

		var theoretical_ending_inv_pmix = 0;

		//check for nulls, negatives or NaN. If found, return 0
		start_inventory = exports.ckForNullNaN(start_inventory);
		raw_item_purch_qty = exports.ckForNullNaN(raw_item_purch_qty);
		transf_in_qty = exports.ckForNullNaN(transf_in_qty);
		transf_out_qty = exports.ckForNullNaN(transf_out_qty);
		raw_waste_qty = exports.ckForNullNaN(raw_waste_qty);
		raw_promo_qty = exports.ckForNullNaN(raw_promo_qty);
		calculated_raw_item_usage =	exports.ckForNullNaN(calculated_raw_item_usage);

		//calculate theoretical ending inventory/pmix, has two decimal places
		theoretical_ending_inv_pmix = start_inventory
																+ raw_item_purch_qty
																+ transf_in_qty
																- transf_out_qty
																- raw_waste_qty
																- raw_promo_qty
																- calculated_raw_item_usage;

		theoretical_ending_inv_pmix =
				exports.dec_places(theoretical_ending_inv_pmix, 2);

		return theoretical_ending_inv_pmix;
	};

	/*****************************************************************************
	** Name:				invCalcTheoEndInvFctr
	** Purpose:			calculate theoretical ending inventory/factor
	**							the theoretical ending inventory for a raw item using a
	**							computed theoretical usage based on factor
	** Formerly:		cr171
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		start_inventory			- starting inventory
	**		raw_item_purch_qty	- raw item purchase quantity
	**		transf_in_qty				- transfer in quantity
	**		transf_out_qty			- transfer out quantity
	**		raw_waste_qty				- raw waste quantity
	**		raw_promo_qty				- raw promo quantity
	**		computed_usage			- computed usage
	**
	** Returns:
	**		theoretical ending inventory/factor
	*/

	exports.invCalcTheoEndInvFctr = function(start_inventory,
																					 raw_item_purch_qty,
																					 transf_in_qty,
																					 transf_out_qty,
																					 raw_waste_qty,
																					 raw_promo_qty,
																					 computed_usage) {

		var theoretical_ending_inv_fctr = 0;

		//check for null or NaN. If found, return 0
		start_inventory = exports.ckForNullNaN(start_inventory);
		raw_item_purch_qty = exports.ckForNullNaN(raw_item_purch_qty);
		transf_in_qty = exports.ckForNullNaN(transf_in_qty);
		transf_out_qty = exports.ckForNullNaN(transf_out_qty);
		raw_waste_qty = exports.ckForNullNaN(raw_waste_qty);
		raw_promo_qty = exports.ckForNullNaN(raw_promo_qty);
		computed_usage = exports.ckForNullNaN(computed_usage);

		//calculate theoretical ending inventory/pmix, has two decimal places
		theoretical_ending_inv_fctr = start_inventory
																+ raw_item_purch_qty
																+ transf_in_qty
																- transf_out_qty
																- raw_waste_qty
																- raw_promo_qty
																- computed_usage;

		theoretical_ending_inv_fctr =
				exports.dec_places(theoretical_ending_inv_fctr, 2);

		return theoretical_ending_inv_fctr;
	};

	/*****************************************************************************
	** Name:				cshCalcCoupDiscDolStwide
	** Purpose:			calculate the total of the discount and coupon dollars
	** Formerly:		cr172
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		coupon_dollars		- coupon dollars
	**		discount_dollars	- discount dollars
	**
	** Returns:
	**		total of the discount and coupon dollars
	*/

	exports.cshCalcCoupDiscDolStwide =
			function(coupon_dollars, discount_dollars) {

		var coup_disc_dol_stwide = 0;

		//check for null or NaN. If found, return 0
		coupon_dollars = exports.ckForNullNaN(coupon_dollars);
		discount_dollars = exports.ckForNullNaN(discount_dollars);

		//calculate total of the discount and coupon dollars, has two decimal places
		coup_disc_dol_stwide =
				exports.dec_places((coupon_dollars + discount_dollars), 2);

		return coup_disc_dol_stwide;
	};

	/*****************************************************************************
	** Name:				invCalcInvTrnovrRate
	** Purpose:			calculate the inventory turnover rate
	** Formerly:		cr173
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		cost_of_goods_sold	- cost of goods sold
	**		cost_start_inv			- cost of starting inventory
	**		cost_end_inv				- cost of ending inventory
	**
	** Returns:
	**		inventory turnover rate
	*/

	exports.invCalcInvTrnovrRate =
			function(cost_of_goods_sold, cost_start_inv, cost_end_inv) {

		var inv_trnovr_rate = 0;

		//check for null or NaN. If found, return 0
		cost_of_goods_sold = exports.ckForNullNaN(cost_of_goods_sold);
		cost_start_inv = exports.ckForNullNaN(cost_start_inv);
		cost_end_inv = exports.ckForNullNaN(cost_end_inv);

		//calculate inventory turnover rate, has two decimal places
		if((cost_start_inv + cost_end_inv) == 0){
			inv_trnovr_rate = 0;
		}
		else {
			inv_trnovr_rate =
					cost_of_goods_sold / ((cost_start_inv + cost_end_inv) / 2);

			inv_trnovr_rate = exports.dec_places(inv_trnovr_rate, 2);
		}

		return inv_trnovr_rate;
	};

	/*****************************************************************************
	** Name:				invCalcCostOfGoodsSold
	** Purpose:			calculate the cost of goods sold
	** Formerly:		cr174
	** Author:			JEG 12/10/14
	**
	** Parameters:
	**		starting_inventory		- starting inventory
	**		bill_ledger_subtotal	- bill ledger subtotal
	**		raw_promo_total				- raw promo total
	**		completed_promo_total	- completed promo total
	**		ending_inventory			- ending inventory
	**
	** Returns:
	**		cost of goods sold
	*/

	exports.invCalcCostOfGoodsSold = function(starting_inventory,
																						bill_ledger_subtotal,
																						raw_promo_total,
																						completed_promo_total,
																						ending_inventory) {

		var cost_of_goods_sold = 0;

		//check for null or NaN. If found, return 0
		starting_inventory = exports.ckForNullNaN(starting_inventory);
		bill_ledger_subtotal = exports.ckForNullNaN(bill_ledger_subtotal);
		raw_promo_total = exports.ckForNullNaN(raw_promo_total);
		completed_promo_total = exports.ckForNullNaN(completed_promo_total);
		ending_inventory = exports.ckForNullNaN(ending_inventory);

		//calculate cost of goods sold, has two decimal places
		cost_of_goods_sold = starting_inventory
											 + bill_ledger_subtotal
											 - raw_promo_total
											 - completed_promo_total
											 - ending_inventory;

		cost_of_goods_sold = exports.dec_places(cost_of_goods_sold, 2);

		return cost_of_goods_sold;
	};

	/*****************************************************************************
	** Name:				invCalcPctOfDollars
	** Purpose:			calculate the percent of dollars
	** Formerly:		cr175
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		dollars				- dollars
	**		total_dollars	- total dollars
	**
	** Returns:
	**		percent of dollars
	*/

	exports.invCalcPctOfDollars = function(dollars, total_dollars) {

		var pct_of_dollars = 0;

		//if dollars is null, negative, or NaN, function returns null
		if(dollars == null || dollars < 0 || isNaN(dollars)){
			return null;
		}
		//if total_dollars is null, zero, negative, or NaN, function returns null
		if(total_dollars == null || total_dollars <= 0 || isNaN(total_dollars)){
			return null;
		}

		//calculate percent of dollars, has two decimal places
		pct_of_dollars = exports.dec_places((dollars / total_dollars), 2);

		return pct_of_dollars;
	};

	/*****************************************************************************
	** Name:				invCalcPctOfUnits
	** Purpose:			calculate the percent of units
	** Formerly:		cr176
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		units				- units
	**		total_units	- total units
	**
	** Returns:
	**		percent of units
	*/

	exports.invCalcPctOfUnits = function(units, total_units) {

		var pct_of_units = 0;

		//if units is null, negative, or NaN, function returns null
		if(units == null || units < 0 || isNaN(units)){
			return null;
		}
		//if total_units is null, zero, negative, or NaN, function returns null
		if(total_units == null || total_units <= 0 || isNaN(total_units)){
			return null;
		}

		//calculate percent of units, has two decimal places
		pct_of_units = exports.dec_places((units / total_units), 2);

		return pct_of_units;
	};

	/*****************************************************************************
	** Name:				invCalcRtlConvToCost
	** Purpose:			calculate retail converted to cost
	**							Convert coupon/discount dollars from retail value
	**							to store's cost
	** Formerly:		cr178
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		dollars		- dollars
	**		food_base	- food base
	**
	** Returns:
	**		retail converted to cost
	*/

	exports.invCalcRtlConvToCost = function(dollars, food_base) {

		var rtl_conv_to_cost = 0;

		//check for null or NaN. If found, return 0
		dollars = exports.ckForNullNaN(dollars);
		food_base = exports.ckForNullNaN(food_base);

		//calculate retail converted to cost, has six decimal places
		rtl_conv_to_cost = exports.dec_places((dollars * food_base), 6);

		return rtl_conv_to_cost;
	};

	/*****************************************************************************
	** Name:				invCalcCompCostFood
	** Purpose:			calculate completed cost food
	**							Calculate the food cost of menu items sold given the
	**							number of menu units sold and the menu item food cost
	** Formerly:		cr179
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		menu_units_sold			- number of menu units sold
	**		menu_item_food_cost	- menu item food cost
	**
	** Returns:
	**		completed cost food
	*/

	exports.invCalcCompCostFood = function(menu_units_sold, menu_item_food_cost) {

		var comp_cost_food = 0;

		//check for null or NaN. If found, return 0
		menu_units_sold = exports.ckForNullNaN(menu_units_sold);
		menu_item_food_cost = exports.ckForNullNaN(menu_item_food_cost);

		//calculate completed cost food, has four decimal places
		comp_cost_food =
				exports.dec_places((menu_units_sold * menu_item_food_cost), 4);

		return comp_cost_food;
	};

	/*****************************************************************************
	** Name:				invCalcFoodBase
	** Purpose:			calculate food base
	**							Given the food cost of menu items sold and the extended
	**							retail value of menu items sold, express the former as a
	**							fraction of the latter
	** Formerly:		cr182
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		total_comp_food_cost		- food cost of menu items sold
	**		tot_ext_prod_net_sales	- extended retail value of menu items sold
	**
	** Returns:
	**		food base
	*/

	exports.invCalcFoodBase =
			function(total_comp_food_cost, tot_ext_prod_net_sales) {

		var food_base = 0;

		//if tot_ext_prod_net_sales is null, zero, or NaN, function returns null
		if(tot_ext_prod_net_sales == null
			|| tot_ext_prod_net_sales == 0
			|| isNaN(tot_ext_prod_net_sales)){
				return null;
		}

		//check for null or NaN. If found, return 0
		total_comp_food_cost = exports.ckForNullNaN(total_comp_food_cost);

		//calculate food base, has four decimal places
		food_base =
				exports.dec_places((total_comp_food_cost / tot_ext_prod_net_sales), 4);

		return food_base;
	};

	/*****************************************************************************
	** Name:				invCalcCompWstCostFood
	** Purpose:			calculate completed waste cost for food
	**							Calculate the food cost of menu items wasted given the
	**							number of menu units wasted and the menu item food
	**							waste cost
	** Formerly:		cr183
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		menu_units_waste					- number of menu units wasted
	**		menu_item_food_waste_cost	- menu item food waste cost
	**
	** Returns:
	**		completed waste cost for food
	*/

	exports.invCalcCompWstCostFood =
			function(menu_units_waste, menu_item_food_waste_cost) {

		var comp_waste_cost_food = 0;

		//check for null or NaN. If found, return 0
		menu_units_waste = exports.ckForNullNaN(menu_units_waste);
		menu_item_food_waste_cost = exports.ckForNullNaN(menu_item_food_waste_cost);

		//calculate completed waste cost for food, has four decimal places
		comp_waste_cost_food =
				exports.dec_places((menu_units_waste * menu_item_food_waste_cost), 4);

		return comp_waste_cost_food;
	};

	/*****************************************************************************
	** Name:				invCalcPctFoodBase
	** Purpose:			calculate percent food base
	**							Given the food base, express it as a percentage
	** Formerly:		cr184
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		food_base	- food base
	**
	** Returns:
	**		percent food base
	*/

	exports.invCalcPctFoodBase = function(food_base) {

		var percent_food_base = 0;

		//check for null or NaN. If found, return 0
		food_base = exports.ckForNullNaN(food_base);

		//calculate percent food base, has two decimal places
		percent_food_base = exports.dec_places(food_base, 2);

		return percent_food_base;
	};

	/*****************************************************************************
	** Name:				invCalcRawUnitsCost
	** Purpose:			calculate raw units cost
	**							Calculate the cost of raw units used given the number of
	**							raw units used and the cost of one unit
	** Formerly:		cr185
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		units_used				- number of raw units used
	**		raw_item_unit_amt	- cost of one raw unit
	**
	** Returns:
	**		raw units cost
	*/

	exports.invCalcRawUnitsCost = function(units_used, raw_item_unit_amt) {

		var raw_units_cost = 0;

		//check for null or NaN. If found, return 0
		units_used = exports.ckForNullNaN(units_used);
		raw_item_unit_amt = exports.ckForNullNaN(raw_item_unit_amt);

		//calculate percent food base, has six decimal places
		raw_units_cost = exports.dec_places((units_used * raw_item_unit_amt), 6);

		return raw_units_cost;
	};

	/*****************************************************************************
	** Name:				invCalcQcrCondCost
	** Purpose:			calculate QCR condiment cost
	**							Calculate the difference of cost of condiments used
	**							and the cost of condiments used in completed promo
	** Formerly:		cr186
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		total_condiment_cost - cost of condiments used
	**		total_promo_cond_cost - cost of condiments used in completed promo
	**
	** Returns:
	**		QCR condiment cost
	*/

	exports.invCalcQcrCondCost =
			function(total_condiment_cost, total_promo_cond_cost) {

		var qcr_condiment_cost = 0;

		//check for null or NaN. If found, return 0
		total_condiment_cost = exports.ckForNullNaN(total_condiment_cost);
		total_promo_cond_cost = exports.ckForNullNaN(total_promo_cond_cost);

		//calculate QCR condiment cost, has six decimal places
		qcr_condiment_cost =
				exports.dec_places((total_condiment_cost - total_promo_cond_cost), 6);

		return qcr_condiment_cost;
	};

	/*****************************************************************************
	** Name:				cshCalcExpCashStwide
	** Purpose:			calculate expected cash storewide
	** Formerly:		cr500
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		forv_diff_stwide		- storewide forever difference
	**		day_pos_ovring_amt	- day pos overring amount
	**		day_pos_refund_amt	- day pos refund amount
	**		adj_redm_gcert_amt	- adjust redeemed gift certificate amount
	**		gcard_rdm_amt				- gift card redeemed amount
	**		dy_adj_cr_sale_amt	- day adjusted credit sale amount
	**		cashless_gross_amt	- cashless gross amount
	**		adj_ref_ovring_amt	- adjusted refund overring amount
	**
	** Returns:
	**		expected cash storewide
	*/

	exports.cshCalcExpCashStwide = function(forv_diff_stwide,
																					day_pos_ovring_amt,
																					day_pos_refund_amt,
																					adj_redm_gcert_amt,
																					gcard_rdm_amt,
																					dy_adj_cr_sale_amt,
																					cashless_gross_amt,
																					adj_ref_ovring_amt) {

		var exp_cash_stwide = 0;

		//check for null or NaN. If found, return 0
		forv_diff_stwide = exports.ckForNullNaN(forv_diff_stwide);
		day_pos_ovring_amt = exports.ckForNullNaN(day_pos_ovring_amt);
		day_pos_refund_amt = exports.ckForNullNaN(day_pos_refund_amt);
		adj_redm_gcert_amt = exports.ckForNullNaN(adj_redm_gcert_amt);
		gcard_rdm_amt = exports.ckForNullNaN(gcard_rdm_amt);
		dy_adj_cr_sale_amt = exports.ckForNullNaN(dy_adj_cr_sale_amt);
		cashless_gross_amt = exports.ckForNullNaN(cashless_gross_amt);
		adj_ref_ovring_amt = exports.ckForNullNaN(adj_ref_ovring_amt);

		//calculate expected cash storewide, has two decimal places
		exp_cash_stwide = forv_diff_stwide
										- day_pos_ovring_amt
										- day_pos_refund_amt
										- adj_redm_gcert_amt
										- gcard_rdm_amt
										- dy_adj_cr_sale_amt
										- cashless_gross_amt
										- adj_ref_ovring_amt;

		exp_cash_stwide = exports.dec_places(exp_cash_stwide, 2);

		return exp_cash_stwide;
	};

	/*****************************************************************************
	** Name:				cshCalcCntdCashStwide
	** Purpose:			calculate counted cash storewide
	** Formerly:		cr501
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		day_cash_dpos_amt		- day cash deposit amount
	**		day_crlos_cash_amt	- day crime loss cash amount
	**		day_reim_pcash_amt	- day reimbursed petty cash amount
	**
	** Returns:
	**		counted cash storewide
	*/

	exports.cshCalcCntdCashStwide = function(day_cash_dpos_amt,
																					 day_crlos_cash_amt,
																					 day_reim_pcash_amt) {

		var cntd_cash_stwide = 0;

		//check for null or NaN. If found, return 0
		day_cash_dpos_amt = exports.ckForNullNaN(day_cash_dpos_amt);
		day_crlos_cash_amt = exports.ckForNullNaN(day_crlos_cash_amt);
		day_reim_pcash_amt = exports.ckForNullNaN(day_reim_pcash_amt);

		//calculate expected cash storewide, has two decimal places
		cntd_cash_stwide = day_cash_dpos_amt
										 + day_crlos_cash_amt
										 + day_reim_pcash_amt;

		cntd_cash_stwide = exports.dec_places(cntd_cash_stwide, 2);

		return cntd_cash_stwide;
	};

	/*****************************************************************************
	** Name:				cshCalcDiscCoupOSStwide
	** Purpose:			calculate discount/coupon over/short storewide
	** Formerly:		cr502
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		day_adj_coupon_qty	- day adjusted coupon quantity
	**		daily_coupa_qty			- daily coupon a quantity
	**		daily_coupb_qty			- daily coupon b quantity
	**		daily_coupc_qty			- daily coupon c quantity
	**		daily_coupd_qty			- daily coupon d quantity
	**		daily_coupe_qty			- daily coupon e quantity
	**		day_disc_sale_qty		- day discount sale quantity
	**
	** Returns:
	**		discount/coupon over/short storewide
	*/

	exports.cshCalcDiscCoupOSStwide = function(day_adj_coupon_qty,
																						 daily_coupa_qty,
																						 daily_coupb_qty,
																						 daily_coupc_qty,
																						 daily_coupd_qty,
																						 daily_coupe_qty,
																						 day_disc_sale_qty) {

		var disc_coup_os_stwide = 0;

		//check for null or NaN. If found, return 0
		day_adj_coupon_qty = exports.ckForNullNaN(day_adj_coupon_qty);
		daily_coupa_qty = exports.ckForNullNaN(daily_coupa_qty);
		daily_coupb_qty = exports.ckForNullNaN(daily_coupb_qty);
		daily_coupc_qty = exports.ckForNullNaN(daily_coupc_qty);
		daily_coupd_qty = exports.ckForNullNaN(daily_coupd_qty);
		daily_coupe_qty = exports.ckForNullNaN(daily_coupe_qty);
		day_disc_sale_qty = exports.ckForNullNaN(day_disc_sale_qty);

		//calculate expected cash storewide, has two decimal places
		disc_coup_os_stwide = day_adj_coupon_qty
												- daily_coupa_qty
												- daily_coupb_qty
												- daily_coupc_qty
												- daily_coupd_qty
												- daily_coupe_qty
												- day_disc_sale_qty;

		disc_coup_os_stwide = exports.dec_places(disc_coup_os_stwide, 2);

		return disc_coup_os_stwide;
	};

	// Formerly:		cr503 - CALCULATE PARTIAL CANCEL AVG - EMPLOYEE - NOT USED

	/*****************************************************************************
	** Name:				cshCalcIncDecDlrs
	** Purpose:			calculate increase/decrease dollars
	** Formerly:		cr504
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		current_dollars			- current dollars
	**		historical_dollars	- historical dollars
	**
	** Returns:
	**		increase/decrease dollars
	*/

	exports.cshCalcIncDecDlrs = function(current_dollars, historical_dollars) {

		var inc_dec_dollars = 0;

		//if current_dollars is null, negative, or NaN, function returns null
		if(current_dollars == null
			|| current_dollars < 0
			|| isNaN(current_dollars)){
				return null;
		}
		//if historical_dollars is null, zero, negative, or NaN, function returns null
		if(historical_dollars == null
			|| historical_dollars <= 0
			|| isNaN(historical_dollars)){
				return null;
		}

		//calculate increase/decrease dollars, has two decimal places
		inc_dec_dollars =
				exports.dec_places((current_dollars - historical_dollars), 2);

		return inc_dec_dollars;
	};

	/*****************************************************************************
	** Name:				cshCalcIncDecPct
	** Purpose:			calculate increase/decrease percent
	** Formerly:		cr505
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		inc_dec_dollars			- increase/decrease dollars
	**		historical_dollars	- historical dollars
	**
	** Returns:
	**		increase/decrease percent
	*/

	exports.cshCalcIncDecPct = function(inc_dec_dollars, historical_dollars) {

		var inc_dec_percent = 0;

		//if inc_dec_dollars is null or NaN, function returns null
		if(inc_dec_dollars == null || isNaN(inc_dec_dollars)){
			return null;
		}
		//if historical_dollars is null, zero, negative, or NaN, function returns null
		if(historical_dollars == null
			|| historical_dollars <= 0
			|| isNaN(historical_dollars)){
				return null;
		}

		//calculate increase/decrease percent, has two decimal places
		inc_dec_percent =
				exports.dec_places((inc_dec_dollars / historical_dollars), 2);

		return inc_dec_percent;
	};

	/*****************************************************************************
	** Name:				cshCalcIncDecQty
	** Purpose:			calculate increase/decrease quantity
	** Formerly:		cr506
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		current_qty			- current quantity
	**		historical_qty	- historical quantity
	**
	** Returns:
	**		increase/decrease quantity
	*/

	exports.cshCalcIncDecQty = function(current_qty, historical_qty) {

		var inc_dec_quantity = 0;

		//if current_qty is null, negative, or NaN, function returns null
		if(current_qty == null || current_qty < 0 || isNaN(current_qty)){
			return null;
		}
		//if historical_qty is null, zero, negative, or NaN, function returns null
		if(historical_qty == null || historical_qty <= 0 || isNaN(historical_qty)){
			return null;
		}

		//calculate increase/decrease quantity, has two decimal places
		inc_dec_quantity = exports.dec_places((current_qty - historical_qty), 2);

		return inc_dec_quantity;
	};

	/*****************************************************************************
	** Name:				cshCalcPctProdNet
	** Purpose:			calculate percent of product net
	** Formerly:		cr507 & cr507a
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		dollars			- dollar amount
	**		dec_pl			- number of decimal places in dollars parameter
	**		product_net	- product net
	**
	** Returns:
	**		percent of product net
	*/

	exports.cshCalcPctProdNet = function(dollars, dec_pl, product_net) {

		var pct_prod_net = 0;

		//if product_net is null, zero, or NaN, function returns null
		if(product_net == null || product_net == 0 || isNaN(product_net)){
			return null;
		}

		//check for null or NaN. If found, return 0
		dollars = exports.ckForNullNaN(dollars);

		//calculate percent of product net, set decimal places to dec_pl
		pct_prod_net = exports.dec_places((dollars / product_net), dec_pl);

		return pct_prod_net;
	};

	// Formerly:		cr508 - CALCULATE ALL_NET_SALES - SAME AS cr133

	/*****************************************************************************
	** Name:				cshCalcGiftSoldAmt
	** Purpose:			calculate gift certificate sold amount
	** Formerly:		cr509
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		co_sold_gfta_amt	- gift certificates a sold dollars
	**		co_sold_gftb_amt	- gift certificates b sold dollars
	**
	** Returns:
	**		gift certificate sold amount
	*/

	exports.cshCalcGiftSoldAmt =
			function(co_sold_gfta_amt, co_sold_gftb_amt) {

		var gift_sold_amt = 0;

		//check for null or NaN. If found, return 0
		co_sold_gfta_amt = exports.ckForNullNaN(co_sold_gfta_amt);
		co_sold_gftb_amt = exports.ckForNullNaN(co_sold_gftb_amt);

		//calculate gift certificate sold amount, has two decimal places
		gift_sold_amt =
				exports.dec_places((co_sold_gfta_amt + co_sold_gftb_amt), 2);

		return gift_sold_amt;
	};

	/*****************************************************************************
	** Name:				cshCalcCshlsAllNetSales
	** Purpose:			calculate cashless all net sales
	** Formerly:		cr531
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		cashless_gross_amt	- cashless gross amount
	**		cashless_ref_amt		- cashless refund amount
	**
	** Returns:
	**		cashless all net sales
	*/

	exports.cshCalcCshlsAllNetSales =
			function(cashless_gross_amt, cashless_ref_amt) {

		var cshls_all_net_sales = 0;

		//if cashless_gross_amt is null, negative, or NaN, function returns null
		if(cashless_gross_amt == null
			|| cashless_gross_amt < 0
			|| isNaN(cashless_gross_amt)){
				return null;
		}
		//if cashless_ref_amt is null, negative, or NaN, function returns null
		if(cashless_ref_amt == null
			|| cashless_ref_amt < 0
			|| isNaN(cashless_ref_amt)){
				return null;
		}

		//calculate cashless all net sales, has two decimal places
		cshls_all_net_sales =
				exports.dec_places((cashless_gross_amt - cashless_ref_amt), 2);

		return cshls_all_net_sales;
	};

	/*****************************************************************************
	** Name:				cshCalcStwidePrevForvAmt
	** Purpose:			calculate storewide previous forever amount
	**							Computes the storewide previous forever amount from the
	**							previous day's value and the closing reading of registers
	**							permanently removed the previous day
	** Formerly:		cr700
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		prev_stwide_close_amt	- storewide closing reading for the previous day
	**		rem_reg_close_amt			- accumulated closing reading of all registers
	**														permanently removed the previous day
	**
	** Returns:
	**		storewide previous forever amount
	*/

	exports.cshCalcStwidePrevForvAmt =
			function(prev_stwide_close_amt, rem_reg_close_amt) {

		var stwide_prev_forv_amt = 0;

		//calculate storewide previous forever amount, has two decimal places
		stwide_prev_forv_amt =
				exports.dec_places((prev_stwide_close_amt - rem_reg_close_amt), 2);

		return stwide_prev_forv_amt;
	};

	// Formerly:		cr701 - HALF UNITS ON HAND - NOT USED

	/*****************************************************************************
	** Name:				cshCalcPctOfTotal
	** Purpose:			calculate percent of total
	** Formerly:		cr800
	** Author:			JEG 12/11/14
	**
	** Parameters:
	**		tot_day_sales			- total day sales
	**		tot_ext_prod_net	- total extended product net
	**		tot_brkfst_items	- total items sold for breakfast
	**		tot_day_items			- total items sold for day
	**		type_pass					- 1 if tot_day_sales and tot_ext_prod_net passed
	**												percent = tot_day_sales / tot_ext_prod_net
	**											- 2 if tot_brkfst_items and tot_day_items passed
	**												percent = tot_brkfst_items / tot_day_items
	**
	** Returns:
	**		percent of total
	*/

	exports.cshCalcPctOfTotal = function(tot_day_sales,
																			 tot_ext_prod_net,
																			 tot_brkfst_items,
																			 tot_day_items,
																			 type_pass) {

		var percent_of_total = 0;

		//check for null or NaN. If found, return 0
		tot_day_sales = exports.ckForNullNaN(tot_day_sales);
		tot_ext_prod_net = exports.ckForNullNaN(tot_ext_prod_net);
		tot_brkfst_items = exports.ckForNullNaN(tot_brkfst_items);
		tot_day_items = exports.ckForNullNaN(tot_day_items);

		//calculate percent of total
		if(type_pass == 1){		//calculate day percent
			if(tot_ext_prod_net == 0){
				percent_of_total = 0;
			}
			else {
				percent_of_total = tot_day_sales / tot_ext_prod_net;
			}
		}
		else {	//calculate breakfast percent
			if(tot_day_items == 0){
				percent_of_total = 0;
			}
			else {
				percent_of_total = tot_brkfst_items / tot_day_items;
			}
		}

		//percent_of_total has four decimal places
		percent_of_total = exports.dec_places(percent_of_total, 4);

		return percent_of_total;
	};

	/*****************************************************************************
	** Name:				cshCalcMenuItemDolsPct
	** Purpose:			calculate menu item dollars percentage
	** Formerly:		cr801a
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		percent			- percentage
	**		reconst_net	- reconstruct product net of reconstruct date
	**
	** Returns:
	**		menu item dollars percentage
	*/

	exports.cshCalcMenuItemDolsPct = function(percent, reconst_net) {

		var item_dollars = 0;

		//calculate storewide previous forever amount
		item_dollars = percent * reconst_net;

		//result should have the same number of decimal places as
		//reconstruct product net
		item_dollars = Math.floor(item_dollars + 0.5);

		return item_dollars;
	};

	/*****************************************************************************
	** Name:				cshCalcReconProdNet
	** Purpose:			calculate reconstruction product net
	** Formerly:		cr802a
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		cashout_all_net			- cashout all net
	**		co_np_sale_amt			- cashout non-product sale amount
	**		co_empl_meal_amt		- cashout employee meals amount
	**		co_mgr_meals_amt		- cashout manager meals amount
	**		co_adj_ref_ovr_amt	- cashout adjusted refund overring amount
	**		co_coupa_amt				- cashout coupon a amount
	**		co_coupb_amt				- cashout coupon b amount
	**		co_coupc_amt				- cashout coupon c amount
	**		co_coupd_amt				- cashout coupon d amount
	**		co_coupe_amt				- cashout coupon e amount
	**		co_disc_sale_amt		- cashout discount sale amount
	**
	** Returns:
	**		reconstruction product net
	*/

	exports.cshCalcReconProdNet = function(cashout_all_net,
																				 co_np_sale_amt,
																				 co_empl_meal_amt,
																				 co_mgr_meals_amt,
																				 co_adj_ref_ovr_amt,
																				 co_coupa_amt,
																				 co_coupb_amt,
																				 co_coupc_amt,
																				 co_coupd_amt,
																				 co_coupe_amt,
																				 co_disc_sale_amt) {

		var recon_prod_net = 0;

		//check for null or NaN. If found, return 0
		cashout_all_net = exports.ckForNullNaN(cashout_all_net);
		co_np_sale_amt = exports.ckForNullNaN(co_np_sale_amt);
		co_empl_meal_amt = exports.ckForNullNaN(co_empl_meal_amt);
		co_mgr_meals_amt = exports.ckForNullNaN(co_mgr_meals_amt);
		co_adj_ref_ovr_amt = exports.ckForNullNaN(co_adj_ref_ovr_amt);
		co_coupa_amt = exports.ckForNullNaN(co_coupa_amt);
		co_coupb_amt = exports.ckForNullNaN(co_coupb_amt);
		co_coupc_amt = exports.ckForNullNaN(co_coupc_amt);
		co_coupd_amt = exports.ckForNullNaN(co_coupd_amt);
		co_coupe_amt = exports.ckForNullNaN(co_coupe_amt);
		co_disc_sale_amt = exports.ckForNullNaN(co_disc_sale_amt);

		//calculate reconstruction product net, has two decimal places
		recon_prod_net = cashout_all_net
									 - co_np_sale_amt
									 + co_empl_meal_amt
									 + co_mgr_meals_amt
									 + co_adj_ref_ovr_amt
									 + co_coupa_amt
									 + co_coupa_amt
									 + co_coupa_amt
									 + co_coupa_amt
									 + co_coupa_amt
									 + co_disc_sale_amt;

		recon_prod_net = exports.dec_places(recon_prod_net, 2);

		return recon_prod_net;
	};

	/*****************************************************************************
	** Name:				cshCalcUnitsSoldQty
	** Purpose:			calculate unit sold quantity
	** Formerly:		cr803
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		total_price	- total day sales
	**		price				- price for item
	**
	** Returns:
	**		unit sold quantity
	*/

	exports.cshCalcUnitsSoldQty = function(total_price, price) {

		var units_sold_qty = 0;

		//if price is null, zero, or NaN, set units_sold_qty to zero
		if(price == null || price == 0 || isNaN(price)){
			units_sold_qty = 0;
		}
		else{
			units_sold_qty = total_price / price;
		}

		//units_sold_qty has two decimal places
		units_sold_qty = exports.dec_places(units_sold_qty, 2);

		return units_sold_qty;
	};

	/*****************************************************************************
	** Name:				cshCalcGrossSalesRem
	** Purpose:			calculate gross sales removal
	** Formerly:		cr805
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		reading_differnce		- calculated reading difference
	**		mal_pos_ovrring_amt	- pos overring amount
	**		mal_pos_refund_amt	- pos refund amount
	**		mal_oth_recp_amt		- other receipt amount
	**		mal_sold_gift_amt		- sold gift certificate amount
	**		mal_adj_rf_ovr_amt	- adjusted refund/overring amount
	**
	** Returns:
	**		gross sales removal
	*/

	exports.cshCalcGrossSalesRem = function(reading_differnce,
																					mal_pos_ovrring_amt,
																					mal_pos_refund_amt,
																					mal_oth_recp_amt,
																					mal_sold_gift_amt,
																					mal_adj_rf_ovr_amt) {

		var gross_sales_rem = 0;

		//if any parameter is null or NaN, function returns null
		if(reading_differnce == null || isNaN(reading_differnce)){
				return null;
		}
		if(mal_pos_ovrring_amt == null || isNaN(mal_pos_ovrring_amt)){
			return null;
		}
		if(mal_pos_refund_amt == null || isNaN(mal_pos_refund_amt)){
			return null;
		}
		if(mal_oth_recp_amt == null || isNaN(mal_oth_recp_amt)){
			return null;
		}
		if(mal_sold_gift_amt == null || isNaN(mal_sold_gift_amt)){
			return null;
		}
		if(mal_adj_rf_ovr_amt == null || isNaN(mal_adj_rf_ovr_amt)){
			return null;
		}

		//calculate gross sales removal, has two decimal places
		gross_sales_rem = reading_differnce
										- mal_pos_ovrring_amt
										- mal_pos_refund_amt
										- mal_oth_recp_amt
										- mal_sold_gift_amt
										- mal_adj_rf_ovr_amt;

		gross_sales_rem = exports.dec_places(gross_sales_rem, 2);

		return gross_sales_rem;
	};

	/*****************************************************************************
	** Name:				cshCalcGrossSalesAdd
	** Purpose:			calculate gross sales additional
	** Formerly:		cr806
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		add_diff_amt				- additional forever difference
	**		add_pos_ovrring_amt	- additional pos overring amount
	**		add_pos_refund_amt	- additional pos refund amount
	**		add_oth_recp_amt		- additional other receipt amount
	**		add_sold_gift_amt		- additional sold gift certificate amount
	**		add_adj_rf_ovr_amt	- additional adjusted refund/overring amount
	**
	** Returns:
	**		gross sales additional
	*/

	exports.cshCalcGrossSalesAdd = function(add_diff_amt,
																					add_pos_ovrring_amt,
																					add_pos_refund_amt,
																					add_oth_recp_amt,
																					add_sold_gift_amt,
																					add_adj_rf_ovr_amt) {

		var gross_sales_add = 0;

		//if any parameter is null or NaN, function returns null
		if(add_diff_amt == null || isNaN(add_diff_amt)){
			return null;
		}
		if(add_pos_ovrring_amt == null || isNaN(add_pos_ovrring_amt)){
			return null;
		}
		if(add_pos_refund_amt == null || isNaN(add_pos_refund_amt)){
			return null;
		}
		if(add_oth_recp_amt == null || isNaN(add_oth_recp_amt)){
			return null;
		}
		if(add_sold_gift_amt == null || isNaN(add_sold_gift_amt)){
			return null;
		}
		if(add_adj_rf_ovr_amt == null || isNaN(add_adj_rf_ovr_amt)){
			return null;
		}

		//calculate gross sales removal, has two decimal places
		gross_sales_add = add_diff_amt
										- add_pos_ovrring_amt
										- add_pos_refund_amt
										- add_oth_recp_amt
										- add_sold_gift_amt
										- add_adj_rf_ovr_amt;

		gross_sales_add = exports.dec_places(gross_sales_add, 2);

		return gross_sales_add;
	};

	/*****************************************************************************
	** Name:				cshCalcAllNetSalesRem
	** Purpose:			calculate all net sales removal
	** Formerly:		cr807
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		rem_gross_sales	- removal gross sales
	**		mal_tot_tax_amt	- removal total tax amount
	**
	** Returns:
	**		all net sales removal
	*/

	exports.cshCalcAllNetSalesRem = function(rem_gross_sales, mal_tot_tax_amt) {

		var rem_all_net_sales = 0;

		//if any parameter is null or NaN, function returns null
		if(rem_gross_sales == null || isNaN(rem_gross_sales)){
			return null;
		}
		if(mal_tot_tax_amt == null || isNaN(mal_tot_tax_amt)){
			return null;
		}

		//calculate all net sales removal, has two decimal places
		rem_all_net_sales =
				exports.dec_places((rem_gross_sales - mal_tot_tax_amt), 2);

		return rem_all_net_sales;
	};

	/*****************************************************************************
	** Name:				cshCalcAllNetSalesAdd
	** Purpose:			calculate all net sales additional
	** Formerly:		cr808
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		add_gross_sales	- additional gross sales
	**		add_tot_tax_amt	- additional total tax amount
	**
	** Returns:
	**		all net sales additional
	*/

	exports.cshCalcAllNetSalesAdd = function(add_gross_sales, add_tot_tax_amt) {

		var add_all_net_sales = 0;

		//if any parameter is null or NaN, function returns null
		if(add_gross_sales == null || isNaN(add_gross_sales)){
			return null;
		}
		if(add_tot_tax_amt == null || isNaN(add_tot_tax_amt)){
			return null;
		}

		//calculate all net sales additional, has two decimal places
		add_all_net_sales =
				exports.dec_places((add_gross_sales - add_tot_tax_amt), 2);

		return add_all_net_sales;
	};

	/*****************************************************************************
	** Name:				cshCalcRegDifThisPrior
	** Purpose:			calculate difference between this day's closing reading
	**							and the prior day's closing reading
	** Formerly:		cr809
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		this_day_clos_rdg		- this day closing reading
	**		prior_day_clos_rdg	- prior day closing reading
	**
	** Returns:
	**		this/prior day register difference
	*/

	exports.cshCalcRegDifThisPrior =
			function(this_day_clos_rdg, prior_day_clos_rdg) {

		var register_diff = 0;

		//check for null or NaN. If found, return 0
		this_day_clos_rdg = exports.ckForNullNaN(this_day_clos_rdg);
		prior_day_clos_rdg = exports.ckForNullNaN(prior_day_clos_rdg);

		//calculate this/prior day register difference, has two decimal places
		register_diff =
				exports.dec_places((this_day_clos_rdg - prior_day_clos_rdg), 2);

		return register_diff;
	};

	/*****************************************************************************
	** Name:				cshCalcRemAddDiff
	** Purpose:			calculate removal/additional difference
	** Formerly:		cr810
	** Author:			JEG 12/15/14
	**
	** Parameters:
	**		counted_cash_amt		- counted cash amount
	**		pos_overing_amt			- pos overring amount
	**		pos_refund_amt			- pos refund amount
	**		man_ref_ovr_amt			- manual refund/overring amount
	**		gift_rdm_amt				- gift certificate redeemed amount
	**		gcard_rdm_amt				- gift card redeemed amount
	**		credit_sale_amt			- credit sale amount
	**		cashless_sale_amt		- cashless sale amount
	**		cash_over_short_amt	- cash over/short amount
	**
	** Returns:
	**		removal/additional difference
	*/

	exports.cshCalcRemAddDiff = function(counted_cash_amt,
																			 pos_overing_amt,
																			 pos_refund_amt,
																			 man_ref_ovr_amt,
																			 gift_rdm_amt,
																			 gcard_rdm_amt,
																			 credit_sale_amt,
																			 cashless_sale_amt,
																			 cash_over_short_amt) {

		var rem_add_diff = 0;

		//check for null or NaN. If found, return 0
		counted_cash_amt = exports.ckForNullNaN(counted_cash_amt);
		pos_overing_amt = exports.ckForNullNaN(pos_overing_amt);
		pos_refund_amt = exports.ckForNullNaN(pos_refund_amt);
		man_ref_ovr_amt = exports.ckForNullNaN(man_ref_ovr_amt);
		gift_rdm_amt = exports.ckForNullNaN(gift_rdm_amt);
		gcard_rdm_amt = exports.ckForNullNaN(gcard_rdm_amt);
		credit_sale_amt = exports.ckForNullNaN(credit_sale_amt);
		cashless_sale_amt = exports.ckForNullNaN(cashless_sale_amt);
		cash_over_short_amt = exports.ckForNullNaN(cash_over_short_amt);

		//calculate removal/additional difference, has two decimal places
		rem_add_diff = counted_cash_amt
								 + pos_overing_amt
								 + pos_refund_amt
								 + man_ref_ovr_amt
								 + gift_rdm_amt
								 + gcard_rdm_amt
								 + credit_sale_amt
								 + cashless_sale_amt
								 - cash_over_short_amt;

		rem_add_diff = exports.dec_places(rem_add_diff, 2);

		return rem_add_diff;
	};

	/*****************************************************************************
	** Name:				cshCalcOpenReadAdj
	** Purpose:			calculate opening reading adjusted
	** Formerly:		cr903
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		tot_pre_forv_amt		- total previous forever amount
	**		reg_insrt_forv_amt	- register insert forever amount
	**		remv_prev_forv_amt	- removal previous forever amount
	**
	** Returns:
	**		opening reading adjusted
	*/

	exports.cshCalcOpenReadAdj = function(tot_pre_forv_amt,
																				reg_insrt_forv_amt,
																				remv_prev_forv_amt) {

		var opening_reading = 0;
		var roll_factor = 1000000;

		//check for null or NaN. If found, return 0
		tot_pre_forv_amt = exports.ckForNullNaN(tot_pre_forv_amt);
		reg_insrt_forv_amt = exports.ckForNullNaN(reg_insrt_forv_amt);
		remv_prev_forv_amt = exports.ckForNullNaN(remv_prev_forv_amt);

		//calculate opening reading adjusted, has two decimal places
		opening_reading =
				tot_pre_forv_amt + reg_insrt_forv_amt - remv_prev_forv_amt;

		while(opening_reading < 0){
			opening_reading += roll_factor;
		}

		opening_reading = exports.dec_places(opening_reading, 2);

		return opening_reading;
	};

	/*****************************************************************************
	** Name:				cshCalcReadDiff
	** Purpose:			calculate reading difference
	** Formerly:		cr904
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		closing_reading	- closing reading
	**		opening_reading	- opening reading
	**
	** Returns:
	**		reading difference
	*/

	exports.cshCalcReadDiff = function(closing_reading, opening_reading) {

		var reading_diff = 0;
		var roll_factor = 1000000;

		//check for null or NaN. If found, return 0
		closing_reading = exports.ckForNullNaN(closing_reading);
		opening_reading = exports.ckForNullNaN(opening_reading);

		//calculate reading difference, has two decimal places
		reading_diff = closing_reading - opening_reading;

		while(reading_diff < 0){
			reading_diff += roll_factor;
		}
		while(reading_diff >= roll_factor){
			reading_diff -= roll_factor;
		}

		reading_diff = exports.dec_places(reading_diff, 2);

		return reading_diff;
	};

	/*****************************************************************************
	** Name:				invCalcMenuItemUnitsSold
	** Purpose:			calculate menu item units sold
	** Formerly:		cr911
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		serve_unit	- day serve quantity
	**		promo_unit	- day promo quantity
	**
	** Returns:
	**		menu item units sold
	*/

	exports.invCalcMenuItemUnitsSold = function(serve_unit, promo_unit) {

		var units_sold = 0;

		//check for null or NaN. If found, return 0
		serve_unit = exports.ckForNullNaN(serve_unit);
		promo_unit = exports.ckForNullNaN(promo_unit);

		//calculate menu item units sold, has two decimal places
		units_sold = exports.dec_places((serve_unit - promo_unit), 2);

		return units_sold;
	};

	/*****************************************************************************
	** Name:				invCalcMenuItemUnitsBrkfst
	** Purpose:			calculate breakfast menu item units sold
	** Formerly:		cr915
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		unit_sold	- day sold quantity
	**
	** Returns:
	**		breakfast menu item units sold
	*/

	exports.invCalcMenuItemUnitsBrkfst = function(unit_sold) {

		var brkfst_sold = 0;

		//check for null or NaN. If found, return 0
		unit_sold = exports.ckForNullNaN(unit_sold);

		//calculate breakfast menu item units sold, has two decimal places
		brkfst_sold = exports.dec_places((unit_sold / 2), 2);

		return brkfst_sold;
	};

	/*****************************************************************************
	** Name:				invCalcMenuItemUnitsReg
	** Purpose:			calculate regular menu item units sold
	** Formerly:		cr916
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		unit_sold		- day sold quantity
	**		bkfst_sold	- breakfast sold quantity
	**
	** Returns:
	**		regular menu item units sold
	*/

	exports.invCalcMenuItemUnitsReg = function(unit_sold, bkfst_sold) {

		var reg_sold = 0;

		//check for null or NaN. If found, return 0
		unit_sold = exports.ckForNullNaN(unit_sold);
		bkfst_sold = exports.ckForNullNaN(bkfst_sold);

		//calculate regular menu item units sold, has two decimal places
		reg_sold = exports.dec_places((unit_sold - bkfst_sold), 2);

		return reg_sold;
	};

	/*****************************************************************************
	** Name:				cshCalcRegSalesDols
	** Purpose:			calculate cashout regular sales dollars
	** Formerly:		cr917
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		prod_net	- cashout product net dollars
	**		bkfst_amt - cashout breakfast dollars
	**
	** Returns:
	**		cashout regular sales dollars
	*/

	exports.cshCalcRegSalesDols = function(prod_net, bkfst_amt) {

		var reg_amt = 0;

		//check for null or NaN. If found, return 0
		prod_net = exports.ckForNullNaN(prod_net);
		bkfst_amt = exports.ckForNullNaN(bkfst_amt);

		//calculate cashout regular sales dollars, has two decimal places
		reg_amt = exports.dec_places((prod_net - bkfst_amt), 2);

		return reg_amt;
	};

	/*****************************************************************************
	** Name:				cshCalcFornCurVal
	** Purpose:			calculate foreign currency value
	** Formerly:		cr999
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		entered_curr	- entered currency amount
	**		exchange_rate	- exchange rate, passed as percent(ex: 93% passed as 0.93)
	**		rounding_code	- rounding code, 0=round off, 1=round up, 2=round down
	**
	** Returns:
	**		value in US currency
	*/

	exports.cshCalcFornCurVal = function(entered_curr,
																			 exchange_rate,
																			 rounding_code) {

		var curr_value = 0;					//currency value
		var round_curr_value = 0;		//rounded currency value
		var int_curr_value = 0;			//integer of currency value
		var tmp_curr_diff = 0;			//temporary currency difference

		//if entered_curr is null, zero, or NaN, function returns zero
		if(entered_curr == null || entered_curr == 0 || isNaN(entered_curr)){
			return 0;
		}
		// if exchange_rate is null or NaN, function returns zero
		if(exchange_rate == null || isNaN(exchange_rate)){
			return 0;
		}

		//calculate currency value
		curr_value = entered_curr * exchange_rate;

		//perform rounding, round_curr_value has two decimal places
		switch(rounding_code){
			case 1:
				//round up
				round_curr_value = Math.ceil(curr_value * 100) / 100;
				break;
			case 2:
				//round down
				round_curr_value = Math.floor(curr_value * 100) / 100;
				break;
			case 0:
			default:
				//round off
				int_curr_value = parseInt(curr_value, 10);
				tmp_curr_diff = curr_value - int_curr_value;

				if(tmp_curr_diff < 0.5){
					round_curr_value = Math.floor(curr_value * 100) / 100;
				}
				else if(tmp_curr_diff > 0.5){
					round_curr_value = Math.ceil(curr_value * 100) / 100;
				}
				else{
					if(int_curr_value % 2 == 0){
						//if even, round down
						round_curr_value = Math.floor(curr_value * 100) / 100;
					}
					else{
						round_curr_value = Math.ceil(curr_value * 100) / 100;
					}
				}
				break;
		}

		return round_curr_value;
	};

	/*****************************************************************************
	** Name:				cshCalcForvDiffAddSls
	** Purpose:			calculate forever difference additional sales
	** Formerly:		cr1201
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		co_reg_drawer_amt		- cashout register drawer amount
	**		co_tot_ovring_amt		- cashout total overring amount
	**		co_refund_amt				- cashout refund amount
	**		billable_sale_amt		- billables sale amount
	**		cashless_sales_amt	- cashless sales amount
	**		co_adj_rdm_gct_amt	- cashout adjust redeemed gift certificate amount
	**		gcard_rdm_amt				- gift card redeemed amount
	**		co_adj_ref_ovr_amt	- cashout adjusted refund overring amount
	**
	** Returns:
	**		forever difference additional sales
	*/

	exports.cshCalcForvDiffAddSls = function(co_reg_drawer_amt,
																					 co_tot_ovring_amt,
																					 co_refund_amt,
																					 billable_sale_amt,
																					 cashless_sales_amt,
																					 co_adj_rdm_gct_amt,
																					 gcard_rdm_amt,
																					 co_adj_ref_ovr_amt) {

		var diff_addl_sales = 0;

		//if any parameter is null or NaN, function returns null
		if(co_reg_drawer_amt == null || isNaN(co_reg_drawer_amt)){
			return null;
		}
		if(co_tot_ovring_amt == null || isNaN(co_tot_ovring_amt)){
			return null;
		}
		if(co_refund_amt == null || isNaN(co_refund_amt)){
			return null;
		}
		if(billable_sale_amt == null || isNaN(billable_sale_amt)){
			return null;
		}
		if(cashless_sales_amt == null || isNaN(cashless_sales_amt)){
			return null;
		}
		if(co_adj_rdm_gct_amt == null || isNaN(co_adj_rdm_gct_amt)){
			return null;
		}
		if(gcard_rdm_amt == null || isNaN(gcard_rdm_amt)){
			return null;
		}
		if(co_adj_ref_ovr_amt == null || isNaN(co_adj_ref_ovr_amt)){
			return null;
		}

		//calculate forever difference additional sales, has two decimal places
		diff_addl_sales = co_reg_drawer_amt
										+ co_tot_ovring_amt
										+ co_refund_amt
										+ billable_sale_amt
										+ cashless_sales_amt
										+ co_adj_rdm_gct_amt
										+ gcard_rdm_amt
										+ co_adj_ref_ovr_amt;

		diff_addl_sales = exports.dec_places(diff_addl_sales, 2);

		return diff_addl_sales;
	};

	/*****************************************************************************
	** Name:				cshCalcSalesTaxAmtAdd
	** Purpose:			calculate sales tax amount additional
	** Formerly:		cr1202
	** Author:			JEG 12/16/14
	**
	** Parameters:
	**		calc_gross_sales_addl	- calculated gross sales additional
	**		sale_tax_pct					- sales tax percent
	**														passed as percent(ex: 7% passed as 0.07)
	**		sales_percent					- sales percent
	**														passed as percent(ex: 30% passed as 0.30)
	**		tax_exempt_sales_amt	- tax exempt sales amount
	**
	** Returns:
	**		sales tax amount additional
	*/

	exports.cshCalcSalesTaxAmtAdd = function(calc_gross_sales_addl,
																					 sale_tax_pct,
																					 sales_percent,
																					 tax_exempt_sales_amt) {

		var sales_tax_amt = 0;
		var tmp_tax = 0;

		//if any parameter is null or NaN, function returns null
		if(calc_gross_sales_addl == null || isNaN(calc_gross_sales_addl)){
			return null;
		}
		if(sale_tax_pct == null || isNaN(sale_tax_pct)){
			return null;
		}
		if(sales_percent == null || isNaN(sales_percent)){
			return null;
		}
		if(tax_exempt_sales_amt == null || isNaN(tax_exempt_sales_amt)){
			return null;
		}

		//calculate sales tax amount additional, has two decimal places
		tmp_tax =
				sales_percent * (calc_gross_sales_addl - tax_exempt_sales_amt);

		sales_tax_amt =
				exports.dec_places((tmp_tax - (tmp_tax / (1 + sale_tax_pct))), 2);

		return sales_tax_amt;
	};

	/*****************************************************************************
	** Name:				cshCalcSalesDolAdd
	** Purpose:			calculate sales dollars additional
	** Formerly:		cr1205
	** Author:			JEG 12/17/14
	**
	** Parameters:
	**		calc_gross_sales_addl	- calculated gross sales additional
	**		sales_percent					- sales percent
	**														passed as percent(ex: 30% passed as 0.30)
	**
	** Returns:
	**		sales dollars additional
	*/

	exports.cshCalcSalesDolAdd = function(calc_gross_sales_addl, sales_percent) {

		var sales_dollars = 0;

		//if any parameter is null or NaN, function returns null
		if(calc_gross_sales_addl == null || isNaN(calc_gross_sales_addl)){
			return null;
		}
		if(sales_percent == null || isNaN(sales_percent)){
			return null;
		}

		//calculate sales dollars additional, has two decimal places
		sales_dollars =
				exports.dec_places((sales_percent * calc_gross_sales_addl), 2);

		return sales_dollars;
	};

	// Formerly:		cr1210 - CALCULATE GROSS SALES - ADDITIONAL - SAME AS cr806

	// Formerly:		cr1215 - CALCULATE ALL NET SALES - ADDITIONAL - SAME AS cr133

	// Formerly:		cr1217 - CALCULATE SALES PERCENT - ADDITIONAL - NOT USED

	/*****************************************************************************
	** Name:				cshCalcSalesQtyAdd
	** Purpose:			calculate sales quantity additional
	** Formerly:		cr1220
	** Author:			JEG 12/17/14
	**
	** Parameters:
	**		co_trans_qty	- cashout transaction quantity
	**		sales_percent	- sales percent (30% passed as 0.30)
	**
	** Returns:
	**		sales quantity additional
	*/

	exports.cshCalcSalesQtyAdd = function(co_trans_qty, sales_percent) {

		var sales_qty = 0;

		//if any parameter is null or NaN, function returns null
		if(co_trans_qty == null || isNaN(co_trans_qty)){
			return null;
		}
		if(sales_percent == null || isNaN(sales_percent)){
			return null;
		}

		//calculate sales quantity additional, has two decimal places
		sales_qty =exports.dec_places((co_trans_qty * sales_percent), 2);

		return sales_qty;
	};

	// Formerly:		cr1221 - CALCULATE TOTAL ACTUAL LABOR REQUIRED - NOT USED

	/*****************************************************************************
	** Name:				cshCalcHrlyProdSales
	** Purpose:			calculate hourly product sales
	** Formerly:		cr1222
	** Author:			JEG 12/18/14
	**
	** Parameters:
	**		qhr_nt_sale	- quarter hour net sales
	**		qhr_np_sale	- quarter hour non-product sales
	**
	** Returns:
	**		hourly product sales
	*/

	exports.cshCalcHrlyProdSales = function(qhr_nt_sale, qhr_np_sale) {

		var hrly_prod_sales = 0;

		//check for null or NaN. If found, return 0
		qhr_nt_sale = exports.ckForNullNaN(qhr_nt_sale);
		qhr_np_sale = exports.ckForNullNaN(qhr_np_sale);

		//calculate hourly product sales, has two decimal places
		hrly_prod_sales = exports.dec_places(((qhr_nt_sale - qhr_np_sale) * 4), 2);

		return hrly_prod_sales;
	};

	/*****************************************************************************
	** Name:				cshCalcStwideRollFctr
	** Purpose:			calculate storewide rollover factor amount
	** Formerly:		cr1223
	** Author:			JEG 12/18/14
	**
	** Parameters:
	**		tot_curr_forv_amt		- total current forever amount
	**		tot_pre_forv_amt		- total previous forever amount
	**		reg_insrt_forv_amt	- register insert forever amount
	**		remv_prev_forv_amt	- removal previous forever amount
	**
	** Returns:
	**		storewide rollover factor amount
	*/

	exports.cshCalcStwideRollFctr = function(tot_curr_forv_amt,
																					 tot_pre_forv_amt,
																					 reg_insrt_forv_amt,
																					 remv_prev_forv_amt) {

		var roll_fctr_amt = 0;
		var reading_diff = 0;
		var rollover = 100000000;

		//check for null or NaN. If found, return 0
		tot_curr_forv_amt = exports.ckForNullNaN(tot_curr_forv_amt);
		tot_pre_forv_amt = exports.ckForNullNaN(tot_pre_forv_amt);
		reg_insrt_forv_amt = exports.ckForNullNaN(reg_insrt_forv_amt);
		remv_prev_forv_amt = exports.ckForNullNaN(remv_prev_forv_amt);

		//calculate storewide rollover factor amount, has two decimal places
		reading_diff = tot_curr_forv_amt
								 - tot_pre_forv_amt
								 - reg_insrt_forv_amt
								 + remv_prev_forv_amt;

		if(reading_diff < 0){
			if(reading_diff % rollover == 0){
				roll_fctr_amt = ((-reading_diff) / rollover) * rollover;
			}
			else {
				roll_fctr_amt = ((-reading_diff / rollover) + 1) * rollover;
			}
		}
		else {
			if(reading_diff >= rollover){
				roll_fctr_amt = (reading_diff / rollover) * (-rollover);
			}
			else {
				roll_fctr_amt = 0;
			}
		}

		roll_fctr_amt = exports.dec_places(roll_fctr_amt, 2);
		return roll_fctr_amt;
	};

	/*****************************************************************************
	** Name:				cshCalcAvgCkRegCo
	** Purpose:			calculate average check - register cashout
	** Formerly:		cr1224
	** Author:			JEG 12/17/14
	**
	** Parameters:
	**		prod_net_sales_amt	- product net sales amount
	**		co_trans_qty				- cashout transaction quantity
	**
	** Returns:
	**		average check - register cashout
	*/

	exports.cshCalcAvgCkRegCo = function(prod_net_sales_amt, co_trans_qty) {

		var avg_check = 0;

		//if any parameter is null, zero, or NaN, function returns null
		if(prod_net_sales_amt == null
			|| prod_net_sales_amt == 0
			|| isNaN(prod_net_sales_amt)){
				return null;
		}
		if(co_trans_qty == null || co_trans_qty == 0 || isNaN(co_trans_qty)){
			return null;
		}

		//calculate average check - register cashout, has two decimal places
		avg_check = exports.dec_places((prod_net_sales_amt / co_trans_qty), 2);

		return avg_check;
	};

	/*****************************************************************************
	** Name:				cshCalcTredAvgRegCo
	** Purpose:			calculate t-red average - register cashout
	** Formerly:		cr1225
	** Author:			JEG 12/17/14
	**
	** Parameters:
	**		co_part_cancl_amt	- cashout partial cancel amount
	**		co_part_cancl_qty	- cashout partial cancel quantity
	**
	** Returns:
	**		t-red average - register cashout
	*/

	exports.cshCalcTredAvgRegCo = function(co_part_cancl_amt, co_part_cancl_qty) {

		var tred_avg = 0;

		//if any parameter is null, zero, or NaN, function returns null
		if(co_part_cancl_amt == null
			|| co_part_cancl_amt == 0
			|| isNaN(co_part_cancl_amt)){
				return null;
		}
		if(co_part_cancl_qty == null
			|| co_part_cancl_qty == 0
			|| isNaN(co_part_cancl_qty)){
				return null;
		}

		//calculate t-red average - register cashout, has two decimal places
		tred_avg = exports.dec_places((co_part_cancl_amt / co_part_cancl_qty), 2);

		return tred_avg;
	};

	/*****************************************************************************
	** Name:				cshCoupDiscDols
	** Purpose:			calculate coupon/discount dollars
	** Formerly:		cr1226
	** Author:			JEG 12/18/14
	**
	** Parameters:
	**		co_coupa_amt			- cashout coupon a amount
	**		co_coupb_amt			- cashout coupon b amount
	**		co_coupc_amt			- cashout coupon c amount
	**		co_coupd_amt			- cashout coupon d amount
	**		co_coupe_amt			- cashout coupon e amount
	**		co_disc_sale_amt	- cashout discount sales amount
	**
	** Returns:
	**		coupon/discount dollars
	*/

	exports.cshCoupDiscDols = function(co_coupa_amt,
																		 co_coupb_amt,
																		 co_coupc_amt,
																		 co_coupd_amt,
																		 co_coupe_amt,
																		 co_disc_sale_amt) {

		var coup_disc_dols = 0;

		//check for null or NaN. If found, return 0
		co_coupa_amt = exports.ckForNullNaN(co_coupa_amt);
		co_coupb_amt = exports.ckForNullNaN(co_coupb_amt);
		co_coupc_amt = exports.ckForNullNaN(co_coupc_amt);
		co_coupd_amt = exports.ckForNullNaN(co_coupd_amt);
		co_coupe_amt = exports.ckForNullNaN(co_coupe_amt);
		co_disc_sale_amt = exports.ckForNullNaN(co_disc_sale_amt);

		//calculate coupon/discount dollars, has two decimal places
		coup_disc_dols = co_coupa_amt
									 + co_coupb_amt
									 + co_coupc_amt
									 + co_coupd_amt
									 + co_coupe_amt
									 + co_disc_sale_amt;

		coup_disc_dols = exports.dec_places(coup_disc_dols, 2);

		return coup_disc_dols;
	};

	// Formerly:		cr1250 - CALCULATE PRODUCT NET - ADDITIONAL - NOT USED



	/*****************************************************************************
	** Name:				cashDollars
	** Purpose:			calculate safe dollars from backup_amt, drawer amt, and coin_mag_amt
	** Author:			RB 05/27/2015
	**
	** Parameters:
	**		backup_amt		- Base dollar amount that should be in the safe at all times.
	**		drawers_amt		- Combined value of all drawer banks contained within each drawer
	**		coin_mag_amt	- Combined value of all Magazines for coin changers
	**
	** Returns:
	**		Sum of all 3 parameters.
	**		If any parameters are negative, then the function returns null.
	**		Missing/null/NaN params will be treated as zeroes.
	*/

	exports.safeDollars = function(backup_amt, drawers_amt, coin_mag_amt) {
		backup_amt = exports.ckForNullNaN(backup_amt);
		drawers_amt = exports.ckForNullNaN(drawers_amt);
		coin_mag_amt = exports.ckForNullNaN(coin_mag_amt);
		if (backup_amt < 0 || drawers_amt < 0 || coin_mag_amt < 0) {
			return null;
		}

		return exports.dec_places(backup_amt + drawers_amt + coin_mag_amt, 2);
	};














})(typeof exports === 'undefined'? this['calcs']={}: exports);
