(function (root, factory) {

	if (typeof define === "function" && define.amd) {
		define(factory);
	} else if (typeof exports === "object") {
		module.exports = factory();
	} else {
		root.ddm = factory();
	}

}(this, function () {

	"use strict";

	var ddm, d, tagPrefix = "ddm";

	//////////////////////////////
	// EVENT EMITTER DEFINITION //
	//////////////////////////////

	var EventEmitter = function () {

		this._watchers = {};
		this._watchersAll = {};

	};

	EventEmitter.prototype.constructor = EventEmitter;

	EventEmitter.prototype.findWatcherDeps = function(selector) {

		// Go up to look for parent watchers
		// ex: if "some.nested.value" is the selector, it should also trigger for "some"

		var result = [];
		var watchers = _d.keys(this._watchers);
		watchers.forEach(function(watcher) {
			if (startsWith(selector, watcher)) { result.push(watcher); }
		});
		return result;

	}

	EventEmitter.prototype.emitChange = function(selector) {

		if (!this._watchers) { this._watchers = {}; }

		var self = this;

		// Send data down to the local watchers
		var deps = self.findWatcherDeps(selector);
		deps.forEach(function(item) {
			if (self._watchers[item]) {
				self._watchers[item].forEach(function(handler) {
					handler.apply(self, [self.get(item)]);
				});
			}
		});

		// Send data down to the global watchers
		if (!self._watchersAll || !_d.isArray(self._watchersAll)) { return; }
		self._watchersAll.forEach(function(watcher) {
			if (_d.isFunction(watcher)) { watcher.apply(self, [selector, self.get(selector)]); }
		});

	}

	///////////////////////
	// DIADEM DEFINITION //
	///////////////////////

	var DIADEM = function () {

		this.data = {};
		this._bindings = {};
		this.options = {
			persistent: true,
			timeoutInput: 50,
			timeoutDOM: 500
		};

	};

	// Inherit from EventEmitter
	DIADEM.prototype = Object.create(EventEmitter.prototype);
	DIADEM.constructor = DIADEM;

	//////////////////////////
	// DOM METHODS CHAINING //
	//////////////////////////

	DIADEM.prototype.dom = function(element) {

		this._element = d.dom(element).get(0);
		return this;

	};

	//////////////////////////////
	// DOM METHODS: DOM -> JSON //
	//////////////////////////////

	DIADEM.prototype.toStorage = function(options, element) {

		var self = this,
			element = element || self._element,
			options = options || self.dom(element).getOptions(),
			data = self.dom(element).getValue(),
			selector = options.data;
		if (options.readonly) { return false; } 
		self.set(selector, data, options);

	}

	//////////////////////////////
	// DOM METHODS: JSON -> DOM //
	//////////////////////////////

	DIADEM.prototype.fromStorage = function(options, element) {

		var self = this,
			element = element || self._element,
			options = options || self.dom(element).getOptions();

		if (options.writeonly) { return false; }

		var selector = options.data,
			data = self.get(selector);

		if (options.json) { data = _json.isStringified(data) ? data : _json.prettyprint(data); }

		self.dom(element).setValue(data, options);

	}

	/////////////////////////////////
	// DOM METHODS: GET - SET HTML //
	/////////////////////////////////

	DIADEM.prototype.getValue = function(element) {

		var self = this,
			element = element || self._element;

		var getters = {
			"SELECT": function() {
				return d.dom(element).val();
			},
			"INPUT": function() {
				var type = d.dom(element).type();
				if (_d.contains(["text", "password", "hidden"], type)) {
					return d.dom(element).val();
				}
				if (_d.contains(["checkbox"], type)) {
					return d.dom(element).prop("checked") ? true : false;
				}
				if (_d.contains(["radio"], type)) {
					if (d.dom(element).prop("checked")) {
						return d.dom(element).val();
					} else {
						var binding = d.dom(element).attr("ddm-data");
						return self.get(binding);
					}
				} 

			},
			"TEXTAREA": function() {
				return d.dom(element).val();
			}
		}
		var defaultGetter = function(a) {
			return d.dom(element).html();
		}

		var elementType = d.dom(element).get(0).tagName;
		var getter = getters[elementType] || defaultGetter;
		return getter();

	}

	DIADEM.prototype._transforms = {
		uppercase: function(data) {
			return _d.isString(data) ? data.toUpperCase() : data;
		},
		lowercase: function(data) {
			return _d.isString(data) ? data.toLowerCase() : data;
		},
		reverse: function(data) {
			return data && data.split && _d.isFunction(data.split) ? data.split("").reverse().join("") : data;
		}
	};

	DIADEM.prototype.registerTransform = function(name, transform) {
		var self = this;
		if (_d.isFunction(transform)) { self._transforms[name] = transform; }
	}

	DIADEM.prototype.setValue = function(data, options, element) {

		var self = this,
			element = element || self._element,
			options = options || self.dom(element).getOptions();

		options.transform = options.transform || [];
		options.transform.forEach(function(transformName) {
			var transform = self._transforms[transformName] || function(data) { return data };
			data = transform(data);
		});

		if (data === null) {
			data = "";
		}
		var setters = {

			"SELECT": function(a) {
				d.dom(element).val(a);
			},
			"INPUT": function(a) {
				if (!_d.isString(a)) { a = JSON.stringify(a); }
				var type = d.dom(element).get(0).type;
				if (_d.contains(["text", "password","hidden"], type)) {
					d.dom(element).val(a || "");
				}
				if (_d.contains(["checkbox"], type)) {
					if (a === "true") {
					 	d.dom(element).prop("checked", true);
					} else {
					 	d.dom(element).prop("checked", false);
					}
				}
				if (_d.contains(["radio"], type)) {
					if (a === d.dom(element).val()) {
						d.dom(element).prop("checked", true);
					} else {
						d.dom(element).prop("checked", false);
					}
				}
			},
			"TEXTAREA": function(a) {
				if (!_d.isString(a)) { a = JSON.stringify(a); }
				d.dom(element).val(a || "");
			},
			"PRE": function(a) {
				if (options.html) {
					d.dom(element).html(a || "");
				} else {
					d.dom(element).text(a || "");
				}
			},
			"IMG": function(a) {
				if (!a) {
					a = options.default || "";
					d.dom(element).attr("src", a);
					return false;
				}

				var isValidImageUrl = function(url, cb) {
					d.dom(element).addClass("ddm-loading");
					d.dom("img", {
						src: url,
						onerror: function() { cb(false); },
						onload: function() { cb(true); }
					});
				}

				isValidImageUrl(a, function(response) {
					d.dom(element).removeClass("ddm-loading");
					if (response) {
						d.dom(element).removeClass("ddm-error").addClass("ddm-success");
					} else {
						if (a) {
							d.dom(element).addClass("ddm-error");
						} else {
							d.dom(element).removeClass("ddm-error").removeClass("ddm-success");
						}
						a = options.default || "";
					}
					d.dom(element).attr("src", a);
				});

			}

		}
		var defaultSetter = function(a) {
			if (options.html) {
				d.dom(element).html(a || "");
			} else {
				d.dom(element).text(a || "");
			}

		}

		var elementType = d.dom(element).get(0).tagName;
		var setter = setters[elementType] || defaultSetter;
		setter(data);

	}

	DIADEM.prototype.initValues = function() {

		var self = this,
			dataSelector = "[" + tagPrefix + "-data]";

		var elements = d.dom(dataSelector).get();
		for (var i in elements) {
			var element = elements[i],
				value = self.getValue(element),
				options = self.dom(element).getOptions();
			if (! options.readonly) {   
				self.set(options.data, value, options);
			}

		}
	}

	/////////////////////////////////////
	// DOM METHODS: GET - SET BINDINGS //
	/////////////////////////////////////

	// Scans the DOM to look for new bindings
	DIADEM.prototype.registerBindings = function() {

		// Dealing with bindings removed from the DOM by just resetting all the bindings all the time.
		// Isn't there a better way?
		// One idea would be to add a "ddm-bound" class to bound elements
		// self._bindings = {};

		var self = this;
		var selector = "[" + tagPrefix + "-data]";
		self._bindings = {};

		var elements = d.dom(selector).get();
		for (var i in elements) {
			var element = elements[i],
				options = self.dom(element).getOptions(),
				selector = options.data;

			self._bindings[selector] = self._bindings[selector] || [];
			if (!_d.contains(self._bindings[selector], d.dom(element).get(0))) {
				self._bindings[selector].push(d.dom(element).get(0));
			}
		}

	}

	DIADEM.prototype.updateBindings = function(selector) {
		var self = this;
				self._bindings = self._bindings || {};

		// Set bindings for the data selector
		var bindings = pickAndMergeParentArrays(self._bindings, selector);
		bindings.forEach(function(element) {
			var focused = (d.dom(element).get(0) === d.dom(":focus").get(0)) ? true : false;
			if (!focused) { self.dom(element).fromStorage(); }
		});
	}

	//////////////////////////////////
	// DOM METHODS: OPTIONS PARSING //
	//////////////////////////////////

	DIADEM.prototype.setOptions = function(options, element) {

			var self = this,
					element = self._element || element;

			for (var k in options) {
				var attr = tagPrefix + "-" + k,
						value = options[k];
				d.dom(element).attr(attr, value);
			}

	}

	DIADEM.prototype.getOptions = function(element) {

		var self = this,
			element = element || self._element,
			defaultOptions = {
				data: null,
				html: false,
				readonly: false,
				writeonly: false,
				persistent: false
			};
		return _d.extend(defaultOptions, self.dom(element).getAttrs(tagPrefix));

	}

	DIADEM.prototype.getAttrs = function(prefix, element) {

		var self = this,
				element = element || self._element;

		var parseAttrValue = function(key, value) {

			var attrTypes = {
				pick: "array",
				omit: "array",
				readonly: "boolean",
				writeonly: "boolean",
				json: "boolean",
				html: "boolean",
				persistent: "boolean"
			};

			var parsers = {
				array: function(value) {
					return value.split(",");
				},
				boolean: function(value) {
					if (value === "true") { return true; }
					if (value === "false") { return false; }
					return true;
				}
			};
			var defaultParser = function() { return value; };
			var valueType = attrTypes[key] || null;
			var parser = parsers[valueType] || defaultParser;

			return parser(value);

		}

		var attributes = {};
		var attrs = [].slice.call(d.dom(element).get(0).attributes);
		attrs.forEach(function(attr) {
			var include = (prefix && startsWith(attr.name, prefix + "-")) ? true : false;
			if (include) {
				var name = (prefix) ? attr.name.slice(prefix.length + 1, attr.name.length) : attr.name;
				var value = parseAttrValue(name, attr.value);
				if (_d.contains(["transform", "filter"], name)) { value = value.split("|"); }
				attributes[name] = value;
			}
		});

		return attributes;

	}

	//////////////////
	// DATA METHODS //
	//////////////////

	DIADEM.prototype.get = function(selector) {

		var self = this;
		if (selector !== undefined && !_d.isString(selector)) { return false; }
		if (!self.data) { return {}; }
		return selector ? _json.get(self.data, selector) : self.data;

	}

	DIADEM.prototype.getStringify = function(selector) {

		var self = this;
		return JSON.stringify(self.get(selector));
	}

	DIADEM.prototype.set = function(selector, value, options) {

		if (!selector) { return false; }
		if (selector.split(".")[0] === "this") {
			console.log("Sorry, \"this\" is a reserved word in diadem.js");
			return false;
		}

		var self = this;
		options = options || {};

		if (selector) {

			if (!_d.isString(selector)) { return false; }
			self.data = self.data || {};
			if (options.array) {
				
				// Pull that object out of self.data and see if it is already an array, if not initialize it to as empty one
				// Now all values of this selector get set to an array instead of an object
				// Put any existing values back into the array so that they aren't lost
				var existing_object = _json.get(self.data, options.array);
				if (! _d.isArray(existing_object)) {
					var new_object = []
					for (var k in existing_object) {
						new_object[k] = existing_object[k];
					}
					self.data = _json.set(self.data, options.array, new_object);
				}

			} 

			self.data = selector ? _json.set(self.data, selector, value) : {};
			self.updateBindings(selector);
			self.emitChange(selector, value);
			if (options.persistent) { self.backup(selector); }
		}

	}

	DIADEM.prototype.push = function(selector, value, options) {

		if (!selector) { return false; }

		var self = this;
		options = options || {};

		if (selector) {
		}

		self.updateBindings(selector);
		self.emitChange(selector, null);
		if (options.persistent) { self.backup(selector); }

	}

	DIADEM.prototype.remove = function(selector, options) {

		var self = this;
		options = options || {};

		if (selector) {
			self.data = _json.remove(self.data, selector);
		} else {
			self.data = {};
		}

		self.updateBindings(selector);
		self.emitChange(selector, null);
		if (options.persistent) { self.backup(selector); }

	}

	DIADEM.prototype.clear = function() {

		this.functions = {};
		this.remove(null, { persistent: true });

	}

	//////////////////////////
	// LOCALSTORAGE METHODS //
	//////////////////////////

	DIADEM.prototype.backup = function() {

		var self = this;
		if (!self.options.persistent) { return; }
		try {
			var data = self.data || {};
			localStorage.setItem(tagPrefix, JSON.stringify(data));
		} catch(e) {
			console.log("Your browser does not support localStorage.");
		}

	}

	DIADEM.prototype.restore = function() {

		var self = this;
		if (!self.options.persistent) { return; }
		try {
			var data = localStorage.getItem(tagPrefix);
			try {
				data = JSON.parse(data);
				for (var key in data) {
					self.set(key, data[key]);
				}
			} catch(e) {}
		} catch(e) {
			console.log("Your browser does not support localStorage.");
		}

	}

	//////////
	// MISC //
	//////////

	var startsWith = function(str, starts) {

		if (starts === "") { return true; }
		if (str === null || starts === null) { return false; }
		str = String(str); starts = String(starts);
		return str.length >= starts.length && str.slice(0, starts.length) === starts;

	}

	var cleanEmptyKeys = function(object) {

		return _d.pick(object, _d.compact(_d.keys(object)));

	}

	var filterStartingWith = function(object, string, type) { // true: pick - false: omit

		var keys = _d.keys(object);
		keys.forEach(function(key) {
			if (type) {
				if (!startsWith(key, string)) { delete object[key]; }
			} else {
				if (startsWith(key, string)) { delete object[key]; }
			}
		});
		return object;

	}

	var selectNested = function(data, keys, type) { // true: pick - false: omit

		// Flatten / unflatten to allow for nested picks / omits (doesn't work with regular pick)
		// ex:  data = {something:{nested:"value"}}
		//		keys = ['something.nested']

		var flat = _json.flatten(data);
		for (var i in keys) flat = filterStartingWith(flat, keys[i], type);
		var unflat = _json.unflatten(flat);
		// Unflatten returns an object with an empty property if it is given an empty object
		return cleanEmptyKeys(unflat);

	}

	var pickAndMergeParentArrays = function(object, selector) {

		// Example:
		// object = { a: [1,2,3], a.b: [4,5,6], c: [7,8,9] }
		// fn(object, "a.b")
		// > [1,2,3,4,5,6]

		var keys = [];
		if (selector) {

			// Set bindings for the specified selector

			// (bindings that are repeat items)
			var split = selector.split("."),
					lastKey = split[split.length - 1],
					isArrayItem = !isNaN(lastKey);

			if (isArrayItem) {
					split.pop();
					var key = split.join(".");
					keys = object[key] ? _d.union(keys, object[key]) : keys;
			}

			// (bindings with keys starting with, to include nested bindings)
			for (var key in object) {
				if (startsWith(key, selector)) { keys = _d.union(keys, object[key]); }
			}

		} else {

			// Set bindings for all selectors
			for (var key in object) {
				keys = _d.union(keys, object[key]);
			}

		}
		return keys;

	}

	var escapeHTML = function(str) {
		return str && _d.isString(str) ? str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : str;
	}

	///////////////////////////////////////////////////
	// _d (strip of the required underscore methods) //
	///////////////////////////////////////////////////

	var _d = {};

	var ArrayProto = Array.prototype,
			ObjProto = Object.prototype,
			FuncProto = Function.prototype;

	var nativeIsArray = Array.isArray,
			nativeKeys = Object.keys,
			nativeBind = FuncProto.bind;

	var
		push             = ArrayProto.push,
		slice            = ArrayProto.slice,
		concat           = ArrayProto.concat,
		toString         = ObjProto.toString,
		hasOwnProperty   = ObjProto.hasOwnProperty;

	var flatten = function(input, shallow, strict, output) {
		if (shallow && _d.every(input, _d.isArray)) {
			return concat.apply(output, input);
		}
		for (var i = 0, length = input.length; i < length; i++) {
			var value = input[i];
			if (!_d.isArray(value) && !_d.isArguments(value)) {
				if (!strict) output.push(value);
			} else if (shallow) {
				push.apply(output, value);
			} else {
				flatten(value, shallow, strict, output);
			}
		}
		return output;
	};

	var createCallback = function(func, context, argCount) {
		if (context === void 0) return func;
		switch (argCount == null ? 3 : argCount) {
			case 1: return function(value) {
				return func.call(context, value);
			};
			case 2: return function(value, other) {
				return func.call(context, value, other);
			};
			case 3: return function(value, index, collection) {
				return func.call(context, value, index, collection);
			};
			case 4: return function(accumulator, value, index, collection) {
				return func.call(context, accumulator, value, index, collection);
			};
		}
		return function() {
			return func.apply(context, arguments);
		};
	};

	_d.compact = function(array) {
		return _d.filter(array, _d.identity);
	};

	_d.filter = function(obj, predicate, context) {
		var results = [];
		if (obj == null) return results;
		predicate = _d.iteratee(predicate, context);
		_d.each(obj, function(value, index, list) {
			if (predicate(value, index, list)) results.push(value);
		});
		return results;
	};

	_d.identity = function(value) {
		return value;
	};

	_d.every = function(obj, predicate, context) {
		if (obj == null) return true;
		predicate = _d.iteratee(predicate, context);
		var keys = obj.length !== +obj.length && _d.keys(obj),
				length = (keys || obj).length,
				index, currentKey;
		for (index = 0; index < length; index++) {
			currentKey = keys ? keys[index] : index;
			if (!predicate(obj[currentKey], currentKey, obj)) return false;
		}
		return true;
	};

	_d.union = function() {
		return _d.uniq(flatten(arguments, true, true, []));
	};

	_d.uniq = function(array, isSorted, iteratee, context) {
		if (array == null) return [];
		if (!_d.isBoolean(isSorted)) {
			context = iteratee;
			iteratee = isSorted;
			isSorted = false;
		}
		if (iteratee != null) iteratee = _d.iteratee(iteratee, context);
		var result = [];
		var seen = [];
		for (var i = 0, length = array.length; i < length; i++) {
			var value = array[i];
			if (isSorted) {
				if (!i || seen !== value) result.push(value);
				seen = value;
			} else if (iteratee) {
				var computed = iteratee(value, i, array);
				if (_d.indexOf(seen, computed) < 0) {
					seen.push(computed);
					result.push(value);
				}
			} else if (_d.indexOf(result, value) < 0) {
				result.push(value);
			}
		}
		return result;
	};

	_d.pick = function(obj, iteratee, context) {
		var result = {}, key;
		if (obj == null) return result;
		if (_d.isFunction(iteratee)) {
			iteratee = createCallback(iteratee, context);
			for (key in obj) {
				var value = obj[key];
				if (iteratee(value, key, obj)) result[key] = value;
			}
		} else {
			var keys = concat.apply([], slice.call(arguments, 1));
			obj = new Object(obj);
			for (var i = 0, length = keys.length; i < length; i++) {
				key = keys[i];
				if (key in obj) result[key] = obj[key];
			}
		}
		return result;
	};

	_d.has = function(obj, key) {
		return obj != null && hasOwnProperty.call(obj, key);
	};

	_d.keys = function(obj) {
		if (!_d.isObject(obj)) return [];
		if (nativeKeys) return nativeKeys(obj);
		var keys = [];
		for (var key in obj) if (_d.has(obj, key)) keys.push(key);
		return keys;
	};

	_d.contains = function(obj, target) {
		if (obj == null) return false;
		if (obj.length !== +obj.length) obj = _d.values(obj);
		return _d.indexOf(obj, target) >= 0;
	};

	_d.sortedIndex = function(array, obj, iteratee, context) {
		iteratee = _d.iteratee(iteratee, context, 1);
		var value = iteratee(obj);
		var low = 0, high = array.length;
		while (low < high) {
			var mid = low + high >>> 1;
			if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
		}
		return low;
	};

	_d.property = function(key) {
		return function(obj) {
			return obj[key];
		};
	};

	_d.iteratee = function(value, context, argCount) {
		if (value == null) return _d.identity;
		if (_d.isFunction(value)) return createCallback(value, context, argCount);
		if (_d.isObject(value)) return _d.matches(value);
		return _d.property(value);
	};

	_d.pairs = function(obj) {
		var keys = _d.keys(obj);
		var length = keys.length;
		var pairs = Array(length);
		for (var i = 0; i < length; i++) {
			pairs[i] = [keys[i], obj[keys[i]]];
		}
		return pairs;
	};

	_d.matches = function(attrs) {
		var pairs = _d.pairs(attrs), length = pairs.length;
		return function(obj) {
			if (obj == null) return !length;
			obj = new Object(obj);
			for (var i = 0; i < length; i++) {
				var pair = pairs[i], key = pair[0];
				if (pair[1] !== obj[key] || !(key in obj)) return false;
			}
			return true;
		};
	};

	_d.indexOf = function(array, item, isSorted) {
		if (array == null) return -1;
		var i = 0, length = array.length;
		if (isSorted) {
			if (typeof isSorted == 'number') {
				i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
			} else {
				i = _d.sortedIndex(array, item);
				return array[i] === item ? i : -1;
			}
		}
		for (; i < length; i++) if (array[i] === item) return i;
		return -1;
	};

	_d.values = function(obj) {
		var keys = _d.keys(obj);
		var length = keys.length;
		var values = Array(length);
		for (var i = 0; i < length; i++) {
			values[i] = obj[keys[i]];
		}
		return values;
	};

	_d.extend = function(obj) {
		if (!_d.isObject(obj)) return obj;
		var source, prop;
		for (var i = 1, length = arguments.length; i < length; i++) {
			source = arguments[i];
			for (prop in source) {
				if (hasOwnProperty.call(source, prop)) {
					obj[prop] = source[prop];
				}
			}
		}
		return obj;
	};

	_d.isArray = function(obj) {
		return toString.call(obj) === '[object Array]';
	};

	_d.isBoolean = function(obj) {
		return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	};

	_d.isUndefined = function(obj) {
		return obj === void 0;
	};

	_d.isObject = function(obj) {
		var type = typeof obj;
		return type === 'function' || type === 'object' && !!obj;
	};

	_d.each = function(obj, iteratee, context) {
		if (obj == null) return obj;
		iteratee = createCallback(iteratee, context);
		var i, length = obj.length;
		if (length === +length) {
			for (i = 0; i < length; i++) {
				iteratee(obj[i], i, obj);
			}
		} else {
			var keys = _d.keys(obj);
			for (i = 0, length = keys.length; i < length; i++) {
				iteratee(obj[keys[i]], keys[i], obj);
			}
		}
		return obj;
	};

	_d.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
		_d['is' + name] = function(obj) {
			return toString.call(obj) === '[object ' + name + ']';
		};
	});

	///////////////////////////////////////////////////////////
	// _json (strip of the required underscore.json methods) //
	///////////////////////////////////////////////////////////

	var deepJSON = function (obj, key, value, remove) {

		var keys = key.replace(/\[(["']?)([^\1]+?)\1?\]/g, '.$2').replace(/^\./, '').split('.'),
				root,
				i = 0,
				n = keys.length;

		// Set deep value
		if (arguments.length > 2) {

			root = obj;
			n--;

			while (i < n) {
				key = keys[i++];
				obj = obj[key] = _d.isObject(obj[key]) ? obj[key] : {};
			}

			if (remove) {
				if (_d.isArray(obj)) {
					obj.splice(keys[i], 1);
				} else {
					delete obj[keys[i]];
				}
			} else {
				obj[keys[i]] = value;
			}

			value = root;

		// Get deep value
		} else {
			while ((obj = obj[keys[i++]]) != null && i < n) {};
			value = i < n ? void 0 : obj;
		}

		return value;

	}

	var _json = {}

	_json.VERSION = '0.1.0';
	_json.debug = true;

	_json.exit = function(source, reason, data, value) {

		if (!_json.debug) return;

		var messages = {};
		messages.noJSON = "Not a JSON";
		messages.noString = "Not a String";
		messages.noArray = "Not an Array";
		messages.missing = "Missing argument";

		var error = { source: source, data: data, value: value };
		error.message = messages[reason] ? messages[reason] : "No particular reason";
		console.log("Error", error);
		return;

	}

	_json.isStringified = function(string) {

		var test = false;
		try {
			test = /^[\],:{}\s]*$/.test(string.replace(/\\["\\\/bfnrtu]/g, '@').
			replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
			replace(/(?:^|:|,)(?:\s*\[)+/g, ''));
		} catch (e) {}
		return test;

	}

	_json.get = function(json, selector) {

		if (json == undefined) return _json.exit("get", "missing", "json", json);
		if (selector == undefined) return _json.exit("get", "missing", "selector", selector);
		if (!_d.isString(selector)) return _json.exit("get", "noString", "selector", selector);
		return deepJSON(json, selector);

	};

	_json.set = function(json, selector, value) {

		if (json == undefined) return _json.exit("set", "missing", "json", json);
		if (selector == undefined) return _json.exit("set", "missing", "selector", selector);
		if (!_d.isString(selector)) return _json.exit("set", "noString", "selector", selector);
		return  value !== "" ? deepJSON(json, selector, value) : deepJSON(json, selector, null)

	};

	_json.remove = function(json, selector) {

		if (json == undefined) return _json.exit("remove", "missing", "json", json);
		if (selector == undefined) return _json.exit("remove", "missing", "selector", selector);
		if (!_d.isString(selector)) return _json.exit("remove", "noString", "selector", selector);
		return deepJSON(json, selector, null, true);

	}

	_json.flatten = function(json) {

		if (json.constructor.name != "Object") return _json.exit("flatten", "noJSON", "json", json);

		var result = {};
		function recurse (cur, prop) {
			if (Object(cur) !== cur) {
				result[prop] = cur;
			} else if (Array.isArray(cur)) {
				for (var i = 0, l = cur.length; i < l; i++) {
					recurse(cur[i], prop ? prop + "." + i : "" + i);
					if (l == 0) result[prop] = [];
				}
			} else {
				var isEmpty = true;
				for (var p in cur) {
					isEmpty = false;
					recurse(cur[p], prop ? prop + "." + p : p);
				}
				if (isEmpty) result[prop] = {};
			}
		}
		recurse(json, "");
		return result;

	}

	_json.unflatten = function(data) {

		if (Object(data) !== data || Array.isArray(data))
			return data;
		var result = {}, cur, prop, idx, last, temp;
		for (var p in data) {
			cur = result, prop = "", last = 0;
			do {
				idx = p.indexOf(".", last);
				temp = p.substring(last, idx !== -1 ? idx : undefined);
				cur = cur[prop] || (cur[prop] = (!isNaN(parseInt(temp)) ? [] : {}));
				prop = temp;
				last = idx + 1;
			} while(idx >= 0);
			cur[prop] = data[p];
		}
		return result[""];

	}

	_json.prettyprint = function(json) {

		return JSON.stringify(json, undefined, 2);

	}

	//////////////////////////////////////////
	// dQuery (mini replacement for jQuery) //
	//////////////////////////////////////////

	var dQuery = function () {};
	dQuery.constructor = dQuery;

	dQuery.prototype.dom = function(selector, createOptions) {

		var self = this,
				elements = [];

		if (createOptions) {
			var element = document.createElement(selector);
			for (var k in createOptions) {
				element[k] = createOptions[k];
			}
		} else {
			if (_d.isString(selector)) {
				elements = [].slice.call(document.querySelectorAll(selector));
			} else {
				if (_d.isObject(selector) && selector.attributes) { elements = [selector]; }
			}
			self._elements = elements;
			self.length = elements.length;
			return self;
		}

	}

	dQuery.prototype.on = function(events, fn) {

		var self = this,
				elements = self._elements;
		events = events.split(" ");
		for (var i = 0, lenEl = elements.length; i < lenEl; i++) {
			var element = elements[i];
			for (var j = 0, lenEv = events.length; j < lenEv; j++) {
				if (element.addEventListener) { element.addEventListener(events[j], fn, false); }
			}
		}

	}

	dQuery.prototype.get = function(index, chain) {

			var self = this,
					elements = self._elements || [],
					element = elements[index] || {};

			if (chain) {
				self._element = element;
				return self;
			} else {
				return _d.isNumber(index) ? element : elements;
			}

	}

	dQuery.prototype.reverse = function() {
		this._elements = this._elements.reverse();
		return this;
	}

	dQuery.prototype.val = function(value) {
		if (this.type() === "select-multiple") {
			var options = this.prop("options");
			if (_d.isUndefined(value)) {
				var values = [];
				for (var i=0; i < options.length; i++) {
					if (options[i].selected) {
						values.push(options[i].value);	
					} 
				}
				return values;
			} else {
				for (var i=0; i < options.length; i++) {
					if (_d.contains(value, options[i].value)) {
						options[i].selected = true;
					} else {
						options[i].selected = false;
					}
				}
			}
		} else {
			return this.prop("value", value);	
		}
	}

	dQuery.prototype.type = function(value) {
		return this.prop("type", value);
	}

	dQuery.prototype.html = function(value) {
		return this.prop("innerHTML", value);
	}

	dQuery.prototype.text = function(value) {
		return this.prop("innerHTML", escapeHTML(value));
	}

	dQuery.prototype.prop = function(prop, value) {

		var self = this,
				elements = self._elements;

		for (var i in elements) {
			if (_d.isUndefined(value)) {
				return elements[i][prop];
			} else {
				elements[i][prop] = value;
			}
		}

	}

	dQuery.prototype.attr = function(attr, value) {

		var self = this,
				elements = self._elements;
		for (var i in elements) {
			if (value === undefined) {
				return elements[i].getAttribute(attr);
			} else {
				elements[i].setAttribute(attr, value);
			}
		}
		return self;

	}

	dQuery.prototype.addClass = function(c) {
		var self = this;
		for (var i in self._elements) self._elements[i].classList.add(c);
		return self;
	}

	dQuery.prototype.removeClass = function(c) {
		var self = this;
		for (var i in self._elements) self._elements[i].classList.remove(c);
		return self;
	}

	dQuery.prototype.ready = function(callback) {

		if (document && _d.isFunction(document.addEventListener)) {
			document.addEventListener("DOMContentLoaded", callback, false);
		} else if (window && _d.isFunction(window.addEventListener)) {
			window.addEventListener("load", callback, false);
		} else {
			document.onreadystatechange = function() {
				if (document.readyState === "complete") { callback(); }
			}
		}

	}

	//////////////////////
	// WATCH DOM EVENTS //
	//////////////////////

	ddm = new DIADEM();

	var timeoutInput = null;
	var eventInputChange = function(e) {
		if (timeoutInput) { clearTimeout(timeoutInput); }
		timeoutInput = setTimeout(function() {
			var element = d.dom(e.target).get(0);
			ddm.dom(element).toStorage();
		}, ddm.options.timeout);
	}

	var timeoutDOM = null;
	var eventDOMChange = function() {

		// We need to register dynamically added bindings so we do it by watching DOM changes
		// We use a timeout since "DOMSubtreeModified" gets triggered on every change in the DOM (even input value changes)
		// so we can limit the number of scans when a user is typing something
		if (timeoutDOM) { clearTimeout(timeoutDOM); }
		timeoutDOM = setTimeout(function() {
			ddm.registerBindings();
			setEventListeners();
		}, ddm.options.timeoutDOM);

	}

	//////////////
	// INITIATE //
	//////////////

	d = new dQuery();
	ddm.d = d;
	ddm.functions = {};

	var setEventListeners = function() {

			d.dom("body").on("DOMSubtreeModified", eventDOMChange);
			d.dom("[" + tagPrefix + "-data]").on("input change", eventInputChange);

	}

	var eventInit = function() {

		setEventListeners();
		ddm.restore();
		ddm.registerBindings();
		ddm.updateBindings();
		ddm.initValues();

	}

	d.ready(eventInit);

	return ddm;

}));