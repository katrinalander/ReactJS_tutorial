jQuery.fn.extend({
    disable: function (state) {
        return this.each(function () {
            this.disabled = state;
        });
    }
});

fieldValidator = {
    fiveDotTwo: { regex: /^[0-9]{0,5}(\.[0-9]{0,2})?$/, message: Globalize.ebos_translate('fiveDotTwo') },
    integer: { regex: /^\d{0,5}$/, message: Globalize.ebos_translate('integer') },
    integer3digit: { regex: /^\d{0,3}$/, message: Globalize.ebos_translate('integer') },
    phoneNumber: {regex: /^[0-9]{0,10}$/,message: Globalize.ebos_translate('phoneNumberRegex')}, 
};

var triggerValidation = function () {
    $('#ManualRefundsOverrings').trigger('input');
    $('#BillableSales').trigger('input');
    $('#GiftCertif').trigger('input');
    $('#CountedCash').trigger('input');
    $('#PromoActual').trigger('input');
    $('#CouponDiscountActual').trigger('input');
};

var validateCurrencyCalcFields = function (input) {
    var isDecimal = true;//testing
    var isNum = true;
    var denomination = 0;
    var denominationOk = true;
    switch($(input).attr('id')) {
        case "coin_value_50" :
            denomination = ".5";
            break;
        case'coin_value_25':
            denomination = ".25";
            break;
        case 'coin_value_10':
            denomination = ".1";
            break;
        case 'coin_value_05':
            denomination = ".05";
            break;
        case 'coin_value_01':
            denomination = ".01";
            break;

        case 'cash_value_100':
            denomination = "100";
            isDecimal = false;
            break;
        case 'cash_value_50':
            denomination = "50";
            isDecimal = false;
            break;
        case 'cash_value_20':
            denomination = "20";
            isDecimal = false;
            break;
        case 'cash_value_10':
            denomination = "10";
            isDecimal = false;
            break;
        case 'cash_value_05':
            denomination = "5";
            isDecimal = false;
            break;
        case 'cash_value_02':
            denomination = "2";
            isDecimal = false;
            break;
        case 'foreign_currency':
            denomination = ".01";
            break;
        default:
            denomination = "1";
            isDecimal = true; //should pass no matter what - $1 coin
            break;
    }

    if (denomination && $(input).val() != "" && !(+(parseFloat($(input).val() * 100).toFixed(2)) % (denomination * 100) == 0)) {
        denominationOk = false;
    }

    if (isDecimal) {
        isNum = fieldValidator.fiveDotTwo.regex.test($(input).val());
    } else {
        isNum = fieldValidator.integer.regex.test($(input).val());
    }

    if ($(input).val() == "") {
        $(input).removeClass("has-success");
        $(input).removeClass("has-error");
        $(input).removeClass("preventNavigationAway");
        toggleButtonStatus(false);
    } else if (isNum && denominationOk) {
        $(input).removeClass("has-error").removeClass("preventNavigationAway").addClass("has-success");
        toggleButtonStatus(false);
    } else {
        $(input).removeClass("has-success").addClass("has-error").addClass("preventNavigationAway");
        toggleButtonStatus(true);
    }
};

var keyupValNums = function (e, self, validation, message) {
    var code = e.keyCode || e.which;
    if (code === 13) { return false; }
    var target = e.target;
    if (code === 8 || code === 46) {
        if (!target.value.match(validation)) {
            e.preventDefault();
            flashError(self, true, message);
            return false;
        } else {
            flashError(self, false, message);
            return false;
        }
    }
};


var keypressValNums = function(self, e, validation, message){
    var code = e.keyCode || e.which;

    if (code === 13) { return false; }

    if (inValidCurrencyKeyStroke(code)) {
        e.preventDefault();
        flashError(self, true, message);
        return false;
    } else {
        // Construct what the value will be if the event is not prevented.
        // Test to make sure the user is inputting only valid characters
        // and that the resulting input is valid.
        var target = e.target;
        var char = String.fromCharCode(e.charCode);
        var inputVal = target.value;
        var value = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd);

        if (!(value.match(validation))) {
            e.preventDefault();
            flashError(self, true, message);
            return false;
        } else {
            flashError(self, false, message);
            return false;
        }
    }

};

var keyupAlphaNums = function (e, self, validation, message) {
    var code = e.keyCode || e.which;
    if (code === 13) { return false; }
    var target = e.target;
    if (code === 8 || code === 46) {
        if (!target.value.match(validation)) {
            e.preventDefault();
            flashError(self, true, message);
            return false;
        } else {
            flashError(self, false, message);
            return false;
        }
    }
};


var keypressAlphaNums = function(self, e, validation, message){
    var code = e.keyCode || e.which;

    if (code === 13) { return false; }

    // Construct what the value will be if the event is not prevented.
    // Test to make sure the user is inputting only valid characters
    // and that the resulting input is valid.
    var target = e.target;
    var char = String.fromCharCode(e.charCode);
    var inputVal = target.value;
    var value = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd);

    if (!(value.match(validation))) {
        e.preventDefault();
        flashError(self, true, message);
        return false;
    } else {
        flashError(self, false, message);
        return false;
    }

};


var flashError = function (self, error, message) {
    if (error) {
        //different fields to highlight for CC and DrawerCountdown
        if ($(self).hasClass("numValCC") || $(self).hasClass("decValCC") || $(self).hasClass("decValSingle")) {
            var hadSuccess = false;
            if ($(self).hasClass("has-success")) {
                $(self).removeClass('has-success');
                hadSuccess = true
            }
            $(self).addClass('flash-has-error');
            setTimeout(function () { $(self).removeClass('flash-has-error'); }, 300);
            if (hadSuccess) {
                setTimeout(function () { $(self).addClass('has-success'); }, 300);
            }
        }
        else {
            $(self).closest("div").addClass('flash-has-error');
            setTimeout(function () { $(self).closest("div").removeClass('flash-has-error'); }, 300);
        }
        toastr.clear();
        toastr.error(message, Globalize.ebos_translate('error'));
    }
    else {
        $(self).closest("div").removeClass('has-error');
    }
};

$(document).on('keypress', '.decVal, .decValCC, .decValSingle', function (evt) {
    var self = this;
    var e = evt || event;
    keypressValNums(self, e, fieldValidator.fiveDotTwo.regex, fieldValidator.fiveDotTwo.message);
});

$(document).on('keypress','.numVal, .numValCC, .numValSingle', function (evt) {
    var self = this;
    var e = evt || event;
    keypressValNums(self, e, fieldValidator.integer.regex, fieldValidator.integer.message);
});

$(document).on('keypress','.numVal3digit', function (evt) {
    var self = this;
    var e = evt || event;
    keypressValNums(self, e, fieldValidator.integer3digit.regex, fieldValidator.integer3digit.message);
});

$(document).on('keyup','.decVal, .decValCC, .decValSingle', function (e) {
    var self = this;
    keyupValNums(e, self, fieldValidator.fiveDotTwo.regex, fieldValidator.fiveDotTwo.message);
});

$(document).on('keyup','.numVal, .numValCC, .numValSingle', function (e) {
    var self = this;
    keyupValNums(e, self, fieldValidator.integer.regex, fieldValidator.integer.message);
});

$(document).on('keyup','.numVal3digit', function (e) {
    var self = this;
    keyupValNums(e, self, fieldValidator.integer3digit.regex, fieldValidator.integer3digit.message);
});
$(document).on('keypress', '.phoneNumber', function (evt) {
    var self = this;
    var e = evt || event;
    keypressValNums(self, e, fieldValidator.phoneNumber.regex, fieldValidator.phoneNumber.message);
});
var inputPaste = function(e, self, validation, message, closest, callback){
    var code = e.keyCode || e.which;
    var target = e.target;

    if (!target.value.match(validation)) {
        e.preventDefault();
        $(self).closest(closest).addClass('has-error');
        $(self).addClass('preventNavigationAway');
        return false;
    } else {
        $(self).removeClass('preventNavigationAway');
        $(self).removeClass('has-error');
        $(self).tooltip('hide');
        if (callback) {
            callback(self);
        }
    }


};


$(document).on('input','.decVal', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.fiveDotTwo.regex, fieldValidator.fiveDotTwo.message, "div");
});
$(document).on('input','.decValCC', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.fiveDotTwo.regex, fieldValidator.fiveDotTwo.message, "", validateCurrencyCalcFields);
});
$(document).on('input','.decValSingle', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.fiveDotTwo.regex, fieldValidator.fiveDotTwo.message, "");
});

$(document).on('input', '.numVal', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.integer.regex, fieldValidator.integer.message, "div");
});

$(document).on('input', '.numValCC', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.integer.regex, fieldValidator.integer.message, "", validateCurrencyCalcFields);

});

$(document).on('input', '.numValSingle', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.integer.regex, fieldValidator.integer.message, "");

});

$(document).on('input', '.numVal3digit', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.integer3digit.regex, fieldValidator.integer3digit.message, "div");

});
$(document).on('input', '.phoneNumber', function (e) {
    var self = this;
    inputPaste(e, self, fieldValidator.phoneNumber.regex, fieldValidator.phoneNumber.message, "div");

});

$(document).on('blur', '.decVal, .decValCC, .decValSingle, .numVal, .numValCC, .numValSingle, .numVal3digit, .phoneNumber',  function (event) {
    if ($('.has-error').length) {
        var _this = this;
        if ($(_this).hasClass('preventNavigationAway')) {
            $(this).focus().select();
            return false;
        }
    } else {
        $(this).tooltip('destroy');
    }
});

var inValidCurrencyKeyStroke = function (code) {
    var decKeyCodes = [
        8, //backspace
        9, //tab
        13, //enter - do nothing
        37, //left arrow
        39, //right arrow
        46, //delete or period - no idea why
        48, //0
        49,//1
        50,//2
        51,//3
        52,//4
        53,//5
        54,//6
        55,//7
        56,//8
        57 //9
    ];

    if (decKeyCodes.indexOf(code) == -1) {
        return true;
    }
    else {
        return false;
    }
};

var toggleButtonStatus = function (toggleBool) {
    $('#btnCancelCC').disable(toggleBool);
    $('#btnCommitCC').disable(toggleBool);
    $('#btnCloseCC').disable(toggleBool);
};

var validateDepositCode = function () {
    if ($("#selectDepositCode").val()) {
        if ($("#selectDepositCode").closest("div").hasClass("has-error")) {
            $("#selectDepositCode").closest("div").removeClass("has-error")
        }
        $("#selectDepositCode").closest("div").addClass("has-success");
        $("#depositCodeError").hide();
    }
    else {
        $("#selectDepositCode").closest("div").addClass("has-error");
        $("#depositCodeError").show();
    }
};

var onLoadDepositCode = function () {

    $("#selectDepositCode").closest("div").removeClass("has-error")
    $("#selectDepositCode").closest("div").removeClass("has-success");
};